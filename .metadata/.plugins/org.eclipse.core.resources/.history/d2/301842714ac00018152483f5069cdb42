/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.datastore;

import java.sql.SQLException;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.IExtension;
import org.eclipse.core.runtime.IExtensionPoint;
import org.eclipse.core.runtime.IExtensionRegistry;
import org.eclipse.core.runtime.IRegistryEventListener;
import org.eclipse.core.runtime.Platform;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ibm.im.ac.datastore.AbstractDatastore;
import com.ibm.im.ac.datastore.ConnectionFactory;
import com.ibm.im.ac.datastore.DatastoreException;
import com.ibm.im.ac.datastore.RootDatastore;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;

public class ImsOmDatastore extends AbstractDatastore implements IRegistryEventListener{

	private static ImsOmDatastore instance;
	private ImsDatabaseTable imsDatabaseTable 		= null;
	private ImsTransactionTable imsTransactionTable = null;
	private ImsTransactionRepoTable imsTransactionRepoTable = null;
	private ImsRoutingCodeRepoTable imsRoutingCodeRepoTable = null;
	private ImsDatabaseRepoTable imsDatabaseRepoTable = null;
	private ImsProgramTable imsProgramTable 		= null;
	private ImsProgramRepoTable imsProgramRepoTable = null;
	private ImsRoutingCodeTable imsRoutingCodeTable = null;
	private OmImsTable imsTable                     = null;
    private OmMemberTable memberTable              	= null;
	private OmImsplexTable imsplexTable 			= null;
	private GridHeaderTable gridHeaderTable 		= null;
    private static final String DATASTORE_PREFIX	= "IMSOM";
	private static final String DATASTORE_VERSION   = "1.0";
	
	//Extension point used for user provided datatstore (derby connection)
	private static final String ExtensionPointId = "com.ibm.ims.ea.om.datastore.ConnectionFactory";
	
	private static Logger logger = LoggerFactory.getLogger(ImsOmDatastore.class);
	

	protected ImsOmDatastore(RootDatastore rootContext) {
		super(rootContext, DATASTORE_PREFIX, DATASTORE_VERSION);
	}
	
	public synchronized static ImsOmDatastore getInstance() throws DatastoreException {
		
		if(instance == null){
			IExtensionRegistry osgiRegistry = Platform.getExtensionRegistry();
			if(osgiRegistry != null){
				IConfigurationElement[] iConfigurationElements = osgiRegistry.getConfigurationElementsFor(ExtensionPointId);
			        
				// Set up to listen for registry events
			    osgiRegistry.addListener(instance, ExtensionPointId);
			        
			    // Add extensions that have already passed
			    try {
					configureDataStore(iConfigurationElements);
				} catch (SQLException e) {
					//Do nothing, it fall through to new ImsOMDatastore(RootDatastore.getInstance());
				} catch (CoreException e) {
					//Do nothing, it fall through to new ImsOMDatastore(RootDatastore.getInstance());
				}
			}
			
			instance =  new ImsOmDatastore(RootDatastore.getInstance());
			instance.initialize();
		}
    	return instance;
    }  
	
	@Override
	protected void createTables() throws OmDatastoreException {
		try {
				//Table creation is order sensitive
				this.imsplexTable 		 = new OmImsplexTable(this);
				this.imsTransactionTable = new ImsTransactionTable(this);
				this.imsTransactionRepoTable = new ImsTransactionRepoTable(this);
				//TODO: Why are we creating tables here, each store does this already
//				this.imsDatabaseTable 	 = new ImsDatabaseTable(this);
//				this.imsProgramTable 	 = new ImsProgramTable(this);
//				this.imsRoutingCodeTable = new ImsRoutingCodeTable(this);
				
		} catch (DatastoreException e) {
			throw new OmDatastoreException(e);
		}
	}
	
	
	public ImsTransactionTable getImsTransactionStore() throws OmDatastoreException{
		try {
				if(this.imsplexTable == null){
					this.imsplexTable = new OmImsplexTable(this);
				}
			
				if(this.imsTransactionTable == null){
					this.imsTransactionTable = new ImsTransactionTable(this);
				}
		} catch (DatastoreException e) {
			throw new OmDatastoreException(e);
		}
		
		return this.imsTransactionTable;
	}
	
	public ImsTransactionRepoTable getImsTransactionRepoStore() throws OmDatastoreException{
		try {
				if(this.imsplexTable == null){
					this.imsplexTable = new OmImsplexTable(this);
				}
			
				if(this.imsTransactionRepoTable == null){
					this.imsTransactionRepoTable = new ImsTransactionRepoTable(this);
				}
		} catch (DatastoreException e) {
			throw new OmDatastoreException(e);
		}
		
		return this.imsTransactionRepoTable;
	}
	
	public GridHeaderTable getGridHeaderTable() throws OmDatastoreException {
		try {
			if(this.gridHeaderTable == null) {
				this.gridHeaderTable = new GridHeaderTable(this);
			}
		} catch (DatastoreException e) {
			throw new OmDatastoreException(e);
		}
		return this.gridHeaderTable;
	}
	
	
	public ImsDatabaseTable getImsDatabaseStore() throws OmDatastoreException{
		try {
				if(this.imsplexTable == null){
					this.imsplexTable = new OmImsplexTable(this);
				}
				
				if(this.imsDatabaseTable == null){
					this.imsDatabaseTable = new ImsDatabaseTable(this);
				}
		} catch (DatastoreException e) {
			throw new OmDatastoreException(e);
		}
		
		return this.imsDatabaseTable;
	}
	
	public ImsDatabaseRepoTable getImsDatabaseRepoStore() throws OmDatastoreException{
		try {
				if(this.imsplexTable == null){
					this.imsplexTable = new OmImsplexTable(this);
				}
				
				if(this.imsDatabaseRepoTable == null){
					this.imsDatabaseRepoTable = new ImsDatabaseRepoTable(this);
				}
		} catch (DatastoreException e) {
			throw new OmDatastoreException(e);
		}
		
		return this.imsDatabaseRepoTable;
	}
	
	public ImsRoutingCodeRepoTable getImsRoutingCodeRepoStore() throws OmDatastoreException{
		try {
				if(this.imsplexTable == null){
					this.imsplexTable = new OmImsplexTable(this);
				}
				
				if(this.imsRoutingCodeRepoTable == null){
					this.imsRoutingCodeRepoTable = new ImsRoutingCodeRepoTable(this);
				}
		} catch (DatastoreException e) {
			throw new OmDatastoreException(e);
		}
		
		return this.imsRoutingCodeRepoTable;
	}
	
	public ImsProgramTable getImsProgramStore() throws OmDatastoreException{
		try {
			if(this.imsProgramTable == null){
				this.imsProgramTable = new ImsProgramTable(this);
			}
		} catch (DatastoreException e) {
			throw new OmDatastoreException(e);
		}
		
		return this.imsProgramTable;
	}
	
	public ImsProgramRepoTable getImsProgramRepoStore() throws OmDatastoreException{
		try {
			if(this.imsProgramRepoTable == null){
				this.imsProgramRepoTable = new ImsProgramRepoTable(this);
			}
		} catch (DatastoreException e) {
			throw new OmDatastoreException(e);
		}
		
		return this.imsProgramRepoTable;
	}
	
	
	public ImsRoutingCodeTable getImsRoutingCodeStore() throws OmDatastoreException{
		try {
				if(this.imsplexTable == null){
					this.imsplexTable = new OmImsplexTable(this);
				}
				
				if(this.imsRoutingCodeTable == null){
					this.imsRoutingCodeTable = new ImsRoutingCodeTable(this);
				}
		} catch (DatastoreException e) {
			throw new OmDatastoreException(e);
		}
		
		return this.imsRoutingCodeTable;
	}
	
	public OmImsTable getOmImsStore() throws OmDatastoreException{
		try {
			if(this.imsTable == null) {
				this.imsTable = new OmImsTable(this);
			}
		} catch(DatastoreException e) {
			throw new OmDatastoreException(e);
		}
		return this.imsTable;
	}
	
	public OmMemberTable getOmMemberStore() throws OmDatastoreException{
		try {
			if(this.memberTable == null) {
				this.memberTable = new OmMemberTable(this);
			}
		} catch(DatastoreException e) {
			throw new OmDatastoreException(e);
		}
		return this.memberTable;
	}
	
	public OmImsplexTable getOmImsplexStore() throws OmDatastoreException{
		try {
			if(this.imsplexTable == null) {
				this.imsplexTable = new OmImsplexTable(this);
			}
		} catch(DatastoreException e) {
			throw new OmDatastoreException(e);
		}
		return this.imsplexTable;
	}
	
	public static String getDatastorePrefix(){
		return DATASTORE_PREFIX;
	}
	
//*******************************************************************************************
// Extension point Helpers
//*******************************************************************************************
	
    @Override
    public void added(IExtension[] extensions) {
        for (IExtension extension : extensions) {
        	 IConfigurationElement[] iConfigurationElements = extension.getConfigurationElements();
        	 //configureDataStore(iConfigurationElements);
        }
    }

    @Override
    public void removed(IExtension[] extensions) {
        for (IExtension extension : extensions) {
            unregisterExtension(extension.getConfigurationElements());
        }
    }

	@Override
	public void added(IExtensionPoint[] extensionPoints) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void removed(IExtensionPoint[] extensionPoints) {
		// TODO Auto-generated method stub
		
	}
	
	private void unregisterExtension(IConfigurationElement[] configElements) {
        configElements = Platform.getExtensionRegistry().getConfigurationElementsFor(ExtensionPointId);
        //TODO
    }
	
	private synchronized static void configureDataStore(IConfigurationElement[] iConfigurationElements ) throws SQLException, DatastoreException, CoreException{
		for (IConfigurationElement iConfigurationElement : iConfigurationElements) {
				
			Object o = iConfigurationElement.createExecutableExtension("ConnectionFactory");
				
			if (o instanceof ConnectionFactory) {
				ConnectionFactory connectionFactory = (ConnectionFactory) o;
				String msg = "User provided Datastore has been loaded : [" + connectionFactory.getClass().getName()+"]";
				
				if(logger.isDebugEnabled()){
					logger.debug(msg);
				}else{
						System.out.println(msg);
				}
				
				System.out.println(msg);
				
				RootDatastore.getInstance().setConnectionFactory(connectionFactory);
			}
		}
	}
}
