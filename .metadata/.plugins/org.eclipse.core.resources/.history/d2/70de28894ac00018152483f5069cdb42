/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013, 2015 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.common.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.Map;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ibm.im.ac.datastore.DatastoreException;
import com.ibm.ims.ea.base.version.Version;
import com.ibm.ims.ea.om.cmd.constants.ImsCommandAttributes;
import com.ibm.ims.ea.om.cmd.exceptions.OmCommandGenerationException;
import com.ibm.ims.ea.om.cmd.utilities.Type2CommandSerializable;
import com.ibm.ims.ea.om.cmd.v14.query.imsplex.QueryImsPlex;
import com.ibm.ims.ea.om.cmd.v14.query.pgm.QueryPgm;
import com.ibm.ims.ea.om.cmd.v14.type2.Type2Command;
import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.common.exception.OmRuntimeException;
import com.ibm.ims.ea.om.common.message.OmInteractionContext;
import com.ibm.ims.ea.om.common.result.OmResultSet;
import com.ibm.ims.ea.om.common.service.ProgramService;
import com.ibm.ims.ea.om.datastore.ImsBaseDastoreConstants;
import com.ibm.ims.ea.om.datastore.ImsOmDatastore;
import com.ibm.ims.ea.om.datastore.ImsProgramTable;
import com.ibm.ims.ea.om.datastore.ImsProgramRepoTable;
import com.ibm.ims.ea.om.ims.Ims;
import com.ibm.ims.ea.om.db.Database;
import com.ibm.ims.ea.om.db.Database.DatabaseResponseAttribute;
import com.ibm.ims.ea.om.ims.Ims.ImsResponseAttribute;
import com.ibm.ims.ea.om.imsplex.Imsplex;
import com.ibm.ims.ea.om.imsplex.Imsplex.ImsplexResponseAttribute;
import com.ibm.ims.ea.om.pgm.Program;
import com.ibm.ims.ea.om.pgm.update.PgmUpdateCommandBuilder;
import com.ibm.ims.ea.om.pgm.update.syntax.START._PGM_START;
import com.ibm.ims.ea.om.pgm.update.syntax.STOP._PGM_STOP;
import com.ibm.ims.ea.om.rtc.RoutingCode;
import com.ibm.ims.ea.om.rtc.RoutingCode.RtcResponseAttribute;
import com.ibm.ims.ea.om.tran.Transaction;
import com.ibm.ims.ea.om.tran.Transaction.TransactionResponseAttribute;


/**
 * <pre>
 * Class provides methods to interact with OM for the IMS Program Resource types. 
 * Return types are generalized for all interactions as a Collection of {@link Pgm} objects. 
 * 
 * It should be noted that the Collection only manages the response for the particular 
 * resource and that OM Messages including Reason Codes, Reason Text, etc are accessible 
 * from the {@link Om} instance managing the interaction. 
 * 
 * See  <code>{@link Om#getOmMessageContexts()} </code> on how to access OM Messages.
 * </pre>
 * 
 * @author ddimatos
 *
 */
public final class ProgramServices extends ServicesHelper implements ProgramService{

	private static final Logger logger = LoggerFactory.getLogger(ProgramServices.class);
	
	//Statically build a mem-cache of all the known discovered meta-data about this service resulting from discovery
    static{
    	//Try to get an instance of the com.ibm.im.ac.datastore 
		ImsOmDatastore imsOMDatastore;
		try {
				imsOMDatastore = ImsOmDatastore.getInstance();
			
				//Build the meta-data for program table
				ImsProgramTable imsProgramTable = imsOMDatastore.getImsProgramStore();
			
				if(imsProgramTable != null){
					imsProgramTable.autoConfigureResourceMetaData();
				}
			
				//Build the meta-data for program REPO table
				ImsProgramRepoTable imsProgramRepoTable = imsOMDatastore.getImsProgramRepoStore();
			
				if(imsProgramRepoTable != null){
					imsProgramRepoTable.autoConfigureResourceMetaData();
				}
		} catch (DatastoreException e) {
			//This exception will only happen if dependency "com.ibm.im.ac.datastore" has not been
			//loaded by OSGI. Moving this logic to Declarative serivces might be a good option. 
		
			if(logger.isDebugEnabled()){
				logger.debug("Appears that the bundle for service com.ibm.im.ac.datastore.AbstractDatastore has not been loaded");
			}
		}
    }
    
	//This must remain protected else the Om instance will not be able to aggregate all the Om Messages
	protected ProgramServices(Om om) {
		super(om);
		
		try {
			this.resourceVersion = om.getImsplexService().getResourceVersions(new QueryImsPlex.TypeOptions[]{QueryImsPlex.TypeOptions.IMS});
		} catch (Exception e) {
			version = Version.IMS_ZERO_RELEASE;
		}
	}

	// ************************************************************************************************************
	// * Get Programs
	// ************************************************************************************************************
	@Override
	public Collection<Program> getPrograms() throws OmException, OmDatastoreException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> getPrograms()");
		
		try{
			return getPrograms(new String[]{ImsCommandAttributes.ASTERISK});
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getPrograms()");
		}
	}

	@Override
	public Collection<Program> getPrograms(String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getPrograms("+Arrays.toString(imsSystemName)+")");

		int resourceCacheSize = 0;
		Date date = null;
		ArrayList<String> imsAttributes = null;
		
		String methodKey =  "getPrograms";
		//This variable will hold the query that is been execute live mode or equivalent type2command query the derby query that is executed in cache mode. 
		//The value is fetched up to the GUI for showing a hover over the command button
		//Since this is done as part of a bug fix, a complete dynamic implementation of the value for the variable is not done
		// Currently its just hardcoded in the services level
		String cmdExecuted = null;

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
		
		try {
			imsSystemName = this.routeMemberFormater(imsSystemName);


			//Hardcoded value which needs to be enhanced to be dynamic eventually
			cmdExecuted = new String("CMD(QUERY PGM NAME(*) SHOW(ALL)) ROUTE(" + Arrays.toString(imsSystemName) + ")");
            
			        
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);
			
			/** Case: If it is not live then enter this block otherwise drop down to the live code **/
			if(!this.om.isInteractionModeLive()){

				//Create a connection to the transaction table (cache) datastore
				ImsProgramTable imsProgramTable = ImsOmDatastore.getInstance().getImsProgramStore();

				//Size greater than 0 then transactions have been discovered
				resourceCacheSize = imsProgramTable.getCountFromMemoryCache(this.sysplexId, this.imsplexName,imsSystemName);
				
				if( resourceCacheSize > 0){
			        //Set the date the discovery was done
					date = imsProgramTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemName);
					
					//Set the imsattributes that are in the memcache
					imsAttributes = ImsOmDatastore.getInstance().getGridHeaderTable().getGridHeadersMemCache(version.toString(), methodKey);
					
			        /** Case: interaction mode is DEFAULT **/
					return imsProgramTable.getPrograms(this.sysplexId,this.imsplexName,imsSystemName,this.om);
				}
			}

			/** Case: No discovery has been run, continue to operate without the cache (live mode)**/
			Type2Command type2Command = new Type2Command(); 
			type2Command.setVerb(Type2Command.VerbOptions.QUERY); 
			type2Command.setResource(Type2Command.ResourceOptions.PGM);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));

			QueryPgm queryPgm = new QueryPgm();
			queryPgm.getNAME().add(ImsCommandAttributes.ASTERISK);
			queryPgm.getSHOW().add(QueryPgm.ShowOptions.ALL);

			type2Command.setQueryPgm(queryPgm);

			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);
			
			//Convert the omResponse to a collection to be returned
			return propertiesToCollection(omResultSet);

		} catch (OmDatastoreException e) {
			e.setImsplexName(this.om.getOMConnection().getImsplex());
			throw e;
		} catch (DatastoreException e){
			throw convertDatatstoreException(e, this.sysplexId, this.imsplexName);
		} catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getPrograms("+Arrays.toString(imsSystemName)+")");
			
			this.setOmInteractionContext(omResultSet,resourceCacheSize, date, imsAttributes, methodKey,cmdExecuted);
		}
	}

	
	// ************************************************************************************************************
    // * It initially find which all IMS members have repo enabled and then call for repo info for programs
	// ************************************************************************************************************ 

	public Collection<Program> getProgramsWithRepoInfo()throws OmException, OmDatastoreException, OmConnectionException {
	
		
		try{
			//Getting collection from Ims Service on which has repo
			Collection<Ims> membersWithRepo = om.getImsService().getRepoInfo(new String[]{"*"});
			
			if(!membersWithRepo.isEmpty()){
				
				//Getting an IMS member name from the collection
				String routeMember = membersWithRepo.iterator().next().getProperty(ImsResponseAttribute.MBR);
				
				//Calling to get the program Repo info with the identified IMS Member
				return getProgramsWithRepoInfo(new String[]{routeMember});

			}
			return new ArrayList<Program>();
		
		
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getProgramsWithRepoInfo()");
			
		}


	}
	
	// ************************************************************************************************************
    // * Get Repo Info for programs.
	// * The imsName parameter will be the names of Ims for which repo is enabled.
	// ************************************************************************************************************ 

	@Override
	public Collection<Program> getProgramsWithRepoInfo(String[] imsSystemName) throws OmException, OmDatastoreException, OmConnectionException {

		if(logger.isDebugEnabled()) logger.debug(">> getProgramsWithRepoInfo("+Arrays.toString(imsSystemName)+")");
		
		int resourceCacheSize = 0;
		Date date = null;
		ArrayList<String> imsAttributes = null;
		
		//Note the method key to be used for associating the service
		String methodKey = "getProgramsWithRepoInfo"; 
		
		//This variable will hold the query that is been execute live mode or equivalent type2command query the derby query that is executed in cache mode. 
        //The value is fetched up to the GUI for showing a hover over the command button
        //Since this is done as part of a bug fix, a complete dynamic implementation of the value for the variable is not done
        // Currently its just hardcoded in the services level
        String cmdExecuted = null;
        
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
				
		try {
			imsSystemName = this.routeMemberFormater(imsSystemName);
			
			//Hardcoded value which needs to be enhanced to be dynamic eventually
            cmdExecuted = new String("CMD(QUERY PGM NAME(*) SHOW(DEFN,GLOBAL,IMSID)) ROUTE(" + Arrays.toString(imsSystemName) + ")");
            
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);
			
			if(!this.om.isInteractionModeLive()){

				//Create a connection to the program table (cache) datastore
				ImsProgramRepoTable imsProgramRepoTable = ImsOmDatastore.getInstance().getImsProgramRepoStore();

				//Size greater than 0 then programs have been discovered
				resourceCacheSize = imsProgramRepoTable.getCountFromMemoryCache(sysplexId, imsplexName,imsSystemName);
				
				if( resourceCacheSize > 0){
					//Set the date the discovery was done
					date = imsProgramRepoTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemName);
					
					//Set the imsattributes that are in the memcache
					imsAttributes = ImsOmDatastore.getInstance().getGridHeaderTable().getGridHeadersMemCache(version.toString(), methodKey);
			        
			        /** Case: interaction mode is DEFAULT or CACHE**/
					return imsProgramRepoTable.getPrograms(sysplexId,imsplexName,imsSystemName,this.om);
				}
			}

			/***************************************************************************************
			 * Case: No discovery has been run, continue to operate without the cache (live mode)
			 ***************************************************************************************/
			
			//Query pgms for show all and status
			Type2Command type2Command = new Type2Command(); 
			type2Command.setVerb(Type2Command.VerbOptions.QUERY); 
			type2Command.setResource(Type2Command.ResourceOptions.PGM);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));
			
			QueryPgm queryPgm = new QueryPgm();
			queryPgm.getNAME().add(ImsCommandAttributes.ASTERISK);
			queryPgm.getSHOW().add(QueryPgm.ShowOptions.DEFN);
			queryPgm.getSHOW().add(QueryPgm.ShowOptions.GLOBAL);
			queryPgm.getSHOW().add(QueryPgm.ShowOptions.IMSID);

			
			type2Command.setQueryPgm(queryPgm);

			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);
			
			return propertiesToCollection(omResultSet);

		} catch (OmDatastoreException e) {
			e.setImsplexName(this.om.getOMConnection().getImsplex());
			throw e;
		} catch (DatastoreException e){
			throw convertDatatstoreException(e, sysplexId, imsplexName);
		} catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getProgramsWithRepoInfo("+Arrays.toString(imsSystemName)+")");
			
			this.setOmInteractionContext(omResultSet,resourceCacheSize, date, imsAttributes, methodKey, cmdExecuted);
			// This is specifically for REPO implementation
			// In repo implementation we never go live for Status, so the message Context is not set.
			//So we are explicitly setting it
			if(!this.om.isInteractionModeLive()){
				if(omResultSet == null)
					omResultSet = new OmResultSet();
				this.om.addOmMessageContext(methodKey,omResultSet.getOmMessageContext());
			}
		}
	
	}
	
	// ************************************************************************************************************
    // * Get Transaction by Name for REPO info
    // ************************************************************************************************************
    @Override
    public Collection<Program> getProgramsByNameWithRepoInfo(String[] program) throws OmException, OmConnectionException, OmDatastoreException {
        if (logger.isDebugEnabled())
            logger.debug(">> getProgramsByNameWithRepoInfo(" + Arrays.toString(program) + ")");

        try {
            //Getting collection from Ims Service on which has repo
            Collection<Ims> membersWithRepo = om.getImsService().getRepoInfo(new String[] {"*"});

            if (!membersWithRepo.isEmpty()) {

                //Getting an IMS member name from the collection
                String routeMember = membersWithRepo.iterator().next().getProperty(ImsResponseAttribute.MBR);

                return getProgramsByNameWithRepoInfo(program, new String[] {routeMember});
            }
            return new ArrayList<Program>();
        } finally {
            if (logger.isDebugEnabled())
                logger.debug("<< getProgramsByNameWithRepoInfo(" + Arrays.toString(program) + ")");
        }
    }

    @Override
    public Collection<Program> getProgramsByNameWithRepoInfo(String[] programs, String[] imsSystemName) throws OmException, OmConnectionException,
            OmDatastoreException {
        if (logger.isDebugEnabled())
            logger.debug(">> getProgramsByNameWithRepoInfo(" + Arrays.toString(programs) + "," + Arrays.toString(imsSystemName) + ")");

        int resourceCacheSize = 0;
        Date date = null;
        ArrayList<String> imsAttributes = null;

        //Note the method key to be used for associating the service
        String methodKey = "getProgramsByNameWithRepoInfo";

        //Local omresultSet otherwise we risk data corruption of the service is reused. 
        OmResultSet omResultSet = null;

        try {
            imsSystemName = this.routeMemberFormater(imsSystemName);

            //Set and configure the version using mapped resource version and the route name
            this.version = this.setVersion(this.resourceVersion, imsSystemName);

            /** Case: If it is not live then enter this block otherwise drop down to the live code **/
            if (!this.om.isInteractionModeLive()) {

              //Create a connection to the program table (cache) datastore
                ImsProgramRepoTable imsProgramRepoTable = ImsOmDatastore.getInstance().getImsProgramRepoStore();

                //Size greater than 0 then programs have been discovered
                resourceCacheSize = imsProgramRepoTable.getCountFromMemoryCache(sysplexId, imsplexName,imsSystemName);
                
                if( resourceCacheSize > 0){
                    //Set the date the discovery was done
                    date = imsProgramRepoTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemName);
                    
                    //Set the imsattributes that are in the memcache
                    imsAttributes = ImsOmDatastore.getInstance().getGridHeaderTable().getGridHeadersMemCache(version.toString(), "getProgramsWithRepoInfo");
                    
                    /** Case: interaction mode is DEFAULT or CACHE **/
                    return imsProgramRepoTable.getProgramsByName(sysplexId, imsplexName, imsSystemName, programs, this.om);
                }
            }
            
            
         
            /** Case: No discovery has been run, continue to operate without the cache (live mode) **/
            //Query pgms for show all and status
            Type2Command type2Command = new Type2Command();
            type2Command.setVerb(Type2Command.VerbOptions.QUERY);
            type2Command.setResource(Type2Command.ResourceOptions.PGM);
            type2Command.getRoute().addAll(Arrays.asList(imsSystemName));

            QueryPgm queryPgm = new QueryPgm();
            queryPgm.getNAME().addAll(Arrays.asList(programs));
            queryPgm.getSHOW().add(QueryPgm.ShowOptions.DEFN);
            queryPgm.getSHOW().add(QueryPgm.ShowOptions.GLOBAL);
            queryPgm.getSHOW().add(QueryPgm.ShowOptions.IMSID);

            type2Command.setQueryPgm(queryPgm);

            Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
            String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

            Service service = new Service(this.om, this.version);
            omResultSet = service.executeCommand(methodKey, cmd);

            return propertiesToCollection(omResultSet);

        } catch (OmDatastoreException e) {
            e.setImsplexName(this.om.getOMConnection().getImsplex());
            throw e;
        } catch (DatastoreException e) {
            throw convertDatatstoreException(e, sysplexId, imsplexName);
        } catch (OmCommandGenerationException e) {
            throw new OmRuntimeException(e);
        } finally {
            if (logger.isDebugEnabled())
                logger.debug("<< getProgramsByNameWithRepoInfo(" + Arrays.toString(programs) + "," + Arrays.toString(imsSystemName) + ")");
            this.setOmInteractionContext(omResultSet, resourceCacheSize, date, imsAttributes, methodKey);

            // This is specifically for REPO implementation
            // In repo implementation we never go live for Status, so the message Context is not set.
            //So we are explicitly setting it
            if (!this.om.isInteractionModeLive()) {
                if (omResultSet == null)
                    omResultSet = new OmResultSet();
                this.om.addOmMessageContext(methodKey, omResultSet.getOmMessageContext());
            }
        }
    }
	// ************************************************************************************************************
	// * Get Programs by Name
	// ************************************************************************************************************
	@Override
	public Collection<Program> getProgramsByName(String[] programs) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getProgramsByName("+Arrays.toString(programs)+")");
		
		try{
			return getProgramsByName(programs,new String[]{ImsCommandAttributes.ASTERISK});
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getProgramsByName("+Arrays.toString(programs)+")");
		}
	}

	@Override
	public Collection<Program> getProgramsByName(String[] programs,String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getProgramsByName("+Arrays.toString(programs)+ ","+ Arrays.toString(imsSystemName)+")");
	
		int resourceCacheSize = 0;
		Date date = null;
		ArrayList<String> imsAttributes = null;
		
		String methodKey =  "getProgramsByName";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
		
		try {
			imsSystemName = this.routeMemberFormater(imsSystemName);

			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);
			
			/** Case: If it is not live then enter this block otherwise drop down to the live code **/
			if(!this.om.isInteractionModeLive()){

				ImsProgramTable imsProgramTable = ImsOmDatastore.getInstance().getImsProgramStore();

				//Size greater than 0 then programs have been discovered
				resourceCacheSize = imsProgramTable.getCountFromMemoryCache(this.sysplexId, this.imsplexName,imsSystemName);
				
				if( resourceCacheSize > 0){
			        //Set the date the discovery was done
					date = imsProgramTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemName);
					
					//Set the imsattributes that are in the memcache
					imsAttributes = ImsOmDatastore.getInstance().getGridHeaderTable().getGridHeadersMemCache(version.toString(), methodKey);
					
			        /** Case: interaction mode is DEFAULT **/
			        return imsProgramTable.getProgramsByName(this.sysplexId, this.imsplexName, imsSystemName, programs, this.om);
				}
			}

			/** Case: No discovery has been run, continue to operate without the cache (live mode)**/
			Type2Command type2Command = new Type2Command(); 
			type2Command.setVerb(Type2Command.VerbOptions.QUERY); 
			type2Command.setResource(Type2Command.ResourceOptions.PGM);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));

			QueryPgm queryPgm = new QueryPgm();
			queryPgm.getNAME().addAll(Arrays.asList(programs));
			queryPgm.getSHOW().add(QueryPgm.ShowOptions.ALL);

			type2Command.setQueryPgm(queryPgm);

			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			//Convert the omResponse to a collection to be returned
			return propertiesToCollection(omResultSet);

		} catch (OmDatastoreException e) {
			e.setImsplexName(this.om.getOMConnection().getImsplex());
			throw e;
		} catch (DatastoreException e){
			throw convertDatatstoreException(e, this.sysplexId, this.imsplexName);
		} catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getProgramsByName("+Arrays.toString(programs)+ ","+ Arrays.toString(imsSystemName)+")");
		
			this.setOmInteractionContext(omResultSet,resourceCacheSize, date, imsAttributes, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get Programs by Status
	// ************************************************************************************************************
	@Override
	public Collection<Program> getProgramsByStatus(QueryPgm.StatusOptions[] queryPgmStatuses) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getProgramsByStatus("+Arrays.toString(queryPgmStatuses)+")");
		
		try{
			return getProgramsByStatus(queryPgmStatuses,new String[]{ImsCommandAttributes.ASTERISK});
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getProgramsByStatus("+Arrays.toString(queryPgmStatuses)+")");
		}
	}

	@Override
	public Collection<Program> getProgramsByStatus(QueryPgm.StatusOptions[] queryPgmStatuses,String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getProgramsByStatus("+Arrays.toString(queryPgmStatuses)+ ", " + Arrays.toString(imsSystemName)+")");

		String methodKey =  "getProgramsByStatus";
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
		
		try{
			imsSystemName = this.routeMemberFormater(imsSystemName);

			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);
			
			Type2Command type2Command = new Type2Command(); 
			type2Command.setVerb(Type2Command.VerbOptions.QUERY); 
			type2Command.setResource(Type2Command.ResourceOptions.PGM);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));

			QueryPgm queryPgm = new QueryPgm();
			queryPgm.getSTATUS().addAll(Arrays.asList(queryPgmStatuses));
			queryPgm.getSHOW().add(QueryPgm.ShowOptions.ALL);

			type2Command.setQueryPgm(queryPgm);

			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);
			
			return propertiesToCollection(omResultSet);

		} catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getProgramsByStatus("+Arrays.toString(queryPgmStatuses)+ ", " + Arrays.toString(imsSystemName)+")");
			
			this.setOmInteractionContext(omResultSet, methodKey);
		}
		
	}

	// ************************************************************************************************************
	// * Get related databases for programs
	// ************************************************************************************************************

	@Override
	public Collection<Program> getProgramDatabases() throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getProgramDatabases()");
		
		try{
			return getProgramDatabases(new String[]{ImsCommandAttributes.ASTERISK},new String[]{ImsCommandAttributes.ASTERISK});
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getProgramDatabases()");
		}
	}

	@Override
	public Collection<Program> getProgramDatabases(String[] programs) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getProgramDatabases("+Arrays.toString(programs)+ ")");
		
		try{
			return getProgramDatabases(programs,new String[]{ImsCommandAttributes.ASTERISK});
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getProgramDatabases("+Arrays.toString(programs)+ ")");
		}
	}

	@Override
	public Collection<Program> getProgramDatabases(String[] programs,String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getProgramDatabases("+Arrays.toString(programs)+ ", " + Arrays.toString(imsSystemName)+")");

		String methodKey =  "getProgramDatabases";
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
				
		try {
			
			imsSystemName = this.routeMemberFormater(imsSystemName);

			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);
			
			Type2Command type2Command = new Type2Command();
			type2Command.setVerb(Type2Command.VerbOptions.QUERY);
			type2Command.setResource(Type2Command.ResourceOptions.PGM);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));

			QueryPgm queryPgm = new QueryPgm();
			queryPgm.getSHOW().add(QueryPgm.ShowOptions.DB);
			queryPgm.getNAME().addAll(Arrays.asList(programs));
			type2Command.setQueryPgm(queryPgm);

			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		} catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getProgramDatabases("+Arrays.toString(programs)+ ", " + Arrays.toString(imsSystemName)+")");
		
			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}
	
	@Override
	public Collection<Program> getProgramsForDatabase(Database database, String[] imsSystemName) throws OmDatastoreException, OmException, OmConnectionException{
		if(logger.isDebugEnabled()) logger.debug(">> getProgramsForDatabase("+database+ ", " + Arrays.toString(imsSystemName)+")");
		
		String methodKey = "getProgramsForDatabase";
		Collection<Program> programs = new ArrayList<Program>();
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = new OmResultSet();
		
		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);
			
			String dbName = database.getProperty(DatabaseResponseAttribute.DB);

			Collection<Database> databases = om.getDatabaseService().getDatabasePrograms(new String[]{dbName}, imsSystemName);

            ArrayList<String> databasenames = new ArrayList<String>();
            for (Database aDb : databases) {
                if (!aDb.getProperty(DatabaseResponseAttribute.PGM).trim().isEmpty()) {
                    databasenames.add(aDb.getProperty(DatabaseResponseAttribute.PGM).trim());
                }
            }

            String[] databaseNamesArray = databasenames.toArray(new String[databasenames.size()]);
            
          
            programs = om.getProgramService().getProgramsByName(databaseNamesArray, imsSystemName);
            
            //Extract the ominteractionContext for the called service so we can get its omInteractionContext which contains the column headers
			ArrayList<String> imsAttributes = om.getOmInteractionContexts().get("getProgramsByStatus").getResourceAttributes();
			
			//Add the column headers to the omInteractionContext
			omResultSet.getOmInteractionContext().setResourceAttributes(imsAttributes);
             
			return programs;
		}finally{
			if(logger.isDebugEnabled()) {
				if(logger.isDebugEnabled()) logger.debug("<< getProgramsForDatabase("+database+ ", " + Arrays.toString(imsSystemName)+")");
			}
			
			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}
	
	@Override
	public Collection<Program> getProgramsForDatabase(String databaseName, String[] imsSystemName) throws OmDatastoreException, OmException, OmConnectionException{
		if(logger.isDebugEnabled()) logger.debug(">> getProgramsForDatabase("+databaseName+ ", " + Arrays.toString(imsSystemName)+")");
		
		String methodKey = "getProgramsForDatabase";
		Collection<Program> programs = new ArrayList<Program>();
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = new OmResultSet();
		
		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);
			
			//String dbName = database.getProperty(DatabaseResponseAttribute.DB);

			Collection<Database> databases = om.getDatabaseService().getDatabasePrograms(new String[]{databaseName}, imsSystemName);

            ArrayList<String> databasenames = new ArrayList<String>();
            for (Database aDb : databases) {
                if (!aDb.getProperty(DatabaseResponseAttribute.PGM).trim().isEmpty()) {
                    databasenames.add(aDb.getProperty(DatabaseResponseAttribute.PGM).trim());
                }
            }

            String[] databaseNamesArray = databasenames.toArray(new String[databasenames.size()]);
            
          
            programs = om.getProgramService().getProgramsByName(databaseNamesArray, imsSystemName);
            
            //Extract the ominteractionContext for the called service so we can get its omInteractionContext which contains the column headers
			ArrayList<String> imsAttributes = om.getOmInteractionContexts().get("getProgramsByStatus").getResourceAttributes();
			
			//Add the column headers to the omInteractionContext
			omResultSet.getOmInteractionContext().setResourceAttributes(imsAttributes);
             
			return programs;
		}finally{
			if(logger.isDebugEnabled()) {
				if(logger.isDebugEnabled()) logger.debug("<< getProgramsForDatabase("+databaseName+ ", " + Arrays.toString(imsSystemName)+")");
			}
			
			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get related transactions for programs
	// ************************************************************************************************************

	@Override
	public Collection<Program> getProgramTransactions() throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getProgramTransactions()");
		
		try{
			return getProgramTransactions(new String[]{ImsCommandAttributes.ASTERISK},new String[]{ImsCommandAttributes.ASTERISK});
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getProgramTransactions()");
		}
	}

	@Override
	public Collection<Program> getProgramTransactions(String[] programs) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getProgramTransactions("+Arrays.toString(programs)+")");
		
		try{
			return getProgramTransactions(programs,new String[]{ImsCommandAttributes.ASTERISK});
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getProgramTransactions("+Arrays.toString(programs)+")");
		}
	}
	
	@Override
	public Program getProgramForTransaction(Transaction transaction, String [] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException{
		if(logger.isDebugEnabled()) logger.debug(">> getProgramForTransaction("+transaction+ ", "+ Arrays.toString(imsSystemName)+")");
		
		try {
			Program program = new Program();
			imsSystemName = this.routeMemberFormater(imsSystemName);
			
			String psbName = transaction.getProperty(TransactionResponseAttribute.PSB).trim();
			
			if(psbName != null){
				String[] psbNameArr = new String[]{psbName};
				program = this.getProgramsByName(psbNameArr,imsSystemName).iterator().next();
			}
		
			return program;
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getProgramForTransaction("+transaction+ ", "+ Arrays.toString(imsSystemName)+")");
		}
	}
	
	@Override
	public Program getProgramForRoutingcode(RoutingCode routingCode, String [] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException{
		if(logger.isDebugEnabled()) logger.debug(">> getProgramForRoutingcode("+routingCode+ ", "+ Arrays.toString(imsSystemName)+")");
		
		try {
			Program program = new Program();
			imsSystemName = this.routeMemberFormater(imsSystemName);
			
			String psbName = routingCode.getProperty(RtcResponseAttribute.PGM).trim();
			
			if(psbName != null){
				String[] psbNameArr = new String[]{psbName};
				program = this.getProgramsByName(psbNameArr,imsSystemName).iterator().next();
			}
		
			return program;
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getProgramForRoutingcode("+routingCode+ ", "+ Arrays.toString(imsSystemName)+")");
		}
	}

	@Override ////getProgramForTransaction
	public Collection<Program> getProgramTransactions(String[] programs,String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getProgramTransactions("+Arrays.toString(programs)+ ", "+ Arrays.toString(imsSystemName)+")");
		
		String methodKey =  "getProgramTransactions";
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
		
		try {
			imsSystemName = this.routeMemberFormater(imsSystemName);

			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);
			
			Type2Command type2Command = new Type2Command();
			type2Command.setVerb(Type2Command.VerbOptions.QUERY);
			type2Command.setResource(Type2Command.ResourceOptions.PGM);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));

			QueryPgm queryPgm = new QueryPgm();
			queryPgm.getSHOW().add(QueryPgm.ShowOptions.TRAN);
			queryPgm.getNAME().addAll(Arrays.asList(programs));
			type2Command.setQueryPgm(queryPgm);

			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		} catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getProgramTransactions("+Arrays.toString(programs)+ ", "+ Arrays.toString(imsSystemName)+")");
		
			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Start a program
	// ************************************************************************************************************

	@Override
	public Collection<Program> startPrograms(String[] programs,_PGM_START[] values, String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> startPrograms("+Arrays.toString(programs)+ ", "+Arrays.toString(values)+ ", " + Arrays.toString(imsSystemName)+")");

		String methodKey =  "startPrograms";
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
				
		//Create a instance of the command builder
		PgmUpdateCommandBuilder programCommandBuilder = new PgmUpdateCommandBuilder();

		//Instruct the command builder to create a custom command or you can use one of the predefined ones.
		programCommandBuilder.setName(programs);
		programCommandBuilder.setStart(values);
		programCommandBuilder.setRoute(imsSystemName);
		String cmd = programCommandBuilder.getCommand();

		Service service = new Service(this.om, this.version);
		omResultSet = service.executeCommand(methodKey,cmd);

		//TransactionResponse collection mapped from OmResultSet
		Collection<Program> programResults = new ArrayList<Program>();

		java.util.Properties[] propsObj = omResultSet.getResponseProperties();
		if(propsObj != null){ //If an error occurs for all members this could be null
			Program pgmMember = null;
			int propertiesLength = propsObj.length;

			for (int i = 0; i < propertiesLength; i++) {
				pgmMember = new Program((Map) propsObj[i]);
				programResults.add(pgmMember);
			}
		}

		if(logger.isDebugEnabled()) logger.debug("<< startPrograms("+Arrays.toString(programs)+ ", "+Arrays.toString(values)+ ", " + Arrays.toString(imsSystemName)+")");
		return programResults;
	}

	// ************************************************************************************************************
	// * Stop a program
	// ************************************************************************************************************

	@Override
	public Collection<Program> stopPrograms(String[] programs, _PGM_STOP[] values,String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> stopPrograms("+Arrays.toString(programs)+ ", "+Arrays.toString(values)+ ", " + Arrays.toString(imsSystemName)+")");

		String methodKey =  "stopPrograms";
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
		
		try {
			//Create a instance of the command builder
			PgmUpdateCommandBuilder programCommandBuilder = new PgmUpdateCommandBuilder();

			//Instruct the command builder to create a custom command or you can use one of the predefined ones.
			programCommandBuilder.setName(programs);
			programCommandBuilder.setStop(values);
			programCommandBuilder.setRoute(imsSystemName);
			String cmd = programCommandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			//TransactionResponse collection mapped from OmResultSet
			Collection<Program> programResults = new ArrayList<Program>();

			java.util.Properties[] propsObj = omResultSet.getResponseProperties();
			if(propsObj != null){ //If an error occurs for all members this could be null
				Program pgmMember = null;
				int propertiesLength = propsObj.length;

				for (int i = 0; i < propertiesLength; i++) {
					pgmMember = new Program((Map) propsObj[i]);
					programResults.add(pgmMember);
				}
			}

			if(logger.isDebugEnabled()) logger.debug("<< stopPrograms("+Arrays.toString(programs)+ ", "+Arrays.toString(values)+ ", " + Arrays.toString(imsSystemName)+")");
			return programResults;
		} catch (OmException e) {
			throw e;
		} catch (OmConnectionException e) {
			if(e.getConnectionType().isEmpty() ){
				e.setConnectionType(om.getOMConnection().getConnectionType());
			}
			if(e.getEnvironmentId() == -1 ){
				e.setEnvironmentId(om.getOMConnection().getEnvironment());
			}
			if(e.getImsplexName().isEmpty()){
				e.setImsplexName(om.getOMConnection().getImsplex());
			}
			throw e;
		}
	}

	// ************************************************************************************************************
	// * Discover members
	// ************************************************************************************************************

	@Override
	public int discoverPrograms() throws OmDatastoreException, OmException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> discoverPrograms()");
		
		try{
			Collection<Imsplex> plexResources = om.getImsplexService().getImsResources();
			int insertionSize = 0;
	
			for (Imsplex plexMemberResource : plexResources) {
				String imsMbrName = plexMemberResource.getProperty(ImsplexResponseAttribute.IMSMBR);
				insertionSize += this.discoverPrograms(imsMbrName);
			}
	
			return insertionSize;
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< discoverPrograms()");
		}
	}

	@Override
	public int discoverPrograms(String imsSystemName) throws OmDatastoreException, OmException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> discoverPrograms("+imsSystemName+")");
		
		int insertionSize 	= 0;

		try {
			this.isDiscovering = true;
			this.om.setInteractionMode(Om.InteractionMode.LIVE);
			Collection<Program> programs = this.getPrograms(new String[]{imsSystemName});
			this.om.setInteractionMode(Om.InteractionMode.DEFAULT);

			ImsProgramTable imsProgramTable = ImsOmDatastore.getInstance().getImsProgramStore();

			imsProgramTable.deleteTable(this.sysplexId,this.imsplexName,imsSystemName);

			insertionSize = imsProgramTable.addImsProgram(programs, this.sysplexId, this.imsplexName);

			imsProgramTable.autoConfigureResourceMetaData(this.sysplexId, this.imsplexName, imsSystemName);

			//Since the discovery was run in live mode we need to add to the omInteractionContext the size and date
			String [] imsSystemNameArray = new String[]{imsSystemName};
			int resourceCacheSize = imsProgramTable.getCountFromMemoryCache(sysplexId, imsplexName,imsSystemNameArray);
			Date date = imsProgramTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemNameArray);
				
			OmInteractionContext omInteractionContext = this.om.getOmInteractionContexts().get("getPrograms");
			omInteractionContext.setResourceLastUpdated(date);
			omInteractionContext.setResourceCacheSize(resourceCacheSize);
			
			return insertionSize;
		} catch (OmDatastoreException e) {
			e.setImsplexName(this.om.getOMConnection().getImsplex());
			throw e;
		} catch (DatastoreException e) {
			throw convertDatatstoreException(e, this.sysplexId, this.imsplexName);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< discoverPrograms("+imsSystemName+")");
		}
	}
	
	@Override
	public int discoverProgramsWithRepoInfo() throws OmDatastoreException, OmException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> discoverProgramsWithRepoInfo()");
		
		try{
			int insertionSize = 0;
			//Getting collection from Ims Service on which has repo
			Collection<Ims> membersWithRepo = om.getImsService().getRepoInfo(new String[]{"*"});
			
			if(!membersWithRepo.isEmpty()){
				
				//Getting an IMS member name from the collection
				String routeMember = membersWithRepo.iterator().next().getProperty(ImsResponseAttribute.MBR);
				
				//Inserting Condition if the IMS resource has Repo= true.Only then try to discover it
				insertionSize += this.discoverProgramsWithRepoInfo(routeMember);

			}
			return insertionSize;
			
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< discoverProgramsWithRepoInfo()");
		}
	}

	@Override
	public int discoverProgramsWithRepoInfo(String imsSystemName) throws OmDatastoreException, OmException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> discoverProgramsWithRepoInfo("+imsSystemName+")");
		int insertionSize 	= 0;

		try {
			this.isDiscovering = true;
			this.om.setInteractionMode(Om.InteractionMode.LIVE);
			Collection<Program> programs = this.getProgramsWithRepoInfo(new String[]{imsSystemName});
			this.om.setInteractionMode(Om.InteractionMode.DEFAULT);

			ImsProgramRepoTable imsProgramRepoTable = ImsOmDatastore.getInstance().getImsProgramRepoStore();
			imsProgramRepoTable.deleteTable(this.sysplexId,this.imsplexName,imsSystemName);
			insertionSize = imsProgramRepoTable.addImsProgram(programs, this.sysplexId, this.imsplexName);
			imsProgramRepoTable.autoConfigureResourceMetaData(this.sysplexId, this.imsplexName, imsSystemName);
			
			//Since the discovery was run in live mode we need to add to the omInteractionContext the size and date
			String [] imsSystemNameArray = new String[]{imsSystemName};
			int resourceCacheSize = imsProgramRepoTable.getCountFromMemoryCache(sysplexId, imsplexName,imsSystemNameArray);
			Date date = imsProgramRepoTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemNameArray);
				
			OmInteractionContext omInteractionContext = this.om.getOmInteractionContexts().get("getProgramsWithRepoInfo");
			omInteractionContext.setResourceLastUpdated(date);
			omInteractionContext.setResourceCacheSize(resourceCacheSize);
			
		} catch (OmDatastoreException e) {
			e.setImsplexName(this.om.getOMConnection().getImsplex());
			throw e;
		} catch (DatastoreException e) {
			throw convertDatatstoreException(e, sysplexId,  imsplexName);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< discoverProgramsWithRepoInfo("+imsSystemName+")");
		}

		return insertionSize;
	}
	// ************************************************************************************************************
	// * PRIVATE MEMBER HELPERS
	// ************************************************************************************************************
 	/**
	 * Method will map a omResulset to a collection of program beans. It will also
	 * append to each bean the sysplex and imsplex name. 
	 * @param omResultSet
	 * @return
	 */
    private Collection<Program> propertiesToCollection(OmResultSet omResultSet) {
        Collection<Program> tempList = new ArrayList<Program>();

            Properties[] properties = omResultSet.getResponseProperties();

            for (Properties p : properties) {
            	Program program = new Program();
            	program.setMap((Map)p);
            	program.getMap().put(ImsBaseDastoreConstants.SYSPLEX_ID, omResultSet.getEnvironment());
            	program.getMap().put(ImsBaseDastoreConstants.IMSPLX, omResultSet.getImsplex());
                tempList.add(program);
            }

        return tempList;
    }
}
