/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.db.query;

import com.ibm.ims.ea.om.db.Database.STATUS;


public interface DbQueryCommand{
	
	/**
	 * A set of values for SHOW
	 *
	 */
    public enum SHOW_1 {
        ACCTYPE,
        ALL,
        DEFN,
        DEFNTYPE,
        GLOBAL,
        IMSID,
        LOCAL,
        MODEL,
        RESIDENT,
        STATUS,
        TIMESTAMP;
    }
    
    /**
     * Other set of values for SHOW
     *
     */
    public enum SHOW_2 {
        PGM,
        SNDX,
        WORK;
    }
    
//    /**
//     * Status values
//     *
//     */
//    public enum STATUS {
//        ALLOCF,
//        ALLOCS,
//        BACKOUT,
//        EEQE,
//        LOCK,
//        NONE,
//        NOTINIT,
//        NOTOPEN,
//        OFR,
//        OLR,
//        OPEN,
//        QUIESCED,
//        QUIESCING,
//        RECALL,
//        RECOV,
//        RNL,
//        STOACC,
//        STOSCHD,
//        STOUPDS,
//       // STA;
//    }
    
    /**
     * Type values
     * @author th365thli
     *
     */
    public enum TYPE {
        DEDB,
        DHISNDX,
        DLI,
        MSDB,
        PART,
        PHDAM,
        PHIDAM,
        PSINDEX;
    }
    
    
    /**
     * Specifies the 1-8 character name of the database. Wildcards can be specified
     * for the database name. The database name is a repeatable parameter.
     * @param values String
     */
    public void setName(String[] values);
    
    /**
     * Method will return the type-2 to command as a string. The string command returned will vary
     * depending on the arguments and options selected. 
     * @see {@link DbQueryCommand}
     * @return String
     * @throws Exception
     */
    public String getCommand();
    
    /**
     * Specifies the database output fields to be returned. Options for this are 
     * of type {@link SHOW_1}. Note that setShow can be set with a choice from SHOW_1
     * or SHOW_2 but one a type from both. 
     * @param values {@link SHOW_1}
     * @see {@link SHOW_1}
     */
    public void setShow(SHOW_1[] values);    
    
    /**
     * Specifies the database output fields to be returned. Options for this are 
     * of type {@link SHOW_2}. Only one option from the SHOW_2 is permitted.
     * Note that setShow can be set with a choice from SHOW_1
     * or SHOW_2 but one a type from both. 
     * @param values {@link SHOW_2}
     * @see {@link SHOW_2}
     */
    public void setShow(SHOW_2[] values);
    
    /**
     * Selects databases for display that match the NAME parameter and possess 
     * at least one of the specified database {@link STATUS}
     * @param values {@link STATUS}
     */
    public void setStatus(STATUS[] values);
    
    /**
     * Selects databases for display that match the NAME parameter and 
     * specific {@link TYPE} filter.
     * @param values {@link TYPE}
     */
    public void setType(TYPE[] values);

    /**
     * Sets IMSPlex 
     * @param imsName
     */
	public void setRoute(String[] imsName);
    
}
