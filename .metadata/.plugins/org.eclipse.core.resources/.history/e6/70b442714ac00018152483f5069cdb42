/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2015 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/
package com.ibm.ims.ea.om.datastore;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ibm.im.ac.datastore.Datastore;
import com.ibm.im.ac.datastore.DatastoreException;
import com.ibm.im.ac.datastore.impl.SysplexTable;
import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.common.services.Om;
import com.ibm.ims.ea.om.ims.Ims;
import com.ibm.ims.ea.om.ims.Ims.ImsResponseAttribute;

/**
 * <pre>
 * Table storing information about IMSES. 
 * This table is a cache for all the IMS Members and some additional fields used by the caller.
 *
 * 
 * IMS_ID     INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY
 * AUTEXP     VARCHAR(255)
 * BMP        VARCHAR(255)
 * BMPOPT     VARCHAR(255)
 * CC         VARCHAR(255)
 * CCTXT      VARCHAR(255)
 * FP64STAT   VARCHAR(255)
 * GSTSAREA   VARCHAR(255)
 * GSTSDB     VARCHAR(255)
 * GSTSTRAN   VARCHAR(255)
 * LEXPTM     VARCHAR(255)
 * MBR        VARCHAR(255)
 * MSG        VARCHAR(255)
 * MSGOPT     VARCHAR(255)
 * REPONM     VARCHAR(255)
 * REPOTP     VARCHAR(255)
 * TGN        VARCHAR(255)
 * VGN        VARCHAR(255) 
 * PRIMARY KEY 	(IMS_ID)	
 * FOREIGN KEY 	(SYSPLEX_ID) REFERENCES SYSPLEX(SYSPLEX_ID) ON DELETE SET NULL)
 * 
 * IMS_ID AUTEXP BMP BMPOPT CC CCTXT FP64STAT GSTSAREA GSTSDB GSTSTRAN LEXPTM MBR  MSG MSGOPT REPONM            REPOTP TGN  VGN  SYSPLEX_ID IMSPLX   UPDATED
 ------ ------ --- ------ -- ----- -------- -------- ------ -------- ------ ---- --- ------ ----------------- ------ ---- ---- ---------- -------- -----------------------
      1 N      N/A ABEND  0  NULL  N        N        N      N               IMS1 N/A ABEND  IMSRSC_REPOSITORY IMSRSC NULL NULL          1 CSLPLEX1 2015-01-30 12:45:32.897
      2 N      N/A ABEND  0  NULL  N        N        N      N               IMS2 N/A ABEND  IMSRSC_REPOSITORY IMSRSC NULL NULL          1 CSLPLEX1 2015-01-30 12:45:39.231
      3 N      N/A ABEND  0  NULL  N        N        N      N        NULL   IMS3 N/A ABEND  NULL              NULL   NULL NULL          1 CSLPLEX2 2015-01-30 12:45:50.102

 * @author ddgandhi
 *</pre>
 */
public class OmImsTable extends AbstractImsBaseDatastore { //implements OmImsStore 
    final static Logger logger = LoggerFactory.getLogger(OmImsTable.class);
   
	public static final String   TABLE_NAME          = "IMS";
    private static final String  VERSION             = "1.0";
    public static final String   SYSPLEX_ID          = "SYSPLEX_ID";
    public static final String 	 IMSPLX              = "IMSPLX";
	public static final String   IMS_ID      		 = "IMS_ID";
	public static final String 	 UPDATED			 = "UPDATED";
	
	private static String IMSPLEX_TABLE_NAME = ImsOmDatastore.getDatastorePrefix()+"_"+OmImsplexTable.TABLE_NAME;
	private static final String  SYSPLEX_TABLE_NAME  = SysplexTable.TABLE_NAME;
	private static final String INDEX_NAME = "INDEX_IMS_MBR_SYSPLEX_IMSPLEX";

	public OmImsTable(Datastore parentDatastore) throws DatastoreException {
 		super(parentDatastore, TABLE_NAME, VERSION, ImsResponseAttribute.MBR.toString()); // MBR is MbrName(e.g.OM1OM)
	}

	@Override
	public void createTables() throws OmDatastoreException {
		StringBuffer createSQL = new StringBuffer("CREATE TABLE ").append(this.tableName).append(" (")	
				.append(IMS_ID).append(" INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY, ") 	
				.append(ImsResponseAttribute.AUTEXP).append(" VARCHAR(255) NOT NULL, ")	 									
				.append(ImsResponseAttribute.BMP).append(" VARCHAR(255), ") 											
				.append(ImsResponseAttribute.BMPOPT).append(" VARCHAR(255), ") 	
				.append(ImsResponseAttribute.CC).append( " VARCHAR(255), ")	
				.append(ImsResponseAttribute.CCTXT).append(" VARCHAR(255), ")									
				.append(ImsResponseAttribute.FP64STAT).append(" VARCHAR(255), ")									
				.append(ImsResponseAttribute.GSTSAREA).append(" VARCHAR(255), ")	
				.append(ImsResponseAttribute.GSTSDB).append(" VARCHAR(255), ")									
				.append(ImsResponseAttribute.GSTSTRAN).append(" VARCHAR(255), ")																		
                .append(ImsResponseAttribute.LEXPTM).append(" VARCHAR(255), ")
				.append(ImsResponseAttribute.MBR).append(" VARCHAR(255), ")		
				.append(ImsResponseAttribute.MSG).append(" VARCHAR(255), ")	
				.append(ImsResponseAttribute.MSGOPT).append(" VARCHAR(255), ")	
				.append(ImsResponseAttribute.REPONM).append(" VARCHAR(255), ")
				.append(ImsResponseAttribute.REPOTP).append(" VARCHAR(255), ")	
				.append(ImsResponseAttribute.TGN).append(" VARCHAR(255), ")
				.append(ImsResponseAttribute.VGN).append(" VARCHAR(255), ")
				.append(SYSPLEX_ID).append(" INTEGER, ")
				.append(IMSPLX).append(" VARCHAR(255) NOT NULL, ")
				.append(UPDATED).append(" TIMESTAMP DEFAULT CURRENT_TIMESTAMP, ")
				.append(" PRIMARY KEY (" ).append(IMS_ID).append("), ")
				.append(" FOREIGN KEY (").append(SYSPLEX_ID).append(") REFERENCES ").append(SYSPLEX_TABLE_NAME).append("(").append(SYSPLEX_ID).append(") ON DELETE SET NULL) ");

		StringBuffer index = new StringBuffer("CREATE INDEX ").append(INDEX_NAME).append(" ON ").append(this.tableName)
				.append(" (").append(ImsResponseAttribute.MBR).append(",")
				.append(IMSPLX).append(",")
				.append(SYSPLEX_ID) 
				.append(")");
		try{
			execute(createSQL.toString());
		} catch(DatastoreException e) {
			OmDatastoreException omDatastoreException = new OmDatastoreException(e);
			omDatastoreException.setQuery("DROP TABLE " + this.tableName);
			throw omDatastoreException;
		}
		
		try {
            execute(index.toString());
		} catch (DatastoreException e) {
            OmDatastoreException omDatastoreException = new OmDatastoreException(e);
            omDatastoreException.setQuery(index.toString());
            throw omDatastoreException;
      }
	}

//*******************************************************************************************
// Add IMS functions
//*******************************************************************************************
	/**
	 * Add a single Ims to the derby table.
	 * @param ims
	 * @param sysplexId
	 * @param imsplexName
	 * @return
	 * @throws OmDatastoreException
	 */
	public int addIms(Ims ims,int sysplexId, String imsplexName)  throws OmDatastoreException{
		Collection<Ims> imses = new ArrayList<Ims>(1);
		imses.add(ims);
		return addIms(imses, sysplexId, imsplexName);
	}

	/**
	 * Add IMSes to the derby cache table using a collection of ims's {@link Ims}.
	 * @param imss
	 * @param sysplexId
	 * @param imsplexName
	 * @return
	 * @throws OmDatastoreException
	 */
	public int addIms(Collection<Ims> imss, int sysplexId, String imsplexName) throws OmDatastoreException {
		Connection connection = null;
		PreparedStatement ps = null;
		int insertionSize=0;
		
		StringBuffer sb = new StringBuffer("INSERT INTO ")
		.append(this.tableName)
		.append(" ("+ ImsResponseAttribute.AUTEXP+","+ ImsResponseAttribute.BMP+","+  
		ImsResponseAttribute.BMPOPT+","+ ImsResponseAttribute.CC+","+ImsResponseAttribute.CCTXT+","+  
		ImsResponseAttribute.FP64STAT+","+ ImsResponseAttribute.GSTSAREA+","+ ImsResponseAttribute.GSTSDB+","+ 
		ImsResponseAttribute.GSTSTRAN+","+ ImsResponseAttribute.LEXPTM+","+ ImsResponseAttribute.MBR+","+ 
		ImsResponseAttribute.MSG+","+ ImsResponseAttribute.MSGOPT+","+ ImsResponseAttribute.REPONM+","+ 
		ImsResponseAttribute.REPOTP+","+ ImsResponseAttribute.TGN+","+ ImsResponseAttribute.VGN+","+ SYSPLEX_ID+","+ IMSPLX +")").
		append(" VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
		
		try{
			int i = 0;
			connection = parentDatastore.getConnection();
			connection.setAutoCommit(false);
			ps = connection.prepareStatement(sb.toString(), Statement.RETURN_GENERATED_KEYS);

			for(Ims ims: imss) {
				ps.setString(1, ims.getProperty(ImsResponseAttribute.AUTEXP));
				ps.setString(2, ims.getProperty(ImsResponseAttribute.BMP));
				ps.setString(3, ims.getProperty(ImsResponseAttribute.BMPOPT));
				ps.setString(4, ims.getProperty(ImsResponseAttribute.CC));
				ps.setString(5, ims.getProperty(ImsResponseAttribute.CCTXT));
				ps.setString(6, ims.getProperty(ImsResponseAttribute.FP64STAT));
				ps.setString(7, ims.getProperty(ImsResponseAttribute.GSTSAREA));
				ps.setString(8, ims.getProperty(ImsResponseAttribute.GSTSDB));
				ps.setString(9, ims.getProperty(ImsResponseAttribute.GSTSTRAN));
				ps.setString(10, ims.getProperty(ImsResponseAttribute.LEXPTM));
				ps.setString(11, ims.getProperty(ImsResponseAttribute.MBR));
				ps.setString(12, ims.getProperty(ImsResponseAttribute.MSG));
				ps.setString(13, ims.getProperty(ImsResponseAttribute.MSGOPT));
				ps.setString(14, ims.getProperty(ImsResponseAttribute.REPONM));
				ps.setString(15, ims.getProperty(ImsResponseAttribute.REPOTP));
				ps.setString(16, ims.getProperty(ImsResponseAttribute.TGN));
				ps.setString(17, ims.getProperty(ImsResponseAttribute.VGN));
				ps.setInt(18, sysplexId); 
				ps.setString(19, imsplexName);
				ps.addBatch();
				
				if((++i) % 1000 == 0) {
					insertionSize += ps.executeBatch().length;
					connection.commit();
					ps.clearBatch();
				}
			}
			 
			insertionSize += ps.executeBatch().length;
			connection.commit();
			ps.clearBatch();
		} catch(SQLException e) {
			try{
				logAndRollback(connection, e);
			} catch(DatastoreException e1) {
				OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
				omDatastoreException.setQuery(sb.toString());
				throw omDatastoreException;
			}
		} finally {
			close(ps);
			close(connection);
		}
		return insertionSize;
	}

//**************************************************************************************
// Get ims'es methods
//**************************************************************************************	

	public Collection<Ims> getIms(int sysplexId, String[] imsSystemName) throws OmDatastoreException {
		Collection<Ims> imses = new ArrayList<Ims>();
		try {
			imses = this.getIms(sysplexId, null, imsSystemName, null);
		} catch (OmConnectionException e) {
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		} catch (OmException e) {
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		}
		return imses;
	}
	
	public Collection<Ims> getIms(int sysplexId, String imsplexName, String[] imsSystemName) throws OmConnectionException, OmException, OmDatastoreException  {
		Collection<Ims> imss = new ArrayList<Ims>();
		try {
			imss = this.getIms(sysplexId, imsplexName, imsSystemName, null);
		} catch (OmConnectionException e) {
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		} catch (OmException e) {
			/** Will not be thrown because we pass null for the Om, so eat the error **/	
		}
		return imss;
	}
	
	/**
	 * Get IMS's from derby cache table.
	 * @param sysplexId
	 * @param imsplexName
	 * @param imsSystemName
	 * @param om
	 * @return
	 * @throws OmDatastoreException
	 * @throws OmException
	 * @throws OmConnectionException
	 */
	public Collection<Ims> getIms(int sysplexId, String imsplexName, String[] imsSystemName, Om om) throws OmDatastoreException, OmException, OmConnectionException {
		Connection connection = null;
		PreparedStatement ps = null;
		ResultSet results = null;
		ArrayList<Ims> imsArray = new ArrayList<Ims>();
		StringBuffer sb = null;

		try {
			connection = parentDatastore.getConnection();

			//Case: no route has been passed or the length is 0 but so we need to check if an impslexname has been passed.
			if(imsSystemName == null || imsSystemName.length == 0){
				if(imsplexName != null){
					sb = new StringBuffer("SELECT * FROM ")
					.append(this.tableName)
					.append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
					.append(" AND ").append(IMSPLX).append(" = ? ")
					.append(" ORDER BY ").append(ImsResponseAttribute.MBR);

					ps = connection.prepareStatement(sb.toString());
					ps.setInt(1, sysplexId);
					ps.setString(2, imsplexName);
				}else{
					sb = new StringBuffer("SELECT * FROM ")
					.append(this.tableName)
					.append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
					.append(" ORDER BY ").append(ImsResponseAttribute.MBR);

					ps = connection.prepareStatement(sb.toString());
					ps.setInt(1, sysplexId);
				}

				results = ps.executeQuery();

				while (results.next()) {
					Ims ims = new Ims(results);
					imsArray.add(ims);
				}

			} else { //Route has been passed and for each we route the command and concat the results
				String sqlIn =  this.sqlInGenerator(ImsResponseAttribute.MBR.toString(), imsSystemName);
				sb = new StringBuffer("SELECT * FROM ")
				.append(this.tableName)
				.append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
				.append(" AND ").append(IMSPLX).append(" = ? ")
				.append(sqlIn)
				.append(" ORDER BY ").append(ImsResponseAttribute.MBR);

				ps = connection.prepareStatement(sb.toString());
				ps.setInt(1, sysplexId);
				ps.setString(2, imsplexName);

				results = ps.executeQuery();

				while (results.next()) {
					Ims ims = new Ims(results);
					imsArray.add(ims);
				}
			}
		} catch(SQLException e) {
			try{
				logAndRollback(connection, e);
			} catch(DatastoreException e1) {
				OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
				omDatastoreException.setQuery(sb.toString());
				omDatastoreException.setEnvironmentId(sysplexId);
				throw omDatastoreException;
			}
		}finally {
			close(results);    // ResultSet
			close(ps);         // PreparedStatement
			close(connection); // Connection
		}
		return imsArray;	
	}

	
	
	
	//This is to get the Repo information from the Cache. The repo info is got from the query:
	// QRY IMS TYPE (lclparm) SHOW (Repo) which is a subset of the IMs query: QRY IMS SHOW (ALL)
	
	public Collection<Ims> getRepoInfo(int sysplexId, String imsplexName, String[] imsSystemName, Om om) throws OmDatastoreException, OmException, OmConnectionException {
		Connection connection = null;
		PreparedStatement ps = null;
		ResultSet results = null;
		ArrayList<Ims> imsArray = new ArrayList<Ims>();
		StringBuffer sb = null;

		try {
			connection = parentDatastore.getConnection();

			//Case: no route has been passed or the length is 0 but so we need to check if an impslexname has been passed.
			if(imsSystemName == null || imsSystemName.length == 0){
				if(imsplexName != null){
					sb = new StringBuffer("SELECT MBR,CC,REPOTP,REPONM FROM ")
					.append(this.tableName)
					.append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
					.append(" AND ").append(ImsResponseAttribute.REPOTP).append(" != \'NULL\'")
					.append(" AND ").append(IMSPLX).append(" = ? ")
					.append(" ORDER BY ").append(ImsResponseAttribute.MBR);

					ps = connection.prepareStatement(sb.toString());
					ps.setInt(1, sysplexId);
					ps.setString(2, imsplexName);
				}else{
					sb = new StringBuffer("SELECT MBR,CC,REPOTP,REPONM FROM ")
					.append(this.tableName)
					.append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
					.append(" AND ").append(ImsResponseAttribute.REPOTP).append(" != \'NULL\'")
					.append(" ORDER BY ").append(ImsResponseAttribute.MBR);

					ps = connection.prepareStatement(sb.toString());
					ps.setInt(1, sysplexId);
				}

				results = ps.executeQuery();

				while (results.next()) {
					Ims ims = new Ims(results);
					imsArray.add(ims);
				}

			} else { //Route has been passed and for each we route the command and concat the results
				String sqlIn =  this.sqlInGenerator(ImsResponseAttribute.MBR.toString(), imsSystemName);
				sb = new StringBuffer("SELECT MBR,CC,REPOTP,REPONM FROM ")
				.append(this.tableName)
				.append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
				.append(" AND ").append(ImsResponseAttribute.REPOTP).append(" != \'NULL\'")
				.append(" AND ").append(IMSPLX).append(" = ? ")
				.append(sqlIn)
				.append(" ORDER BY ").append(ImsResponseAttribute.MBR);

				ps = connection.prepareStatement(sb.toString());
				ps.setInt(1, sysplexId);
				ps.setString(2, imsplexName);

				results = ps.executeQuery();

				while (results.next()) {
					Ims ims = new Ims(results);
					imsArray.add(ims);
				}
			}
		} catch(SQLException e) {
			try{
				logAndRollback(connection, e);
			} catch(DatastoreException e1) {
				OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
				omDatastoreException.setQuery(sb.toString());
				omDatastoreException.setEnvironmentId(sysplexId);
				throw omDatastoreException;
			}
		}finally {
			close(results);    // ResultSet
			close(ps);         // PreparedStatement
			close(connection); // Connection
		}
		return imsArray;	
	}

}
