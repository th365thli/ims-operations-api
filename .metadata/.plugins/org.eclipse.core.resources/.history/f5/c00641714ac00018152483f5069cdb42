/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.datastore;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import com.ibm.im.ac.datastore.Datastore;
import com.ibm.im.ac.datastore.DatastoreException;
import com.ibm.im.ac.datastore.impl.SysplexTable;
import com.ibm.ims.ea.om.cmd.v14.query.db.QueryDb;
import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.common.services.Om;
import com.ibm.ims.ea.om.db.Database;
import com.ibm.ims.ea.om.db.Database.DatabaseResponseAttribute;
import com.ibm.imsbase.datastore.ImsbaseDatastore;
import com.ibm.imsbase.datastore.ImsplexBean;
import com.ibm.imsbase.datastore.ImsplexStore;
import com.ibm.ims.ea.om.rm.list.Rcn;
import com.ibm.ims.ea.om.rm.list.Rcn.RcnResponseAttribute;

public class ImsDatabaseRepoTable extends AbstractImsBaseDatastore{
    public static final String      TABLE_NAME         = "DATABASE_REPO";
    private static final String     VERSION            = "1.1";
    
    //IMS Base Properties
   // public static final String SYSPLEX_ID   = "SYSPLEX_ID";
    private static final String IMSPLX 		= "IMSPLX" ;       //Mobile Change //ImsplexTable.IMSPLEX_ID;
    public static final String 	RECON       = "RECON";
    public static final String 	DB_ID        = "RDB_ID";
    public static final String TIMESTAMP    = "TIMESTAMP";
    public static final String UPDATED      = "UPDATED";
    private static String SYSPLEX_TABLE_NAME = SysplexTable.TABLE_NAME;
    
    //private static final String UPDATE_EDIT_DATE_TRIGGER = "UPDATE_DATABASE_DATE_TRIGGER";
    private static final String INDEX_NAME = "INDEX_DB_REPO_MBR_SYSPLEX_IMSPLEX";
    
    //Transaction query and update table attributes
    protected ImsDatabaseRepoTable(Datastore parentDatastore) throws DatastoreException {
        super(parentDatastore, TABLE_NAME, VERSION,DatabaseResponseAttribute.MBR.toString());
    }

    @Override
    public void createTables() throws DatastoreException { 
        StringBuffer createSQL = new StringBuffer("CREATE TABLE ").append(this.tableName).append(" (")
                .append(DB_ID).append(" INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY, ")
                .append(DatabaseResponseAttribute.ACC).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.AREA).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.CC).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.CCTXT).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.DB).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.DFNT).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.IMSID).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.LACC).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.LRSDNT).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.LSTT).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.MBR).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.MDLN).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.MDLT).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.PART).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.PGM).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.RACC).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.REPO).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.RRSDNT).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.RSDNT).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.RTMCR).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.RTMUP).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.SNDX).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.STT).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.TMAC).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.TMCR).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.TMIM).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.TMUP).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.TYP).append(" VARCHAR(255), ")
                .append(DatabaseResponseAttribute.WRK).append(" VARCHAR(255), ")
                .append(RcnResponseAttribute.RECON_IMS_NAME).append(" VARCHAR(255), ")
                .append(RcnResponseAttribute.RECON_LEVEL).append(" VARCHAR(255), ")
                .append(RcnResponseAttribute.RECON_MIN_VERSION).append(" VARCHAR(255), ")
                .append(RcnResponseAttribute.RECON_1_DSN).append(" VARCHAR(255), ")
                .append(RcnResponseAttribute.RECON_1_NAME).append(" VARCHAR(255), ")
                .append(RcnResponseAttribute.RECON_1_STATUS).append(" VARCHAR(255), ")
                .append(RcnResponseAttribute.RECON_2_DSN).append(" VARCHAR(255), ")
                .append(RcnResponseAttribute.RECON_2_NAME).append(" VARCHAR(255), ")
                .append(RcnResponseAttribute.RECON_2_STATUS).append(" VARCHAR(255), ")
                .append(RcnResponseAttribute.RECON_3_DSN).append(" VARCHAR(255), ")
                .append(RcnResponseAttribute.RECON_3_NAME).append(" VARCHAR(255), ")
                .append(RcnResponseAttribute.RECON_3_STATUS).append(" VARCHAR(255), ")
                .append(UPDATED).append(" TIMESTAMP DEFAULT CURRENT_TIMESTAMP, ")
                .append(SYSPLEX_ID).append(" INTEGER, ")
                .append(IMSPLX).append(" VARCHAR(255) NOT NULL, ")
                .append(" FOREIGN KEY (").append(SYSPLEX_ID).append(") REFERENCES ").append(SYSPLEX_TABLE_NAME).append("(").append(SYSPLEX_ID).append(") ON DELETE SET NULL)");
    
        // Don't delete this is a problem with this trigger causing duplicates on update.
            /*StringBuffer trigger = new StringBuffer("CREATE TRIGGER ").append(UPDATE_EDIT_DATE_TRIGGER)
                .append(" AFTER UPDATE  OF LSTT ON ").append(this.tableName)
                .append(" REFERENCING OLD AS MODIFIEDROW FOR EACH  ROW ")
                .append(" UPDATE " ).append(this.tableName).append(" SET ")
                .append(this.tableName).append(".").append(UPDATED).append(" = ").append(" CURRENT_TIMESTAMP ")
                .append(" WHERE ").append(DB_ID).append(" = ").append(" MODIFIEDROW").append(".").append(DB_ID);*/
            
            //StringBuffer index = new StringBuffer("CREATE INDEX DB_MBR_SYSPLEX_IMSPLEX_INDEX ON " + this.tableName+" (" +DbId.DB+","+DbId.MBR +","+SYSPLEX_ID+","+IMSPLEX_ID+")");
            
            StringBuffer index = new StringBuffer("CREATE INDEX ").append(INDEX_NAME).append(" ON ").append(this.tableName)
                    .append(" (").append(DatabaseResponseAttribute.DB).append(",")
                    .append(DatabaseResponseAttribute.MBR).append(",")
                    .append(SYSPLEX_ID).append(",")
                    .append(IMSPLX).append(")");
            
        try {
            execute(createSQL.toString());
        } catch (DatastoreException e) {
                OmDatastoreException omDatastoreException = new OmDatastoreException(e);
                omDatastoreException.setQuery(createSQL.toString());
                throw omDatastoreException;
        }
        
        /*      try {
            execute(trigger.toString());
        } catch (DatastoreException e) {
                OmDatastoreException omDatastoreException = new OmDatastoreException(e);
                omDatastoreException.setQuery(trigger.toString());
                throw omDatastoreException;
        }*/
        
        try {
              execute(index.toString());
        } catch (DatastoreException e) {
              OmDatastoreException omDatastoreException = new OmDatastoreException(e);
              omDatastoreException.setQuery(index.toString());
              throw omDatastoreException;
        }
    }

    public int  addImsDatabase(Collection<Database> databases,int sysplexId, String imsplexName)  throws OmDatastoreException{
        Connection connection   = null;
        PreparedStatement ps    = null;
        int insertionSize=0;
        
        StringBuffer sb = new StringBuffer("INSERT INTO ").
                append(this.tableName).append(" ("+ DatabaseResponseAttribute.ACC +","+ DatabaseResponseAttribute.AREA +","+ DatabaseResponseAttribute.CC +","+ DatabaseResponseAttribute.CCTXT +","+ DatabaseResponseAttribute.DB +","+ DatabaseResponseAttribute.DFNT +","+ DatabaseResponseAttribute.IMSID +","+ DatabaseResponseAttribute.LACC +","+ DatabaseResponseAttribute.LRSDNT +","+ 
                DatabaseResponseAttribute.LSTT +","+ DatabaseResponseAttribute.MBR +","+ DatabaseResponseAttribute.MDLN +","+ DatabaseResponseAttribute.MDLT +","+   DatabaseResponseAttribute.PART +","+ DatabaseResponseAttribute.PGM +","+ DatabaseResponseAttribute.RACC +","+ DatabaseResponseAttribute.REPO +","+
                DatabaseResponseAttribute.RRSDNT +","+ DatabaseResponseAttribute.RSDNT +","+ DatabaseResponseAttribute.RTMCR +","+ DatabaseResponseAttribute.RTMUP +","+ DatabaseResponseAttribute.SNDX +","+ DatabaseResponseAttribute.STT +","+ DatabaseResponseAttribute.TMAC +","+ DatabaseResponseAttribute.TMCR +","+
                DatabaseResponseAttribute.TMIM +","+ DatabaseResponseAttribute.TMUP +","+ DatabaseResponseAttribute.TYP +","+ DatabaseResponseAttribute.WRK +","+ SYSPLEX_ID +","+ IMSPLX  +","+
                RcnResponseAttribute.RECON_IMS_NAME +","+ RcnResponseAttribute.RECON_LEVEL +","+ RcnResponseAttribute.RECON_MIN_VERSION +","+ RcnResponseAttribute.RECON_1_DSN+","+ RcnResponseAttribute.RECON_1_NAME +","+ RcnResponseAttribute.RECON_1_STATUS +","+ 
                RcnResponseAttribute.RECON_2_DSN +","+ RcnResponseAttribute.RECON_2_NAME +","+ RcnResponseAttribute.RECON_2_STATUS +","+ RcnResponseAttribute.RECON_3_DSN +","+  RcnResponseAttribute.RECON_3_NAME+","+RcnResponseAttribute.RECON_3_STATUS +")").
                append(" VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
        try {
            connection = parentDatastore.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sb.toString(),Statement.RETURN_GENERATED_KEYS);
            int i = 0;
            
            for (Database db : databases) {
                ps.setString(1, db.getProperty(DatabaseResponseAttribute.ACC));
                ps.setString(2, db.getProperty(DatabaseResponseAttribute.AREA));
                ps.setString(3, db.getProperty(DatabaseResponseAttribute.CC));
                ps.setString(4, db.getProperty(DatabaseResponseAttribute.CCTXT));
                ps.setString(5, db.getProperty(DatabaseResponseAttribute.DB));
                ps.setString(6, db.getProperty(DatabaseResponseAttribute.DFNT));
                ps.setString(7, db.getProperty(DatabaseResponseAttribute.IMSID));
                ps.setString(8, db.getProperty(DatabaseResponseAttribute.LACC));
                ps.setString(9, db.getProperty(DatabaseResponseAttribute.LRSDNT));
                ps.setString(10, db.getProperty(DatabaseResponseAttribute.LSTT));
                ps.setString(11, db.getProperty(DatabaseResponseAttribute.MBR));
                ps.setString(12, db.getProperty(DatabaseResponseAttribute.MDLN));
                ps.setString(13, db.getProperty(DatabaseResponseAttribute.MDLT));
                ps.setString(14, db.getProperty(DatabaseResponseAttribute.PART));
                ps.setString(15, db.getProperty(DatabaseResponseAttribute.PGM));
                ps.setString(16, db.getProperty(DatabaseResponseAttribute.RACC));
                ps.setString(17, db.getProperty(DatabaseResponseAttribute.REPO));
                ps.setString(18, db.getProperty(DatabaseResponseAttribute.RRSDNT));
                ps.setString(19, db.getProperty(DatabaseResponseAttribute.RSDNT));
                ps.setString(20, db.getProperty(DatabaseResponseAttribute.RTMCR));
                ps.setString(21, db.getProperty(DatabaseResponseAttribute.RTMUP));
                ps.setString(22, db.getProperty(DatabaseResponseAttribute.SNDX));
                ps.setString(23, db.getProperty(DatabaseResponseAttribute.STT));
                ps.setString(24, db.getProperty(DatabaseResponseAttribute.TMAC));
                ps.setString(25, db.getProperty(DatabaseResponseAttribute.TMCR));
                ps.setString(26, db.getProperty(DatabaseResponseAttribute.TMIM));
                ps.setString(27, db.getProperty(DatabaseResponseAttribute.TMUP));
                ps.setString(28, db.getProperty(DatabaseResponseAttribute.TYP));
                ps.setString(29, db.getProperty(DatabaseResponseAttribute.WRK));
                ps.setInt(30, sysplexId);
                ps.setString(31, imsplexName);
                
                if(db.getRecon() != null){
                    ps.setString(32, db.getRecon().getProperty(RcnResponseAttribute.RECON_IMS_NAME));
                    ps.setString(33, db.getRecon().getProperty(RcnResponseAttribute.RECON_LEVEL));
                    ps.setString(34, db.getRecon().getProperty(RcnResponseAttribute.RECON_MIN_VERSION));
                    ps.setString(35, db.getRecon().getProperty(RcnResponseAttribute.RECON_1_DSN));
                    ps.setString(36, db.getRecon().getProperty(RcnResponseAttribute.RECON_1_NAME));
                    ps.setString(37, db.getRecon().getProperty(RcnResponseAttribute.RECON_1_STATUS));
                    ps.setString(38, db.getRecon().getProperty(RcnResponseAttribute.RECON_2_DSN));
                    ps.setString(39, db.getRecon().getProperty(RcnResponseAttribute.RECON_2_NAME));
                    ps.setString(40, db.getRecon().getProperty(RcnResponseAttribute.RECON_2_STATUS));
                    ps.setString(41, db.getRecon().getProperty(RcnResponseAttribute.RECON_3_DSN));
                    ps.setString(42, db.getRecon().getProperty(RcnResponseAttribute.RECON_3_NAME));
                    ps.setString(43, db.getRecon().getProperty(RcnResponseAttribute.RECON_3_STATUS));
                } else{
                    ps.setString(32, "");
                    ps.setString(33, "");
                    ps.setString(34, "");
                    ps.setString(35, "");
                    ps.setString(36, "");
                    ps.setString(37, "");
                    ps.setString(38, "");
                    ps.setString(39, "");
                    ps.setString(40, "");
                    ps.setString(41, "");
                    ps.setString(42, "");
                    ps.setString(43, "");
                }

                ps.addBatch();
				
				if ((++i) % 1000 == 0) {
					insertionSize += ps.executeBatch().length;
					connection.commit();
					ps.clearBatch();
				}
			}
			
			insertionSize += ps.executeBatch().length;
			connection.commit();
			ps.clearBatch();
            
        } catch (SQLException e) {
            try {
                logAndRollback(connection, e);
            } catch (DatastoreException e1) {
                OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
                omDatastoreException.setQuery(sb.toString());
                throw omDatastoreException;
            }
        } finally {
            close(ps);
            close(connection); 
        }

        return insertionSize;
    }
    
    //*******************************************************************************************
    // Update IMS Transactions functions
    //*******************************************************************************************
    
	/**
	 * Update entire row of a database.
	 * @param databases
	 * @param mbr
	 * @param sysplexId
	 * @param imsplexName
	 * @return
	 * @throws OmDatastoreException
	 */
	public int updateDatabase(Collection<Database> databases, String mbr, int sysplexId, String imsplexName) throws OmDatastoreException{
		
		
		Connection connection 	= null;
		PreparedStatement ps 	= null;
		int insertionSize=0;
						
		StringBuffer  sb = new StringBuffer("UPDATE ")
		.append(this.tableName).append("SET ") 
		.append(DatabaseResponseAttribute.ACC).append(" = ? , ")
		.append(DatabaseResponseAttribute.AREA).append(" = ? , ")
		.append(DatabaseResponseAttribute.CC).append(" = ? , ")
		.append(DatabaseResponseAttribute.CCTXT).append(" = ? , ")
		.append(DatabaseResponseAttribute.DB).append(" = ? , ")
		.append(DatabaseResponseAttribute.DFNT).append(" = ? , ")
		.append(DatabaseResponseAttribute.IMSID).append(" = ? , ")
		.append(DatabaseResponseAttribute.LACC).append(" = ? , ")
		.append(DatabaseResponseAttribute.LRSDNT).append(" = ? , ")
		.append(DatabaseResponseAttribute.LSTT).append(" = ? , ")
		.append(DatabaseResponseAttribute.MBR).append(" = ? , ")
		.append(DatabaseResponseAttribute.MDLN).append(" = ? , ")
		.append(DatabaseResponseAttribute.MDLT).append(" = ? , ")
		.append(DatabaseResponseAttribute.PART).append(" = ? , ")
		.append(DatabaseResponseAttribute.PGM).append(" = ? , ")
		.append(DatabaseResponseAttribute.RACC).append(" = ? , ")
		.append(DatabaseResponseAttribute.REPO).append(" = ? , ")
		.append(DatabaseResponseAttribute.RRSDNT).append(" = ? , ")
		.append(DatabaseResponseAttribute.RSDNT).append(" = ? , ")
		.append(DatabaseResponseAttribute.RTMCR).append(" = ? , ")
		.append(DatabaseResponseAttribute.RTMUP).append(" = ? , ")
		.append(DatabaseResponseAttribute.SNDX).append(" = ? , ")
		.append(DatabaseResponseAttribute.STT).append(" = ? , ")
		.append(DatabaseResponseAttribute.TMAC).append(" = ? , ")
		.append(DatabaseResponseAttribute.TMCR).append(" = ? , ")
		.append(DatabaseResponseAttribute.TMIM).append(" = ? , ")
		.append(DatabaseResponseAttribute.TMUP).append(" = ? , ")
		.append(DatabaseResponseAttribute.TYP).append(" = ? , ")
		.append(DatabaseResponseAttribute.WRK).append(" = ? , ")
		.append(RcnResponseAttribute.RECON_IMS_NAME).append(" = ? , ")
		.append(RcnResponseAttribute.RECON_LEVEL).append(" = ? , ")
		.append(RcnResponseAttribute.RECON_MIN_VERSION).append(" = ? , ")
		.append(RcnResponseAttribute.RECON_1_DSN).append(" = ? , ")
		.append(RcnResponseAttribute.RECON_1_NAME).append(" = ? , ")
		.append(RcnResponseAttribute.RECON_1_STATUS).append(" = ? , ")
		.append(RcnResponseAttribute.RECON_2_DSN).append(" = ? , ")
		.append(RcnResponseAttribute.RECON_2_NAME).append(" = ? , ")
		.append(RcnResponseAttribute.RECON_2_STATUS).append(" = ? , ")
		.append(RcnResponseAttribute.RECON_3_DSN).append(" = ? , ")
		.append(RcnResponseAttribute.RECON_3_NAME).append(" = ? , ")
		.append(RcnResponseAttribute.RECON_3_STATUS).append(" = ? , ")
		.append(" WHERE ").append(DatabaseResponseAttribute.DB).append(" = ? ")
        .append(" AND ").append(DatabaseResponseAttribute.MBR).append(" = ? ")
		.append(" AND ").append(SYSPLEX_ID).append(" = ? ")
		.append(" AND ").append(IMSPLX).append(" = ? ");
		
		try{
			int i = 0;
	        connection = parentDatastore.getConnection();
	        connection.setAutoCommit(false);
	        ps = connection.prepareStatement(sb.toString(),Statement.RETURN_GENERATED_KEYS);
	           
			for(Database database: databases){
				ps.setString(1, database.getProperty( DatabaseResponseAttribute.ACC));
				ps.setString(2, database.getProperty( DatabaseResponseAttribute.AREA));
				ps.setString(3, database.getProperty( DatabaseResponseAttribute.CC));
				ps.setString(4, database.getProperty( DatabaseResponseAttribute.CCTXT));
				ps.setString(5, database.getProperty( DatabaseResponseAttribute.DB));
				ps.setString(6, database.getProperty( DatabaseResponseAttribute.DFNT));
				ps.setString(7, database.getProperty( DatabaseResponseAttribute.IMSID));
				ps.setString(8, database.getProperty( DatabaseResponseAttribute.LACC));
				ps.setString(9, database.getProperty( DatabaseResponseAttribute.LRSDNT));
				ps.setString(10, database.getProperty( DatabaseResponseAttribute.LSTT));
				ps.setString(11, database.getProperty( DatabaseResponseAttribute.MBR));
				ps.setString(12, database.getProperty( DatabaseResponseAttribute.MDLN));
				ps.setString(13, database.getProperty( DatabaseResponseAttribute.MDLT));
				ps.setString(14, database.getProperty( DatabaseResponseAttribute.PART));
				ps.setString(15, database.getProperty( DatabaseResponseAttribute.PGM));
				ps.setString(16, database.getProperty( DatabaseResponseAttribute.RACC));
				ps.setString(17, database.getProperty( DatabaseResponseAttribute.REPO));
				ps.setString(18, database.getProperty( DatabaseResponseAttribute.RRSDNT));
				ps.setString(19, database.getProperty( DatabaseResponseAttribute.RSDNT));
				ps.setString(20, database.getProperty( DatabaseResponseAttribute.RTMCR));
				ps.setString(21, database.getProperty( DatabaseResponseAttribute.RTMUP));
				ps.setString(22, database.getProperty( DatabaseResponseAttribute.SNDX));
				ps.setString(23, database.getProperty( DatabaseResponseAttribute.STT));
				ps.setString(24, database.getProperty( DatabaseResponseAttribute.TMAC));
				ps.setString(25, database.getProperty( DatabaseResponseAttribute.TMCR));
				ps.setString(26, database.getProperty( DatabaseResponseAttribute.TMIM));
				ps.setString(27, database.getProperty( DatabaseResponseAttribute.TMUP));
				ps.setString(28, database.getProperty( DatabaseResponseAttribute.TYP));
				ps.setString(29, database.getProperty( DatabaseResponseAttribute.WRK));
				//TODO RECON Could be null here, do we init it in the database bean or check for nullity here
				ps.setString(30, database.getRecon().getProperty( RcnResponseAttribute.RECON_IMS_NAME));
				ps.setString(31, database.getRecon().getProperty( RcnResponseAttribute.RECON_LEVEL));
				ps.setString(32, database.getRecon().getProperty( RcnResponseAttribute.RECON_MIN_VERSION));
				ps.setString(33, database.getRecon().getProperty( RcnResponseAttribute.RECON_1_DSN));
				ps.setString(34, database.getRecon().getProperty( RcnResponseAttribute.RECON_1_NAME));
				ps.setString(35, database.getRecon().getProperty( RcnResponseAttribute.RECON_1_STATUS));
				ps.setString(36, database.getRecon().getProperty( RcnResponseAttribute.RECON_2_DSN));
				ps.setString(37, database.getRecon().getProperty( RcnResponseAttribute.RECON_2_NAME));
				ps.setString(38, database.getRecon().getProperty( RcnResponseAttribute.RECON_2_STATUS));
				ps.setString(39, database.getRecon().getProperty( RcnResponseAttribute.RECON_3_DSN));
				ps.setString(40, database.getRecon().getProperty( RcnResponseAttribute.RECON_3_NAME));
				ps.setString(41, database.getRecon().getProperty( RcnResponseAttribute.RECON_3_STATUS));
				ps.setInt(42, sysplexId);
				ps.setString(43, imsplexName);
				
				ps.addBatch();
				
				if ((++i) % 1000 == 0) {
					insertionSize += ps.executeBatch().length;
					connection.commit();
					ps.clearBatch();
				}
			}
			
			insertionSize += ps.executeBatch().length;
			connection.commit();
			ps.clearBatch();
			
			//Populate the meta-data with the latest update
			this.autoConfigureResourceMetaData(sysplexId, imsplexName);
			
		} catch (SQLException e) {
	       	try {
					logAndRollback(connection, e);
				} catch (DatastoreException e1) {
					OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
					omDatastoreException.setQuery(sb.toString());
					throw omDatastoreException;
				}
			} finally {
				close(ps); 
				close(connection);
			}

		return insertionSize;
	}
    
	   public int updateDatabaseStatus(Collection<Database> databases, int sysplexId, String imsplexName) throws OmDatastoreException{

	       StringBuffer sb = new StringBuffer("UPDATE ")
	       .append(this.tableName)
	       .append(" SET ").append(DatabaseResponseAttribute.LSTT).append(" = ? ")
	       .append(" WHERE ").append(DatabaseResponseAttribute.DB).append(" = ? ")
	       .append(" AND ").append(DatabaseResponseAttribute.MBR).append(" = ? ")
	       .append(" AND ").append(DatabaseResponseAttribute.AREA).append(" = ? ")
	       .append(" AND ").append(DatabaseResponseAttribute.TYP).append(" = ? ")
	       .append(" AND ").append(SYSPLEX_ID).append(" = ? ")
	       .append(" AND ").append(IMSPLX).append(" = ? ");
	       
	       Connection connection = null;
	       PreparedStatement ps = null;
	       int insertionSize = 0;
	       
	       try {
	       	connection = parentDatastore.getConnection();
	       	connection.setAutoCommit(false);
	           ps = connection.prepareStatement(sb.toString(), Statement.RETURN_GENERATED_KEYS);
	           int i =0;
	           
	           for (Database db : databases) {
	        	   ps.setString(1, db.getProperty(DatabaseResponseAttribute.LSTT));
	               ps.setString(2, db.getProperty(DatabaseResponseAttribute.DB));
	               ps.setString(3, db.getProperty(DatabaseResponseAttribute.MBR));
	               ps.setString(4, db.getProperty(DatabaseResponseAttribute.AREA));
	               ps.setString(5, db.getProperty(DatabaseResponseAttribute.TYP));
	               ps.setInt(6, sysplexId);
	               ps.setString(7, imsplexName);
	               ps.addBatch();

	               if ((++i) % 1000 == 0) {
						insertionSize += ps.executeBatch().length;
						connection.commit();
						ps.clearBatch();
					}
	           }
	           
				insertionSize += ps.executeBatch().length;
				connection.commit();
				ps.clearBatch();
				
	       } catch(SQLException e) {
	       	try {
					logAndRollback(connection, e);
				} catch (DatastoreException e1) {
					OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
					omDatastoreException.setQuery(sb.toString());
					throw omDatastoreException;
				}
	       } finally {
	       	close(ps);         
	       	close(connection); 
	       }
	       
	       return insertionSize;
	    }
	   
		private int updateDatabaseColumn(Collection<Database> databases, DatabaseResponseAttribute databaseResponseAttribute, String value, int sysplexId, String imsplexName) throws OmDatastoreException{
		    StringBuffer sb = new StringBuffer("UPDATE ")
	        .append(this.tableName)
	        .append(" SET ").append(databaseResponseAttribute).append(" = ? ")
	        .append(" WHERE ").append(DatabaseResponseAttribute.DB).append(" = ? ")
	        .append(" AND ").append(DatabaseResponseAttribute.MBR).append(" = ? ")
	        .append(" AND ").append(SYSPLEX_ID).append(" = ? ")
	        .append(" AND ").append(IMSPLX).append(" = ? ");
	        
	        Connection connection = null;
	        PreparedStatement ps = null;
	        int updateSize = 0;
	        
	        try {
	        	connection = parentDatastore.getConnection();
	        	connection.setAutoCommit(false);
	            ps = connection.prepareStatement(sb.toString(), Statement.RETURN_GENERATED_KEYS);
	            int i =0;
	            
	            for(Database database: databases){
	            	ps.setString(1, value);
	                ps.setString(2, database.getProperty(DatabaseResponseAttribute.DB));
	                ps.setString(3, database.getProperty(DatabaseResponseAttribute.MBR));
	                ps.setInt(4, sysplexId);
	                ps.setString(5,imsplexName);
	                
	                ps.addBatch();
	                if ((++i) % 1000 == 0) {
	                	updateSize += ps.executeBatch().length;
	                	connection.commit();
	                	ps.clearBatch();
	                }
	            }
	            updateSize = ps.executeBatch().length;
	            connection.commit();
	            
	        } catch(SQLException e) {
	        	try {
					logAndRollback(connection, e);
				} catch (DatastoreException e1) {
					OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
					omDatastoreException.setQuery(sb.toString());
					throw omDatastoreException;
				}
	        } finally {
	        	close(ps);         
	        	close(connection); 
	        }
	        
	        return updateSize;
		}
		
    /**
     * Update an entire column with a value. This can be pretty expensive and time costly.
     * @param Column
     * @param value
     * @param systemId
     * @param sysplexId
     * @param imsplexName
     * @return
     * @throws DatastoreException
     */
    public int updateColumn(DatabaseResponseAttribute column, String value,String systemId, int sysplexId, String imsplexName) throws OmDatastoreException{
        //Update table set column = NULL
        StringBuffer sb = new StringBuffer("UPDATE ")
        .append(this.tableName)
        .append(" SET ").append(column).append(" = ? ")
        .append(" WHERE ").append(DatabaseResponseAttribute.MBR).append(" = ? ")
        .append(" AND ").append(SYSPLEX_ID).append(" = ? ")
        .append(" AND ").append(IMSPLX).append(" = ? ");
        
         Connection connection = null;
         PreparedStatement ps = null;
         int result = 0;

         try {
            connection = parentDatastore.getConnection();
            ps = connection.prepareStatement(sb.toString(), Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, value);
            ps.setString(2, systemId);
            ps.setInt(3, sysplexId);
            ps.setString(4, imsplexName);
            ps.executeUpdate();
            connection.commit();
                
         } catch(SQLException e) {
            try {
                    logAndRollback(connection, e);
            } catch (DatastoreException e1) {
                    OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
                    omDatastoreException.setQuery(sb.toString());
                    throw omDatastoreException;
            }
         } finally {
                close(ps);         
                close(connection);
         }
         
         return result;
    }
    
    /**
     * Update an entire column with a value. This can be pretty expensive and time costly.
     * @param Column
     * @param value
     * @param sysplexId
     * @param imsplexName
     * @return
     * @throws DatastoreException
     */
    public int updateColumn(DatabaseResponseAttribute column, String value, int sysplexId, String imsplexName) throws OmDatastoreException{
        //Update table set column = NULL
        StringBuffer sb = new StringBuffer("UPDATE ")
        .append(this.tableName)
        .append(" SET ").append(column).append(" = ? ")
        .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
        .append(" AND ").append(IMSPLX).append(" = ? ");
        
         Connection connection = null;
         PreparedStatement ps = null;
         int result = 0;

         try {
            connection = parentDatastore.getConnection();
            ps = connection.prepareStatement(sb.toString(), Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, value);
            ps.setInt(2, sysplexId);
            ps.setString(3, imsplexName);
            ps.executeUpdate();
            connection.commit();
                
         } catch(SQLException e) {
            try {
                    logAndRollback(connection, e);
            } catch (DatastoreException e1) {
                    OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
                    omDatastoreException.setQuery(sb.toString());
                    throw omDatastoreException;
            }
         } finally {
                close(ps);         
                close(connection);
         }
         
         return result;
    }
    
    //*******************************************************************************************
    // Get Distinct Column
    //*******************************************************************************************
    
    public Collection<String> getDistinctColumn(int sysplexId,String imsplexName,DatabaseResponseAttribute databaseResponseAttribute) throws OmDatastoreException{
        return this.getDistinctColumn(sysplexId, imsplexName, databaseResponseAttribute.toString());
     }
    
    //*******************************************************************************************
    // Get Databases
    //*******************************************************************************************
    public Collection<Database> getDatabases(int sysplexId,String[] imsSystemName) throws OmDatastoreException {
    	Collection<Database> databases = new ArrayList<Database>();
    	try {
    		databases =  this.getDatabases(sysplexId,null,imsSystemName,null);
		} catch (OmConnectionException e) { 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		} catch (OmException e){ 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		}
        return databases;
    }
    
	/**
	 * Get transactions from Derby cache ordered by LSTT and Tran. Note that the cache does not maintain the transation
	 * state (LSTT). You just make a separate call to OM for that and insert it to the cache before requesting transactoions.
	 * After a transaction update of status, and calling this function , you should delete the updates. 
	 * @param imsSystemName
	 * @param sysplexId
	 * @param imsplexName
	 * @return
	 * @throws OmConnectionException 
	 * @throws OmException 
	 * @throws DatastoreException
	 */
	public Collection<Database> getDatabases(int sysplexId, String imsplexName,String[] imsSystemName) throws OmDatastoreException {
		Collection<Database> databases = new ArrayList<Database>();
		
		try {
			databases = this.getDatabases(sysplexId,imsplexName,imsSystemName,null);
		} catch (OmConnectionException e) { 
			/** Will not be thrown because we pass null so eat the error **/
		} catch (OmException e){ 
			/** Will not be thrown because we pass null so eat the error **/
		}
		return databases;
	}
	
	public Collection<Database> getDatabases(int sysplexId, String imsplexName,String[] imsSystemName,Om om) throws OmDatastoreException, OmException, OmConnectionException {
        Connection connection = null;
        PreparedStatement ps = null;
        ResultSet results = null;
        ArrayList<Database> databases = new ArrayList<Database>();
        StringBuffer sb = null; 
        Collection<Database> databaseStatuses = null;
        
        try {
        	
        	//If the om is not null then query IMS for the transactions status
        	if(om != null  && !om.isInteractionModeCache()){
    			//EnumSet<QueryDb.StatusOptions> queryDbStatusOptionsSet = EnumSet.allOf(QueryDb.StatusOptions.class);
    			EnumSet<QueryDb.StatusOptions> queryDbStatusOptionsSet = EnumSet.of(QueryDb.StatusOptions.ALLOCF, QueryDb.StatusOptions.ALLOCS, QueryDb.StatusOptions.BACKOUT, 
    			        QueryDb.StatusOptions.EEQE, QueryDb.StatusOptions.LOCK,QueryDb.StatusOptions.NOTINIT,QueryDb.StatusOptions.OFR, QueryDb.StatusOptions.OLR, QueryDb.StatusOptions.OPEN, QueryDb.StatusOptions.QUIESCED, QueryDb.StatusOptions.QUIESCING, 
    	                QueryDb.StatusOptions.RECALL, QueryDb.StatusOptions.RECOV, QueryDb.StatusOptions.RNL, QueryDb.StatusOptions.STOACC, QueryDb.StatusOptions.STOSCHD, 
    	                QueryDb.StatusOptions.STOUPDS);
    			
    			QueryDb.StatusOptions[] queryDbStatusOptions = (QueryDb.StatusOptions[]) queryDbStatusOptionsSet.toArray(new QueryDb.StatusOptions[queryDbStatusOptionsSet.size()]);

    			databaseStatuses = om.getDatabaseService().getDatabaseByStatus(queryDbStatusOptions,imsSystemName);

    			if(databaseStatuses.size()>0){
    				this.updateDatabaseStatus(databaseStatuses,sysplexId,imsplexName);
    			}
        	}

        	connection = parentDatastore.getConnection();
            
           	//Case: no route has been passed or the length is 0 but so we need to check if an impslexname has been passed.
        	if(imsSystemName == null || imsSystemName.length == 0){
        		if(imsplexName != null){
                    sb = new StringBuffer("SELECT * FROM ")
                    .append(this.tableName)
                    .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                    .append(" AND ").append(IMSPLX).append(" = ? ")
                    .append(" ORDER BY ").append(DatabaseResponseAttribute.DB);
                    
                    ps = connection.prepareStatement(sb.toString());
                    ps.setInt(1, sysplexId);
                    ps.setString(2, imsplexName);
            	}else{
            		 sb = new StringBuffer("SELECT * FROM ")
                     .append(this.tableName)
                     .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                     .append(" ORDER BY ").append(DatabaseResponseAttribute.DB);
                     
                     ps = connection.prepareStatement(sb.toString());
                     ps.setInt(1, sysplexId);
            	}
        		
        		results = ps.executeQuery();
                
                while (results.next()) {
                	Database database = new Database(results);
                    databases.add(database);
                }
                
        	}else{ //Route has been passed and for each we route the command and concat the results
        		String sqlIn = this.sqlInGenerator(DatabaseResponseAttribute.MBR.toString(), imsSystemName);
                sb = new StringBuffer("SELECT * FROM ")
                    .append(this.tableName)
                    .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                    .append(" AND ").append(IMSPLX).append(" = ? ")
                    .append(sqlIn)
                    .append(" ORDER BY ").append(DatabaseResponseAttribute.DB);
                         
                     ps = connection.prepareStatement(sb.toString());
                     ps.setInt(1, sysplexId);
                     ps.setString(2, imsplexName);
                	
                     results = ps.executeQuery();
                    
                     while (results.next()) {
                    	 HashMap<String, String> recon = new HashMap<String, String>();
                         recon.put(RcnResponseAttribute.RECON_IMS_NAME.name(), results.getString(RcnResponseAttribute.RECON_IMS_NAME.name()));
                         recon.put(RcnResponseAttribute.RECON_LEVEL.name(),results.getString(RcnResponseAttribute.RECON_LEVEL.name()));
                         recon.put(RcnResponseAttribute.RECON_MIN_VERSION.name(),results.getString(RcnResponseAttribute.RECON_MIN_VERSION.name()));
                         recon.put(RcnResponseAttribute.RECON_1_NAME.name(),results.getString(RcnResponseAttribute.RECON_1_NAME.name()));
                         recon.put(RcnResponseAttribute.RECON_1_STATUS.name(),results.getString(RcnResponseAttribute.RECON_1_STATUS.name()));
                         recon.put(RcnResponseAttribute.RECON_1_DSN.name(),results.getString(RcnResponseAttribute.RECON_1_DSN.name()));
                         recon.put(RcnResponseAttribute.RECON_2_NAME.name(),results.getString(RcnResponseAttribute.RECON_2_NAME.name()));
                         recon.put(RcnResponseAttribute.RECON_2_STATUS.name(),results.getString(RcnResponseAttribute.RECON_2_STATUS.name()));
                         recon.put(RcnResponseAttribute.RECON_2_DSN.name(),results.getString(RcnResponseAttribute.RECON_2_DSN.name()));
                         recon.put(RcnResponseAttribute.RECON_3_NAME.name(),results.getString(RcnResponseAttribute.RECON_3_NAME.name()));
                         recon.put(RcnResponseAttribute.RECON_3_STATUS.name(),results.getString(RcnResponseAttribute.RECON_3_STATUS.name()));
                         recon.put(RcnResponseAttribute.RECON_3_DSN.name(),results.getString(RcnResponseAttribute.RECON_3_DSN.name()));
                         Database database = new Database(results);
                         Rcn rcn = new Rcn(recon);
                         database.setRecon(rcn);
                         databases.add(database);
                     }
        	}
            
            //Execute process to cleanup the status column in the derby cache
             this.executeUpdateDatabaseColumnAsynchronously(databaseStatuses,sysplexId,imsplexName);
        } catch(SQLException e) {
            try {
                logAndRollback(connection, e);
            } catch (DatastoreException e1) {
                OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
                omDatastoreException.setQuery(sb.toString());
                omDatastoreException.setEnvironmentId(sysplexId);
                throw omDatastoreException;
            }
        } finally {
            close(results);    
            close(ps);         
            close(connection); 
        }
        
        return databases;    
    }
	
    //*******************************************************************************************
    // Get imsplex
    //*******************************************************************************************
       public String getImsplex(int sysplexId, String databaseName, String locale) throws OmDatastoreException {
            Connection connection = null;
            PreparedStatement ps = null;
            ResultSet results = null;
            StringBuffer sb = null; 
            String imsplexName = null;
            try {
                connection = parentDatastore.getConnection();
                
               
                        sb = new StringBuffer("SELECT * FROM ")
                        .append(this.tableName)
                        .append(" WHERE ").append(DatabaseResponseAttribute.DB).append(" = ? ")
                        .append(" AND ").append(SYSPLEX_ID).append(" = ? ")
                        .append(" AND ").append(RcnResponseAttribute.RECON_1_DSN).append(" = ? ");
                                            
                        ps = connection.prepareStatement(sb.toString());
                        ps.setString(1, databaseName);
                        ps.setInt(2, sysplexId);
                        ps.setString(3, locale);
                    
                results = ps.executeQuery();
                            
                while (results.next()) {
                   if(results.getInt(IMSPLX) != 0){
                       imsplexName = results.getString(IMSPLX);
                       
                       ImsplexStore imsplexStore = ImsbaseDatastore.getInstance().getImsplexStore();
                       ImsplexBean imsplexBean = imsplexStore.getImsplexByImsPlexNameAndSysplexId(imsplexName, sysplexId);
                       
                       if(imsplexBean.getShortName() != null){
                           imsplexName = imsplexBean.getShortName();
                       }
                   }
                }
            } catch(SQLException e) {
                try {
                    logAndRollback(connection, e);
                } catch (DatastoreException e1) {
                    OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
                    omDatastoreException.setQuery(sb.toString());
                    throw omDatastoreException;
                }
            } catch (DatastoreException e) {
                OmDatastoreException omDatastoreException = new OmDatastoreException(e);
                omDatastoreException.setQuery(sb.toString());
                throw omDatastoreException;
            } finally {
                close(results);    // ResultSet
                close(ps);         // PreparedStatement
                close(connection); // Connection
            }
            return imsplexName;   
        }
       
       //*******************************************************************************************
       // Get recon1
       //*******************************************************************************************
       public String getRecon1Dsn(int sysplexId, String imsName, String imsplexName) throws OmDatastoreException {
            Connection connection = null;
            PreparedStatement ps = null;
            ResultSet results = null;
            StringBuffer sb = null; 
            int imsplex = 0;
          
           sb = new StringBuffer("SELECT * FROM ").append(this.tableName).
                    append(" WHERE ").append(DatabaseResponseAttribute.MBR).append(" = ? ").
                    append(" AND ").append(SYSPLEX_ID).append(" = ? ").
                    append(" AND ").append(IMSPLX).append(" = ? ");
        try {
            ImsplexBean imsplexBean = ImsbaseDatastore.getInstance().getImsplexStore().getImsplexByImsPlexNameAndSysplexId(imsplexName.trim(), sysplexId); 
            imsplex = imsplexBean.getImsplexId();
            
            connection = parentDatastore.getConnection();

            ps = connection.prepareStatement(sb.toString());
            ps.setString(1, imsName);
            ps.setInt(2, sysplexId);
            ps.setInt(3, imsplex);

            results = ps.executeQuery();

            while (results.next()) {
                String tempRecon = results.getString(RcnResponseAttribute.RECON_1_DSN.name());
                if (tempRecon != null && tempRecon.isEmpty()) {
                    return tempRecon;
                }
            }
        } catch(SQLException e) {
                try {
                    logAndRollback(connection, e);
                } catch (DatastoreException e1) {
                    OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
                    omDatastoreException.setQuery(sb.toString());
                    throw omDatastoreException;
                }
        } catch (DatastoreException e) {
            OmDatastoreException omDatastoreException = new OmDatastoreException(e);
            omDatastoreException.setQuery(sb.toString());
            throw omDatastoreException;
        } finally {
                close(results);    // ResultSet
                close(ps);         // PreparedStatement
                close(connection); // Connection
            }
            return "";   
        }
       
       //*******************************************************************************************
       // Get databasese by name
       //*******************************************************************************************
       public Collection<Database> getDatabaseByName(int sysplexId, String databaseName, String locale, String areaPart) throws OmDatastoreException {
            Connection connection = null;
            PreparedStatement ps = null;
            ResultSet results = null;
            StringBuffer sb = null; 
            ArrayList<Database> databases = new ArrayList<Database>();

            try {
                
                connection = parentDatastore.getConnection();
                if(areaPart != null && !areaPart.isEmpty()) {
                sb = new StringBuffer("SELECT * FROM ")
                        .append(this.tableName)
                        .append(" WHERE ").append(DatabaseResponseAttribute.DB).append(" = ? ")
                        .append(" AND ").append(SYSPLEX_ID).append(" = ? ")
                        .append(" AND ").append(RcnResponseAttribute.RECON_1_DSN).append(" = ? ")
                        .append(" AND ").append(DatabaseResponseAttribute.AREA).append(" = ? ");

                        ps = connection.prepareStatement(sb.toString());
                        ps.setString(1, databaseName);
                        ps.setInt(2, sysplexId);
                        ps.setString(3, locale);
                        ps.setString(4, areaPart);
                        
               
                } else {
                	sb = new StringBuffer("SELECT * FROM ")
                    .append(this.tableName)
                    .append(" WHERE ").append(DatabaseResponseAttribute.DB).append(" = ? ")
                    .append(" AND ").append(SYSPLEX_ID).append(" = ? ")
                    .append(" AND ").append(RcnResponseAttribute.RECON_1_DSN).append(" = ? ")
                    .append(" AND ").append(DatabaseResponseAttribute.AREA).append(" IS NULL");

                    ps = connection.prepareStatement(sb.toString());
                    ps.setString(1, databaseName);
                    ps.setInt(2, sysplexId);
                    ps.setString(3, locale);
                }

                results = ps.executeQuery();
                while(results.next()) {
                    HashMap<String, String> recon = new HashMap<String, String>();
                    recon.put(RcnResponseAttribute.RECON_IMS_NAME.name(), results.getString(RcnResponseAttribute.RECON_IMS_NAME.name()));
                    recon.put(RcnResponseAttribute.RECON_LEVEL.name(),results.getString(RcnResponseAttribute.RECON_LEVEL.name()));
                    recon.put(RcnResponseAttribute.RECON_MIN_VERSION.name(),results.getString(RcnResponseAttribute.RECON_MIN_VERSION.name()));
                    recon.put(RcnResponseAttribute.RECON_1_NAME.name(),results.getString(RcnResponseAttribute.RECON_1_NAME.name()));
                    recon.put(RcnResponseAttribute.RECON_1_STATUS.name(),results.getString(RcnResponseAttribute.RECON_1_STATUS.name()));
                    recon.put(RcnResponseAttribute.RECON_1_DSN.name(),results.getString(RcnResponseAttribute.RECON_1_DSN.name()));
                    recon.put(RcnResponseAttribute.RECON_2_NAME.name(),results.getString(RcnResponseAttribute.RECON_2_NAME.name()));
                    recon.put(RcnResponseAttribute.RECON_2_STATUS.name(),results.getString(RcnResponseAttribute.RECON_2_STATUS.name()));
                    recon.put(RcnResponseAttribute.RECON_2_DSN.name(),results.getString(RcnResponseAttribute.RECON_2_DSN.name()));
                    recon.put(RcnResponseAttribute.RECON_3_NAME.name(),results.getString(RcnResponseAttribute.RECON_3_NAME.name()));
                    recon.put(RcnResponseAttribute.RECON_3_STATUS.name(),results.getString(RcnResponseAttribute.RECON_3_STATUS.name()));
                    recon.put(RcnResponseAttribute.RECON_3_DSN.name(),results.getString(RcnResponseAttribute.RECON_3_DSN.name()));
                    Database dbBean = new Database(results);
                    Rcn rcn = new Rcn(recon);
                    dbBean.setRecon(rcn);
                    databases.add(dbBean);
                }
            } catch(SQLException e) {
               try {
                   logAndRollback(connection, e);
               } catch (DatastoreException e1) {
                   OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
                   omDatastoreException.setQuery(sb.toString());
                   throw omDatastoreException;
               }
           } finally {
               close(results);    // ResultSet
               close(ps);         // PreparedStatement
               close(connection); // Connection
           }
           return databases;   
       }
       
       //Get databases by Name for REPO
       
       public Collection<Database> getDatabasesByName(int sysplexId, String imsplexName, String[] imsSystemName, String[] databaseNames, Om om) throws OmDatastoreException, OmException, OmConnectionException {
           Connection connection = null;
           PreparedStatement ps = null;
           ResultSet results = null;
           ArrayList<Database> databases = new ArrayList<Database>();
           StringBuffer sb = null; 
          
           try{
                
               connection = parentDatastore.getConnection();
               String sqlNameSearch = this.sqlResourceGenerator(DatabaseResponseAttribute.DB.toString(), databaseNames);
               
               //Case: no route has been passed or the length is 0 but so we need to check if an impslexname has been passed.
               if(imsSystemName == null || imsSystemName.length == 0){
                if(imsplexName != null){
                        
                       sb = new StringBuffer("SELECT * FROM ")
                        .append(this.tableName)
                        .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                        .append(" AND ").append(IMSPLX).append(" = ? ")
                        .append(sqlNameSearch);
                          
                       ps = connection.prepareStatement(sb.toString());
                       ps.setInt(1, sysplexId);
                       ps.setString(2, imsplexName);
                    }else{
                        
                       sb = new StringBuffer("SELECT * FROM ")
                        .append(this.tableName)
                        .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                        .append(sqlNameSearch);
                           
                        ps = connection.prepareStatement(sb.toString());
                        ps.setInt(1, sysplexId);
                    }
                    
                results = ps.executeQuery();
                       
                   while (results.next()) {
                       Database db = new Database(results);
                       databases.add(db);
                   }
                       
               }else{ //Route has been passed and for each we route the command and concat the results
                
                //String sqlIn = this.sqlInGenerator(DatabaseResponseAttribute.MBR.toString(), imsSystemName);
                   sb = new StringBuffer("SELECT * FROM ")
                        .append(this.tableName)
                       .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                       .append(" AND ").append(IMSPLX).append(" = ? ")
                     //  .append(sqlIn)
                       .append(sqlNameSearch);
                           
                       ps = connection.prepareStatement(sb.toString());
                       ps.setInt(1, sysplexId);
                       ps.setString(2, imsplexName);
                           
                       results = ps.executeQuery();
                           
                       while (results.next()) {
                           Database db = new Database(results);
                           databases.add(db);
                       }
               }
               
               //Execute process to cleanup the status column in the derby cache
               //this.executeUpdateDatabaseColumnAsynchronously(databaseStatuses,sysplexId,imsplexName);
               
           } catch(SQLException e) {
               try {
                   logAndRollback(connection, e);
               } catch (DatastoreException e1) {
                   OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
                   omDatastoreException.setQuery(sb.toString());
                   throw omDatastoreException;
               }
           } finally {
               close(results);    // ResultSet
               close(ps);         // PreparedStatement
               close(connection); // Connection
           }
           
           return databases;
       }
     
       
       
       
//**************************************************************************************
// asynchronous clean up methods
//**************************************************************************************
      
     /**
      * Executes a callable to clean up the transaction status column, see {link {@link UpdateTransactionColumnAsynchronously}
      * @param transactionStatuses
      * @param sysplexId
      * @param imsplexName
      * @return
      */
     private int executeUpdateDatabaseColumnAsynchronously(Collection<Database> databaseStatuses, int sysplexId,String imsplexName){
    	 int result = 0;
    	 ExecutorService service =  Executors.newSingleThreadExecutor();
         UpdateDatabaseColumnAsynchronously upDatabaseColumnAsynchronously  = new UpdateDatabaseColumnAsynchronously(databaseStatuses,sysplexId,imsplexName);
         Future<Integer> future = service.submit(upDatabaseColumnAsynchronously);
         try {
			result =  future.get();
         } catch (InterruptedException e) {
        	 //TODO: Do anything here?
         } catch (ExecutionException e) {
        	//TODO: Do anything here?
         }
         
         return result;
     }
     
    /**
     * <pre>
     * Class will create a callable to run in the background for a non-blocking call to {@link ImsTransactionTable#updateTransactionColumn(Collection, TransactionResponseAttribute, String, int, int)}
     *
     * Usage:
     *  ExecutorService service =  Executors.newSingleThreadExecutor();
     *  updateTransactionColumnAsynchronously upTransactionsAssychronously = new updateTransactionColumnAsynchronously(transactionStatuses,sysplexId,imsplexId);
     *  Future<Integer> future = service.submit(upTransactionsAssychronously);
     *  try {
     *  	Integer result = future.get();
     *  } catch (InterruptedException e) {
     *  } catch (ExecutionException e) {} 
     * 
     * @author ddimatos
     *</pre>
     */
    private class UpdateDatabaseColumnAsynchronously implements Callable<Integer> {
    	private Collection<Database> databases ;
    	private int sysplexId;
    	private String imsplexName = null;
    	      
    	// Null out the statuses that were set, we want to keep the status column null after use
    	private UpdateDatabaseColumnAsynchronously(Collection<Database> databases, int sysplexId,String imsplexName) {
    		this.databases = databases;
    		this.sysplexId = sysplexId;
    		this.imsplexName = imsplexName;
    	}

    	@Override
    	public Integer call() throws OmDatastoreException  {
    		//My guess is this is thread safe because Derby will not allow a read during an update
    		return new Integer (updateDatabaseColumn(databases,DatabaseResponseAttribute.LSTT,null,sysplexId,imsplexName));
    	}
    }
}