/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.common.service;

import java.util.Collection;

import com.ibm.ims.ea.om.cmd.v14.query.tran.QueryTran;
import com.ibm.ims.ea.om.common.connection.factory.OMConnection;
import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.pgm.Program;
import com.ibm.ims.ea.om.tran.Transaction;
import com.ibm.ims.ea.om.tran.update.syntax.START._START;
import com.ibm.ims.ea.om.tran.update.syntax.STOP._STOP;

/**
 * Class provides a simple to use API to interact with Operations Manager. The objects returned are beans that aid
 * represent the result OM has returned. This API is backed by a cache that is populated by calling the class discovery.
 * Once discovered certain members will interact with the cache minimizing the size of the query sent to OM thus
 * yielding performance. It should be noted not all methods interact with a cache, each method explains its interaction.
 */
public interface TransactionService {

    /**
     * <pre>
     * Returns all transactions for an IMS System.
     * 
     * The query is sent to all IMSs registered with the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered IMSA and IMSB then 
     * the result include responses for both IMSA and IMSB.
     * 
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
     * @return
     * @throws OmException
     * @throws OmConnectionException 
     * @throws OmDatastoreException
     * </pre>
     */
    public Collection<Transaction> getTransactions() throws OmException, OmDatastoreException, OmConnectionException;

    /**
     * <pre>
     * Returns all transactions in the IMSplex. 
     * 
     * The query is sent to the IMS (imsName) within the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered IMSA and IMSB and the 
     * imsName is set to IMSA, then the result include responses for IMSA only.
     * 
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
     * @param imsName
     * @return
     * @throws OmException
     * @throws OmDatastoreException
     * </pre>
     */
    public Collection<Transaction> getTransactions(String[] imsName) throws OmException, OmDatastoreException, OmConnectionException;

    /**
     * <pre>
     * Returns transactions matching that match the provided names in the IMSplex. 
     * 
     * The query is sent to all IMSs registered with the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered IMSA and IMSB then 
     * the result include responses for both IMSA and IMSB.
     * 
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
     * @param transactionNames
     * @return
     * @throws OmException
     * @throws OmConnectionException 
     * @throws OmDatastoreException
     * </pre>
     */
    public Collection<Transaction> getTransactionsByName(String[] transactions) throws OmException, OmConnectionException, OmDatastoreException;

    /**
     * <pre>
     * Returns transactions matching that match the provided names for an IMS System. 
     * 
     * The query is sent to the IMS (imsName) within the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered IMSA and IMSB and the 
     * imsName is set to IMSA, then the result include responses for IMSA only.
     * 
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
     * @param transactionNames
     * @param imsName
     * @return
     * @throws OmException
     * @throws OmConnectionException 
     * @throws OmDatastoreException
     * </pre>
     */
    public Collection<Transaction> getTransactionsByName(String[] transactions, String[] imsName) throws OmException, OmConnectionException,
            OmDatastoreException;

    /**
     * <pre>
     * Returns all transactions with a particular status {@link QueryTran.StatusOptions} in the IMSplex.
     * 
     * The query is sent to all IMSs registered with the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered IMSA and IMSB then 
     * the result include responses for both IMSA and IMSB.
     * 
     * This service is a live only call to Operations Manager, there is no cache involved. {@link InteractionMode} is not supported for this
     * service.
     * 
     * @param queryTranStatuses
     * @return
     * @throws OmException
     * @throws OmConnectionException
     * </pre>
     * @throws OmDatastoreException
     */
    public Collection<Transaction> getTransactionsByStatus(QueryTran.StatusOptions[] queryTranStatuses) throws OmException, OmConnectionException,
            OmDatastoreException;

    /**
     * <pre>
     * Returns transactions matching a given status {@link QueryTran.StatusOptions} for in an IMS System.
     * 
     * The query is sent to the IMS (imsName) within the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered IMSA and IMSB and the 
     * imsName is set to IMSA, then the result include responses for IMSA only.
     * 
     * This service is a live only call to Operations Manager, there is no cache involved. {@link InteractionMode} is not supported for this
     * service.
     * 
     * @param queryTranStatuses
     * @param imsName
     * @return
     * @throws OmException
     * @throws OmConnectionException
     * </pre>
     * @throws OmDatastoreException
     */
    public Collection<Transaction> getTransactionsByStatus(QueryTran.StatusOptions[] queryTranStatuses, String[] imsName) throws OmException,
            OmConnectionException, OmDatastoreException;

    /**
     * <pre>
     * Returns a collection of transactions containing the name of the program that is associated with all 
     * transactions in the IMSplex. This name matches the PSB name in ACBLIB. SHOW(PSB) is an alias of SHOW(PGM).
     * 
     * This is useful if you want to see which programs are used by a particular transaction. 
     * Returns related programs for all transactions in the IMSplex. This is useful if you want to see which programs 
     * are used by a particular transaction. 
     * 
     * The query is sent to all IMSs registered with the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered IMSA and IMSB then 
     * the result include responses for both IMSA and IMSB.
     * 
     * This service is a live only call to Operations Manager, there is no cache involved. {@link InteractionMode} 
     * is not supported for this service.
     * 
     * @return
     * @throws OmException
     * @throws OmConnectionException
     * </pre>
     * @throws OmDatastoreException
     */
    public Collection<Transaction> getTransactionPrograms() throws OmException, OmConnectionException, OmDatastoreException;

    /**
     * <pre>
     * Returns related programs for a set of transaction(s) in the IMSplex. This is useful if you want to see 
     * which programs are used by a particular transaction. 
     * 
     * The query is sent to all IMSs registered with the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered IMSA and IMSB then 
     * the result include responses for both IMSA and IMSB.
     * 
     * This service is a live only call to Operations Manager, there is no cache involved. {@link InteractionMode} 
     * is not supported for this service.
     * 
     * @param transactionNames
     * @return
     * @throws OmException
     * @throws OmConnectionException
     * </pre>
     * @throws OmDatastoreException
     */
    public Collection<Transaction> getTransactionPrograms(String[] transactions) throws OmException, OmConnectionException, OmDatastoreException;

    /**
     * <pre>
     * Returns related programs for a set of transaction(s) in an IMS System. This is useful if you want to see 
     * which programs are used by a particular transaction. 
     * 
     * The query is sent to the IMS (imsname) within the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered IMSA and IMSB and the 
     * imsname is set to IMSA, then the result include responses for IMSA only.
     * 
     * This service is a live only call to Operations Manager, there is no cache involved. {@link InteractionMode} 
     * is not supported for this service.
     * 
     * @param transactionNames
     * @param imsName
     * @return
     * @throws OmException
     * @throws OmConnectionException
     * </pre>
     * @throws OmDatastoreException
     */
    public Collection<Transaction> getTransactionPrograms(String[] transactionNames, String[] imsName) throws OmException, OmConnectionException,
            OmDatastoreException;

/**
     * This method will discover all transactions for an IMS System and cache them in our local database. After discovery
     * has been invoked, the services that support {@link InteractionMode) will interact with the local cache when answering
     * queries. This improves performance and reduces the overall cost to run queries. 
     * 
     * Once discovery has been invoked you can re-discover changes in the IMS System by running the method again as many
     * times as needed.
     * 
     * @param imsName
     * @return
     * @throws OmDatastoreException
     * @throws OmException
     * @throws OmConnectionException
     */
    public int discoverTransactions(String imsName) throws OmDatastoreException, OmException, OmConnectionException;

/**
     * This method will discover all transactions for an IMSplex and cache them in our local database. After discovery
     * has been invoked, the services that support {@link InteractionMode) will interact with the local cache when answering
     * queries. This improves performance and reduces the overall cost to run queries. 
     * 
     * Once discovery has been invoked you can re-discover changes in the IMS System by running the method again as many
     * times as needed.
     * @return
     * @throws OmDatastoreException
     * @throws OmException
     * @throws OmConnectionException
     */
    public int discoverTransactions() throws OmDatastoreException, OmException, OmConnectionException;

    @Deprecated
    public Collection<Transaction> stopTransactions(String[] transactions, _STOP[] values, String[] imsName) throws OmException, OmConnectionException,
            OmDatastoreException;

    @Deprecated
    public Collection<Transaction> startTransactions(String[] transactions, _START[] values, String[] imsName) throws OmException, OmConnectionException,
            OmDatastoreException;

    public Collection<Transaction> getTransactionsForProgram(Program program, String[] imsSystemName) throws OmException, OmConnectionException,
            OmDatastoreException;

    /**
     * Returns repo info for the transactions in the IMSplex.
     * 
     * The query is sent to the IMS (imsName) within the IMSplex that is configured for repo.This info can be got thru
     * the IMSPlex node. This service will interact with a local cache, when there is an interaction with a local cache
     * the behavior can be overridden to behave differently. To do so, you can set the interaction mode with {@link
     * Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE},
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
     * @param imsName
     * @return
     * @throws OmException
     * @throws OmDatastoreException
     */
    public Collection<Transaction> getTransactionsWithRepoInfo(String[] imsSystemName) throws OmException, OmDatastoreException, OmConnectionException;

    /**
     * Returns repo info for the transactions in the IMSplex. THIs service will call the Ims Service and understand
     * which are the IMS that that repository configured and use one of them as route to get the transaction information
     * on Repo The query is sent to the IMS (imsName) within the IMSplex that is configured for repo.This info can be
     * got thru the IMSPlex node. This service will interact with a local cache, when there is an interaction with a
     * local cache the behavior can be overridden to behave differently. To do so, you can set the interaction mode with
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE},
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
     * @return
     * @throws OmException
     * @throws OmDatastoreException
     */
    public Collection<Transaction> getTransactionsWithRepoInfo() throws OmException, OmDatastoreException, OmConnectionException;

/**
	   * This method will discover all transactions with Repo enabled and exported for an IMS System and cache them in our local database. After discovery
	   * has been invoked, the services that support {@link InteractionMode) will interact with the local cache when answering
	   * queries. This improves performance and reduces the overall cost to run queries. 
	   * 
	   * Once discovery has been invoked you can re-discover changes in the IMS System by running the method again as many
	   * times as needed.
	   * 
	   * @param imsName
	   * @return
	   * @throws OmDatastoreException
	   * @throws OmException
	   * @throws OmConnectionException
	   */
    //	  private int discoverTransactionsWithRepoInfo(String imsName) throws OmDatastoreException, OmException, OmConnectionException;

/**
	   * This method will discover all transactions with Repo enabled and exported for an IMSplex and cache them in our local database. After discovery
	   * has been invoked, the services that support {@link InteractionMode) will interact with the local cache when answering
	   * queries. This improves performance and reduces the overall cost to run queries. 
	   * 
	   * Once discovery has been invoked you can re-discover changes in the IMS System by running the method again as many
	   * times as needed.
	   * @return
	   * @throws OmDatastoreException
	   * @throws OmException
	   * @throws OmConnectionException
	   */
    public int discoverTransactionsWithRepoInfo() throws OmDatastoreException, OmException, OmConnectionException;

    /**
     * <pre>
     * Returns transactions matching that match the provided names for all IMS Systems in the PLEX with REPO. 
     * 
     * The query is sent to the IMS (imsName) within the IMSplex that is configured in the {@link OMConnection}
     * which will act as master and retrieve data for all the IMSs with REPO.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered IMSA and IMSB and the 
     * imsName is set to IMSA, then the result include responses for IMSA only.
     * 
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
     * @param transactionNames
     * @param imsName
     * @return
     * @throws OmException
     * @throws OmConnectionException 
     * @throws OmDatastoreException
     * </pre>
     */
    public Collection<Transaction> getTransactionsByNameWithRepoInfo(String[] transactions, String[] imsName) throws OmException, OmConnectionException,
            OmDatastoreException;

    /**
     * <pre>
     * Returns transactions matching that match the provided names for all IMS Systems in the PLEX with REPO. 
     * 
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
     * @param transactionNames
     * @return
     * @throws OmException
     * @throws OmConnectionException 
     * @throws OmDatastoreException
     * </pre>
     */
    public Collection<Transaction> getTransactionsByNameWithRepoInfo(String[] transactions) throws OmException, OmConnectionException, OmDatastoreException;

}
