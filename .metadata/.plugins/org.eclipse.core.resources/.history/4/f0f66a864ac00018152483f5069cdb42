/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.common.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Map;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ibm.ims.ea.base.version.Version;
import com.ibm.ims.ea.om.cmd.exceptions.OmCommandGenerationException;
import com.ibm.ims.ea.om.cmd.utilities.Type2CommandSerializable;
import com.ibm.ims.ea.om.cmd.v14.type2.Type2Command;
import com.ibm.ims.ea.om.cmd.v14.query.imscon.type.config.QueryImsConTypeConfig;
import com.ibm.ims.ea.om.cmd.v14.query.imscon.type.rmtimscon.QueryImsConTypeRmtImsCon;
import com.ibm.ims.ea.om.cmd.v14.query.imsplex.QueryImsPlex;
import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.common.exception.OmRuntimeException;
import com.ibm.ims.ea.om.common.result.OmResultSet;
import com.ibm.ims.ea.om.common.service.IconService;
import com.ibm.ims.ea.om.datastore.ImsBaseDastoreConstants;
import com.ibm.ims.ea.om.icon.Iconnect;
import com.ibm.ims.ea.om.icon.query.IconQueryCommandBuilder;
import com.ibm.ims.ea.om.icon.query.client.IconClientQueryCommandBuilder;
import com.ibm.ims.ea.om.icon.query.config.IconConfigQueryCommandBuilder;
import com.ibm.ims.ea.om.icon.query.imsplex.IconImsplexQueryCommandBuilder;
import com.ibm.ims.ea.om.icon.query.port.IconPortQueryCommandBuilder;
import com.ibm.ims.ea.om.icon.query.port.IconPortQueryCommand.ICON_PORT_NAME;
import com.ibm.ims.ea.om.icon.query.client.IconClientQueryCommand.SHOW;
import com.ibm.ims.ea.om.icon.query.datastore.IconDatastoreQueryCommand;
import com.ibm.ims.ea.om.icon.query.datastore.IconDatastoreQueryCommandBuilder;
import com.ibm.ims.ea.om.icon.query.odbm.IconOdbmQueryCommand;
import com.ibm.ims.ea.om.icon.query.odbm.IconOdbmQueryCommandBuilder;
import com.ibm.ims.ea.om.icon.query.rmtimscon.IconRmtImsConQueryCommand;
import com.ibm.ims.ea.om.icon.query.rmtimscon.IconRmtImsConQueryCommandBuilder;
/**
 * <pre>
 * Class provides methods to interact with OM for IMS Connect Resource type. 
 * Return types are generalized for all interactions as a Collection of {@link Icon} objects. 
 * 
 * It should be noted that the Collection only manages the response for the particular 
 * resource and that OM Messages including Reason Codes, Reason Text, etc are accessible 
 * from the {@link Om} instance managing the interaction. 
 * 
 * See  <code>{@link Om#getOmMessageContexts()} </code> on how to access OM Messages.
 * </pre>
 * 
 * @author ddimatos
 *
 */
public final class IconServices extends ServicesHelper implements IconService{

	private static final Logger logger = LoggerFactory.getLogger(IconServices.class);

	//This must remain protected else the Om instance will not be able to aggregate all the Om Messages
	protected IconServices(Om om) {
		super(om); 

		try {
			this.resourceVersion = om.getImsplexService().getResourceVersions(new QueryImsPlex.TypeOptions[]{QueryImsPlex.TypeOptions.IMSCON});
		} catch (Exception e) {
			version = Version.IMS_ZERO_RELEASE;
		}
	}

	@Override
	public IconExtendedServices getExtendedIconServices() {
		return new IconExtendedServices(om);
	}

	@Override
	public Collection<Iconnect> getImsplex() throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getImsplex()");

		//Note the method key to be used for associating the service
		String methodKey = "getImsplex";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.resourceVersion.get("latestResourceVersion");

			//Create a instance of the command builder
			IconImsplexQueryCommandBuilder iconImsplexCommandBuilder = new IconQueryCommandBuilder().getIconImsplexCommandBuilder();

			//Instruct the command builder to create a custom command or you can use one of the predefined ones.
			String cmd = iconImsplexCommandBuilder.commandShowAll();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);

		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getImsplex()");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	@Override
	public Collection<Iconnect> getImsplex(String[] imsConnectName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getImsplex("+imsConnectName+")");

		//Note the method key to be used for associating the service
		String methodKey = "getImsplex";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsConnectName);

			//Create a instance of the command builder
			IconImsplexQueryCommandBuilder iconImsplexCommandBuilder = new IconQueryCommandBuilder().getIconImsplexCommandBuilder();

			//Instruct the command builder to create a custom command or you can use one of the predefined ones.
			String cmd = iconImsplexCommandBuilder.commandShowAll();
			iconImsplexCommandBuilder.setRoute(imsConnectName);
			cmd = iconImsplexCommandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);

		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getImsplex("+imsConnectName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	@Override
	public Collection<Iconnect> getConfig() throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getConfig()");

		//Note the method key to be used for associating the service
		String methodKey = "getConfig";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.resourceVersion.get("latestResourceVersion");

			//Create a instance of the command builder
			IconConfigQueryCommandBuilder iconConfigCommandBuilder = new IconQueryCommandBuilder().getIconConfigCommandBuilder();

			//Instruct the command builder to create a custom command or you can use one of the predefined ones.
			String cmd = iconConfigCommandBuilder.commandShowAll();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getConfig()");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	@Override
	public Collection<Iconnect> getPort() throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getPort()");

		//Note the method key to be used for associating the service
		String methodKey = "getPort";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.resourceVersion.get("latestResourceVersion");

			//Create a instance of the command builder
			IconPortQueryCommandBuilder iconPortCommandBuilder = new IconQueryCommandBuilder().getIconPortCommandBuilder();

			//Instruct the command builder to create a custom command or you can use one of the predefined ones.
			String cmd = iconPortCommandBuilder.commandShowAll();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);

		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getPort()");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	@Override
	public Collection<Iconnect> getPort(String port) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getPort("+port+")");

		//Note the method key to be used for associating the service
		String methodKey = "getPort";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Create a instance of the command builder
			IconPortQueryCommandBuilder iconPortCommandBuilder = new IconQueryCommandBuilder().getIconPortCommandBuilder();

			//Instruct the command builder to create a custom command or you can use one of the predefined ones.
			ICON_PORT_NAME.NAME.addName(new String[] {port});
			iconPortCommandBuilder.setName(new ICON_PORT_NAME[] {ICON_PORT_NAME.NAME, ICON_PORT_NAME.LOCAL});
			String cmd = iconPortCommandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);

		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getPort()");

			this.setOmInteractionContext(omResultSet, methodKey);
		}

	}

	@Override
	public Collection<Iconnect> getPort(String[] imsConnectName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getPort("+imsConnectName+")");

		//Note the method key to be used for associating the service
		String methodKey = "getPort";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsConnectName);

			//Create a instance of the command builder
			IconPortQueryCommandBuilder iconPortCommandBuilder = new IconQueryCommandBuilder().getIconPortCommandBuilder();

			//Instruct the command builder to create a custom command or you can use one of the predefined ones.
			String cmd = iconPortCommandBuilder.commandShowAll();
			iconPortCommandBuilder.setRoute(imsConnectName);
			cmd = iconPortCommandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);

		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getPort("+imsConnectName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * QUERY IMSCON TYPE(PORT) NAME(*) SHOW(SUMMARY,STATUS) ROUTE(route)
	// ************************************************************************************************************

	@Override
	public Collection<Iconnect> getPortSummary(String[] imsConnectName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getPort("+imsConnectName+")");

		//Note the method key to be used for associating the service
		String methodKey =  "getPortSummary";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsConnectName);

			//Create a instance of the command builder
			IconPortQueryCommandBuilder iconPortCommandBuilder = new IconQueryCommandBuilder().getIconPortCommandBuilder();

			//Instruct the command builder to create a custom command or you can use one of the predefined ones.
			String cmd = iconPortCommandBuilder.commandShowSummaryStatus();
			iconPortCommandBuilder.setRoute(imsConnectName);
			cmd = iconPortCommandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);

		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getPort("+imsConnectName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	@Override
	public Collection<Iconnect> getClient() throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getClient()");

		//Note the method key to be used for associating the service
		String methodKey =  "getClient";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.resourceVersion.get("latestResourceVersion");

			IconClientQueryCommandBuilder iconClientCommandBuilder = new IconClientQueryCommandBuilder();
			iconClientCommandBuilder.setName(new String[] {IconClientQueryCommandBuilder.STAR});
			iconClientCommandBuilder.setShow(new SHOW[] {SHOW.ALL});
			String cmd = iconClientCommandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getClient()");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * QUERY IMSCON TYPE(CLIENT) NAME(*) SHOW(ALL)
	// ************************************************************************************************************

	@Override
	public Collection<Iconnect> getClient(String[] names) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getClient("+names+")");

		//Note the method key to be used for associating the service
		String methodKey =  "getClient";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.resourceVersion.get("latestResourceVersion");

			IconClientQueryCommandBuilder iconClientCommandBuilder = new IconClientQueryCommandBuilder();
			iconClientCommandBuilder.setName(names);
			iconClientCommandBuilder.setShow(new SHOW[] {SHOW.ALL});
			String cmd = iconClientCommandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getClient("+names+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}


	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * QUERY IMSCON TYPE(DATASTORE) NAME(*) SHOW(ALL)
	// ************************************************************************************************************
	@Override
	public Collection<Iconnect> getDatastore() throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getDatastores()");

		//Note the method key to be used for associating the service
		String methodKey =  "getDatastore";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.resourceVersion.get("latestResourceVersion");

			IconDatastoreQueryCommandBuilder commandBuilder = new IconDatastoreQueryCommandBuilder();
			commandBuilder.setName(new String[] {IconClientQueryCommandBuilder.STAR});
			commandBuilder.setShow(new IconDatastoreQueryCommand.SHOW[] {IconDatastoreQueryCommand.SHOW.ALL});
			String cmd = commandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getDatastores()");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	@Override
	public Collection<Iconnect> getDatastoreByName(String[] datastoreName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getDatastores()");

		//Note the method key to be used for associating the service
		String methodKey =  "getDatastoreByName";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.resourceVersion.get("latestResourceVersion");

			IconDatastoreQueryCommandBuilder commandBuilder = new IconDatastoreQueryCommandBuilder();
			commandBuilder.setName(datastoreName);
			commandBuilder.setShow(new IconDatastoreQueryCommand.SHOW[] {IconDatastoreQueryCommand.SHOW.ALL});
			String cmd = commandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getDatastores()");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get database by Name using OM Query 
	// * QUERY IMSCON TYPE(DATASTORE) NAME(ds_name) SHOW(show) ROUTE(route)
	// ************************************************************************************************************

	@Override
	public Collection<Iconnect> getDatastore(String[] imsConnectName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getDatastores("+imsConnectName+")");

		//Note the method key to be used for associating the service
		String methodKey =  "getDatastore";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsConnectName);

			IconDatastoreQueryCommandBuilder commandBuilder = new IconDatastoreQueryCommandBuilder();
			commandBuilder.setShow(new IconDatastoreQueryCommand.SHOW[] {IconDatastoreQueryCommand.SHOW.ALL});
			commandBuilder.setRoute(imsConnectName);
			String cmd = commandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getDatastores("+imsConnectName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}


	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * QUERY IMSCON TYPE(ODBM) NAME(*) SHOW(ALL)
	// ************************************************************************************************************
	@Override
	public Collection<Iconnect> getOdbm() throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getOdbms()");

		//Note the method key to be used for associating the service
		String methodKey =  "getOdbm";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.resourceVersion.get("latestResourceVersion");

			IconOdbmQueryCommandBuilder commandBuilder = new IconOdbmQueryCommandBuilder();
			commandBuilder.setName(new String[] {IconOdbmQueryCommandBuilder.STAR});
			commandBuilder.setShow(new IconOdbmQueryCommand.SHOW[] {IconOdbmQueryCommand.SHOW.ALL});
			String cmd = commandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);

		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getOdbms()");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * QUERY IMSCON TYPE(ODBM) NAME(*) SHOW(ALL)
	// ************************************************************************************************************
	@Override
	public Collection<Iconnect> getOdbm(String[] imsConnectName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getOdbms("+imsConnectName+")");

		//Note the method key to be used for associating the service
		String methodKey =  "getOdbm";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsConnectName);
			IconOdbmQueryCommandBuilder commandBuilder = new IconOdbmQueryCommandBuilder();
			commandBuilder.setShow(new IconOdbmQueryCommand.SHOW[] {IconOdbmQueryCommand.SHOW.ALL});
			commandBuilder.setRoute(imsConnectName);
			String cmd = commandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);

		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getOdbms("+imsConnectName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * QUERY IMSCON TYPE(RMTIMSCON) NAME(*) SHOW(ALL)
	// ************************************************************************************************************
	@Override
	public Collection<Iconnect> getRmtImsCon() throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getRmtImsCons()");

		//Note the method key to be used for associating the service
		String methodKey =  "getRmtImsCon";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{ 
			//Set and configure the version using mapped resource version and the route name
			this.version = this.resourceVersion.get("latestResourceVersion");

			IconRmtImsConQueryCommandBuilder commandBuilder = new IconRmtImsConQueryCommandBuilder();
			commandBuilder.setName(new String[] {IconRmtImsConQueryCommandBuilder.STAR});
			commandBuilder.setShow(new IconRmtImsConQueryCommand.SHOW[] {IconRmtImsConQueryCommand.SHOW.ALL});
			String cmd = commandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);

		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getRmtImsCons()");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * QUERY IMSCON TYPE(RMTIMSCON) NAME(*) SHOW(show) ROUTE(route)
	// ************************************************************************************************************
	@Override
	public Collection<Iconnect> getRmtImsCon(String[] imsConnectName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getRmtImsCons("+imsConnectName+")");

		//Note the method key to be used for associating the service
		String methodKey =  "getRmtImsCon";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsConnectName);

			IconRmtImsConQueryCommandBuilder commandBuilder = new IconRmtImsConQueryCommandBuilder();
			commandBuilder.setShow(new IconRmtImsConQueryCommand.SHOW[] {IconRmtImsConQueryCommand.SHOW.ALL});
			commandBuilder.setRoute(imsConnectName);
			String cmd = commandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getRmtImsCons("+imsConnectName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * QUERY IMSCON TYPE(RMTIMSCON) NAME(*) SHOW(SUMMARY,STATUS,HOSTNAME,IPADDR,PORT) ROUTE(route)
	// ************************************************************************************************************
	@Override
	public Collection<Iconnect> getRmtImsConSummary(String[] imsConnectName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getRmtImsCons("+imsConnectName+")");

		//Note the method key to be used for associating the service
		String methodKey =  "getRmtImsConSummary";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsConnectName);

			Type2Command type2Command = new Type2Command();
			type2Command.setVerb(Type2Command.VerbOptions.QUERY);
			type2Command.setResource(Type2Command.ResourceOptions.IMSCON);
			type2Command.getRoute().addAll(Arrays.asList(imsConnectName));
			
			QueryImsConTypeRmtImsCon rmtImsCon = new QueryImsConTypeRmtImsCon();
			rmtImsCon.setTYPE(QueryImsConTypeRmtImsCon.TypeOptions.RMTIMSCON);
			//rmtImsCon.getNAME().add(ImsCommandAttributes.ASTERISK);
			rmtImsCon.getSHOW().addAll(Arrays.asList(new QueryImsConTypeRmtImsCon.ShowOptions[] {QueryImsConTypeRmtImsCon.ShowOptions.SUMMARY, QueryImsConTypeRmtImsCon.ShowOptions.STATUS,
					QueryImsConTypeRmtImsCon.ShowOptions.HOSTNAME, QueryImsConTypeRmtImsCon.ShowOptions.IPADDR, QueryImsConTypeRmtImsCon.ShowOptions.PORT}));
			type2Command.setQueryImsConTypeRmtImsCon(rmtImsCon);
			
			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
			
		}catch (OmCommandGenerationException e) {
			throw new OmRuntimeException(e);
			
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getRmtImsCons("+imsConnectName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * UPDATE IMSCON TYPE(IMSPLEX) NAME(imsplexName) START(COMM)
	// ************************************************************************************************************

	@Override
	public Collection<Iconnect> startImsplexsCommunication(String[] imsplexName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> startImsplexsCommunication("+imsplexName+")");

		//Note the method key to be used for associating the service
		String methodKey =  "startImsplexsCommunication";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			String cmd ="CMD(UPDATE IMSCON TYPE(IMSPLEX) NAME(";

			int nPlexName = imsplexName.length;
			int counter =0;

			while(counter < nPlexName)
			{       
				cmd = cmd+imsplexName[counter];
				counter = counter +1;
				if(counter == nPlexName)
					cmd = cmd + ") START(COMM))";
				else
					cmd = cmd +",";
			}

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< startImsplexsCommunication("+imsplexName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * UPDATE IMSCON TYPE(IMSPLEX) NAME(imsplexName) STOP(COMM)
	// ************************************************************************************************************

	@Override
	public Collection<Iconnect> stopImsplexsCommunication(String[] imsplexName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> stopImsplexsCommunication("+imsplexName+")");

		//Note the method key to be used for associating the service
		String methodKey =  "stopImsplexsCommunication";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			String cmd ="CMD(UPDATE IMSCON TYPE(IMSPLEX) NAME(";

			int nPlexName = imsplexName.length;
			int counter =0;

			while(counter < nPlexName)
			{       
				cmd = cmd+imsplexName[counter];
				counter = counter +1;
				if(counter == nPlexName)
					cmd = cmd + ") STOP(COMM))";
				else
					cmd = cmd +",";
			}


			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< stopImsplexsCommunication("+imsplexName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * UPDATE IMSCON TYPE(PORT) NAME(portName) START(COMM)
	// ************************************************************************************************************

	@Override
	public Collection<Iconnect> startPortsCommunication(String[] portName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> startPortsCommunication("+portName+")");

		//Note the method key to be used for associating the service
		String methodKey =  "startPortsCommunication";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			String cmd ="CMD(UPDATE IMSCON TYPE(PORT) NAME(";

			int nPortName = portName.length;
			int counter =0;

			while(counter < nPortName)
			{       
				cmd = cmd+portName[counter];
				counter = counter +1;
				if(counter == nPortName)
					cmd = cmd + ") START(COMM))";
				else
					cmd = cmd +",";
			}


			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< startPortsCommunication("+portName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * UPDATE IMSCON TYPE(PORT) NAME(portName) STOP(COMM)
	// ************************************************************************************************************
	@Override
	public Collection<Iconnect> stopPortsCommunication(String[] portName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> stopPortsCommunication("+portName+")");

		//Note the method key to be used for associating the service
		String methodKey =  "stopPortsCommunication";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			String cmd ="CMD(UPDATE IMSCON TYPE(PORT) NAME(";

			int nPortName = portName.length;
			int counter =0;

			while(counter < nPortName)
			{       
				cmd = cmd+portName[counter];
				counter = counter +1;
				if(counter == nPortName)
					cmd = cmd + ") STOP(COMM))";
				else
					cmd = cmd +",";
			}

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< stopPortsCommunication("+portName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * UPDATE IMSCON TYPE(DATASTORE) NAME(datastoreName) START(COMM)
	// ************************************************************************************************************
	@Override
	public Collection<Iconnect> startDatastoresCommunication(String[] datastoreName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> startDatastoresCommunication("+datastoreName+")");

		//Note the method key to be used for associating the service
		String methodKey =  "startDatastoresCommunication";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			String cmd ="CMD(UPDATE IMSCON TYPE(DATASTORE) NAME(";

			int nDatastoreName = datastoreName.length;
			int counter =0;

			while(counter < nDatastoreName)
			{       
				cmd = cmd+datastoreName[counter];
				counter = counter +1;
				if(counter == nDatastoreName)
					cmd = cmd + ") START(COMM))";
				else
					cmd = cmd +",";
			}

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< startDatastoresCommunication("+datastoreName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * UPDATE IMSCON TYPE(DATASTORE) NAME(datastoreName) STOP(COMM)
	// ************************************************************************************************************
	@Override
	public Collection<Iconnect> stopDatastoresCommunication(String[] datastoreName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> stopDatastoresCommunication("+datastoreName+")");

		//Note the method key to be used for associating the service
		String methodKey =  "stopDatastoresCommunication";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			String cmd ="CMD(UPDATE IMSCON TYPE(DATASTORE) NAME(";

			int nDatastoreName = datastoreName.length;
			int counter =0;

			while(counter < nDatastoreName)
			{       
				cmd = cmd+datastoreName[counter];
				counter = counter +1;
				if(counter == nDatastoreName)
					cmd = cmd + ") STOP(COMM))";
				else
					cmd = cmd +",";
			}


			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);

		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< stopDatastoresCommunication("+datastoreName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * UPDATE IMSCON TYPE(ODBM) NAME(odbmName) START(COMM)
	// ************************************************************************************************************
	@Override
	public Collection<Iconnect> startOdbmsCommunication(String[] odbmName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> startOdbmsCommunication("+odbmName+")");

		//Note the method key to be used for associating the service
		String methodKey =  "startOdbmsCommunication";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			String cmd ="CMD(UPDATE IMSCON TYPE(ODBM) NAME(";

			int nOdbmName = odbmName.length;
			int counter =0;

			while(counter < nOdbmName)
			{       
				cmd = cmd+odbmName[counter];
				counter = counter +1;
				if(counter == nOdbmName)
					cmd = cmd + ") START(COMM))";
				else
					cmd = cmd +",";
			}

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);

		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< startOdbmsCommunication("+odbmName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * UPDATE IMSCON TYPE(ODBM) NAME(odbmName) STOP(COMM)
	// ************************************************************************************************************
	@Override
	public Collection<Iconnect> stopOdbmsCommunication(String[] odbmName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> stopOdbmsCommunication("+odbmName+")");

		//Note the method key to be used for associating the service
		String methodKey =  "stopOdbmsCommunication";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{

			String cmd ="CMD(UPDATE IMSCON TYPE(ODBM) NAME(";

			int nOdbmName = odbmName.length;
			int counter =0;

			while(counter < nOdbmName)
			{       
				cmd = cmd+odbmName[counter];
				counter = counter +1;
				if(counter == nOdbmName)
					cmd = cmd + ") STOP(COMM))";
				else
					cmd = cmd +",";
			}


			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);;

			return propertiesToCollection(omResultSet);

		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< stopOdbmsCommunication("+odbmName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * UPDATE IMSCON TYPE(RMTIMSCON) NAME(imsconName) START(COMM)
	// ************************************************************************************************************
	@Override
	public Collection<Iconnect> startRmtImsConsCommunication(String[] imsConName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> startRmtImsConsCommunication("+imsConName+")");

		//Note the method key to be used for associating the service
		String methodKey =  "startRmtImsConsCommunication";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{

			String cmd ="CMD(UPDATE IMSCON TYPE(RMTIMSCON) NAME(";

			int nImsConName = imsConName.length;
			int counter =0;

			while(counter < nImsConName)
			{       
				cmd = cmd+imsConName[counter];
				counter = counter +1;
				if(counter == nImsConName)
					cmd = cmd + ") START(COMM))";
				else
					cmd = cmd +",";
			}

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< startRmtImsConsCommunication("+imsConName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get listing of databases using OM Query:
	// * UPDATE IMSCON TYPE(RMTIMSCON) NAME(imsconName) STOP(COMM)
	// ************************************************************************************************************

	@Override
	public Collection<Iconnect> stopRmtImsConsCommunication(String[] imsConName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> stopRmtImsConsCommunication("+imsConName+")");

		//Note the method key to be used for associating the service
		String methodKey =  "stopRmtImsConsCommunication";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			String cmd ="CMD(UPDATE IMSCON TYPE(RMTIMSCON) NAME(";

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< stopRmtImsConsCommunication("+imsConName+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	@Override
	public Collection<Iconnect> getConfig(String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getConfig(" + Arrays.toString(imsSystemName)+")");

		//Note the method key to be used for associating the service
		String methodKey =  "getConfig";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try {
			QueryImsConTypeConfig queryImsConTypeConfig = new QueryImsConTypeConfig();
			queryImsConTypeConfig.getSHOW().add(QueryImsConTypeConfig.ShowOptions.ALL);

			Type2Command type2Command = new Type2Command();
			type2Command.setVerb(Type2Command.VerbOptions.QUERY);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));
			type2Command.setResource(Type2Command.ResourceOptions.IMSCON);
			type2Command.setQueryImsConTypeConfig(queryImsConTypeConfig);


			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		} catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getConfig(" + Arrays.toString(imsSystemName)+")");

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	/**
	 * Method will map a omResulset to a collection of imsplex beans. It will also
	 * append to each bean the sysplex and imsplex name. 
	 * @param omResultSet
	 * @return
	 */
	private Collection<Iconnect> propertiesToCollection(OmResultSet omResultSet) {
		Collection<Iconnect> tempList = new ArrayList<Iconnect>();

		Properties[] properties = omResultSet.getResponseProperties();

		for (Properties p : properties) {
			Iconnect iconnect = new Iconnect();
			iconnect.setMap((Map)p);
			iconnect.getMap().put(ImsBaseDastoreConstants.SYSPLEX_ID, omResultSet.getEnvironment());
			//This check ensures that we don't overwrite the IMSPLX key for the ICON commands. We don't need to add our own IMSPLX key if there is one there
			//It will make things break. 
			if(p.getProperty(ImsBaseDastoreConstants.IMSPLX.toString()) == null || p.getProperty(ImsBaseDastoreConstants.IMSPLX.toString()).isEmpty()){
				iconnect.getMap().put(ImsBaseDastoreConstants.IMSPLX, omResultSet.getImsplex());
			}
			tempList.add(iconnect);
		}

		return tempList;
	}
}
