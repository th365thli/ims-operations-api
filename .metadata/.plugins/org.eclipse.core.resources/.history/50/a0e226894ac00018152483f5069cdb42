/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.common.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ibm.ims.ea.base.version.Version;
import com.ibm.ims.ea.om.cmd.v14.query.imsplex.QueryImsPlex;
import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.common.result.OmResultSet;
import com.ibm.ims.ea.om.common.service.ReconService;
import com.ibm.ims.ea.om.rm.list.Rcn;
import com.ibm.ims.ea.om.rm.list.ReconCommandBuilder;
import com.ibm.ims.ea.om.rm.list.Rcn.RcnResponseAttribute;
import com.ibm.ims.ea.om.rm.list.ReconCommandBuilder.RECON_ARG_1;

/**
 * <pre>
 * Class provides methods to interact with IMS RECON's. 
 * Return types are generalized for all interactions as a Collection of {@link Recon} objects. 
 * 
 * It should be noted that the Collection only manages the response for the particular 
 * resource and that OM Messages including Reason Codes, Reason Text, etc are accessible 
 * from the {@link Om} instance managing the interaction. 
 * 
 * See  <code>{@link Om#getOmMessageContexts()} </code> on how to access OM Messages.
 * </pre>
 * 
 * @author ddimatos
 *
 */
public final class ReconServices extends ServicesHelper implements ReconService {

    private static final Logger logger = LoggerFactory.getLogger(ReconServices.class);
    
    /** This must remain protected else the Om instance will not be able to aggregate all the Om Messages **/
    protected ReconServices(Om om) {
        super(om);
        
		try {
			this.resourceVersion = om.getImsplexService().getResourceVersions(new QueryImsPlex.TypeOptions[]{QueryImsPlex.TypeOptions.IMS});
		} catch (Exception e) {
			version = Version.IMS_ZERO_RELEASE;
		}
    }

    @Override
    public Collection<Rcn> getImsReconList() throws OmException, OmConnectionException, OmDatastoreException {
       return getImsReconList(new String[]{ReconCommandBuilder.STAR});
    }

    @Override
    public Collection<Rcn> getImsReconList(String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
        if (logger.isDebugEnabled()) logger.debug(">> getImsReconList(" + Arrays.toString(imsSystemName) + ")");
        
		//Note the method key to be used for associating the service
		String methodKey = "getImsReconList";
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
		
        try{
        	imsSystemName = this.routeMemberFormater(imsSystemName);
        	
        	//Set and configure the version using mapped resource version and the route name
        	this.version = this.setVersion(this.resourceVersion , imsSystemName);
        	
	        ReconCommandBuilder rmcmdb = new ReconCommandBuilder();
	        rmcmdb.setReconArg1(RECON_ARG_1.STATUS);
	        rmcmdb.setRoute(imsSystemName);
	        String cmd = rmcmdb.getCommand(); //CMD(/RMLIST DBRC='RECON STATUS'.)
	
			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);
	
			return propertiesToCollectionRecon(omResultSet.getResponseProperties());
        }finally{
        	if (logger.isDebugEnabled()) logger.debug("<< getImsReconList(" + Arrays.toString(imsSystemName) + ")");
			
			//omResultSet.getOmInteractionContext().setImsAttributes(??????);
			
			//Set the method key to the interaction so we know which one it is when we toString()
			omResultSet.getOmInteractionContext().setIdentifier(methodKey);
			
			//Set the version manually for now till we can figure out how to have headers and use the other methods in the serviceshelper class.
			omResultSet.getOmInteractionContext().setResourceVersion(this.version.toString());
			
			//Set the interaction context for this omResultSet into the parent Om instance
			om.addOmInteractionContext(methodKey, omResultSet.getOmInteractionContext());
        }
    }
    
    private Collection<Rcn> propertiesToCollectionRecon(Properties[] responseProperties) {
        ArrayList<Rcn> reconList = new ArrayList<Rcn>();
        int responsePropertiesLength = responseProperties.length;
        Rcn rcn = null;
        String value = "";
        String key = "";

        for (int i = 0; i < responsePropertiesLength; i++) {
            Enumeration<Object> em = responseProperties[i].keys();
            HashMap<String, String> recon = new HashMap<String, String>();
            while (em.hasMoreElements()) {
                key = (String) em.nextElement();
                value = (String) responseProperties[i].get(key);

                //Split the value so we can better manage the result
                String[] result = value.split("\n"); //Modified from "," to "\n"

                //Check the value/result to find indexes that have keywords RECON in them
                String[] resultRecon1 = hasString(result, "RECON1"); //[RECON1,COPY1,IMSTESTS.DSHR.RECON1]
                String[] resultRecon2 = hasString(result, "RECON2"); //[RECON2,COPY2,IMSTESTS.DSHR.RECON2]
                String[] resultRecon3 = hasString(result, "RECON3"); //[RECON3,SPARE,IMSTESTS.DSHR.RECON3]

                //Set the Recon object with the appropriate values
                if (resultRecon1.length == 3) {
                    recon.put(RcnResponseAttribute.RECON_1_NAME.name(), resultRecon1[0]);
                    recon.put(RcnResponseAttribute.RECON_1_STATUS.name(), resultRecon1[1]);
                    recon.put(RcnResponseAttribute.RECON_1_DSN.name(), resultRecon1[2]);
                }

                if (resultRecon2.length == 3) {
                    recon.put(RcnResponseAttribute.RECON_2_NAME.name(), resultRecon2[0]);
                    recon.put(RcnResponseAttribute.RECON_2_STATUS.name(), resultRecon2[1]);
                    recon.put(RcnResponseAttribute.RECON_2_DSN.name(), resultRecon2[2]);
                }

                if (resultRecon3.length == 3) {
                    recon.put(RcnResponseAttribute.RECON_3_NAME.name(), resultRecon3[0]);
                    recon.put(RcnResponseAttribute.RECON_3_STATUS.name(), resultRecon3[1]);
                    recon.put(RcnResponseAttribute.RECON_3_DSN.name(), resultRecon3[2]);
                }

                //Check/find the RECON Version
                String[] reconVersion = hasString(result, "IMS V"); //[IMS,V12R1]
                if (reconVersion.length == 2) {
                    recon.put(RcnResponseAttribute.RECON_LEVEL.name(), reconVersion[1]);
                }

                //Check find the RECON Minimum Version
                String[] minVersion = hasString(result, "MINIMUM VERSION"); //[MINIMUM,VERSION,=,10.1]
                // if(minVersion.length == 4){
                if (minVersion != null) {
                    recon.put(RcnResponseAttribute.RECON_MIN_VERSION.name(), minVersion[3]);
                }

                //Set the IMS for this RECON object
                recon.put(RcnResponseAttribute.RECON_IMS_NAME.name(), key);
            }
            rcn = new Rcn(recon);
            //Add it to the collection
            reconList.add(rcn);
        }
        return reconList;
    }

    /**
     * Method traverses an String[] searching each index to see if it contains keyword (match)
     * @param str
     * @param prefix
     * @return
     */
    private String[] hasString(String[] str, String match) {
        for (String result : str) {
            if (result.contains(match)) {
                return result.trim().split("\\s+"); //Should get: [RECON1,COPY1,IMSTESTS.DSHR.RECON1]
            }
        }
        return null;
    }
}
