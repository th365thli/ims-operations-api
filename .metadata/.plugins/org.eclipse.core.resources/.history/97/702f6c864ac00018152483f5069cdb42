/*********************************************************************************
* Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.common.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.Map;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ibm.im.ac.datastore.DatastoreException;
import com.ibm.ims.ea.base.version.Version;
import com.ibm.ims.ea.om.cmd.constants.ImsCommandAttributes;
import com.ibm.ims.ea.om.cmd.exceptions.OmCommandGenerationException;
import com.ibm.ims.ea.om.cmd.utilities.Type2CommandSerializable;
import com.ibm.ims.ea.om.cmd.v14.query.imsplex.QueryImsPlex;
import com.ibm.ims.ea.om.cmd.v14.query.member.QueryMember;
import com.ibm.ims.ea.om.cmd.v14.type2.Type2Command;
import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.common.exception.OmRuntimeException;
import com.ibm.ims.ea.om.common.message.OmInteractionContext;
import com.ibm.ims.ea.om.common.result.OmResultSet;
import com.ibm.ims.ea.om.common.service.MemberService;
import com.ibm.ims.ea.om.datastore.ImsBaseDastoreConstants;
import com.ibm.ims.ea.om.datastore.ImsOmDatastore;
import com.ibm.ims.ea.om.datastore.OmMemberTable;
import com.ibm.ims.ea.om.imsplex.Imsplex;
import com.ibm.ims.ea.om.member.Member;
import com.ibm.ims.ea.om.member.Member.MemberResponseAttribute;

/**
 * <pre>
 * Class provides methods to interact with OM for the IMS resource. 
 * Return types are generalized for all interactions as a Collection of {@link Imsplex} objects. 
 * 
 * It should be noted that the Collection only manages the response for the particular 
 * resource and that OM Messages including Reason Codes, Reason Text, etc are accessible 
 * from the {@link Om} instance managing the interaction. 
 * 
 * See  <code>{@link Om#getOmMessageContexts()} </code> on how to access OM Messages.
 * </pre>
 * 
 * @author ddgandhi
 *
 */
public final class MemberServices extends ServicesHelper implements MemberService {
    private static final Logger logger = LoggerFactory.getLogger(MemberServices.class);
    private static final String CSL = "CSL"; //Prefix used for IMSnames 
  
    //Statically build a mem-cache of all the known discovered meta-data about this service resulting from discovery
    static{
    	//Try to get an instance of the com.ibm.im.ac.datastore 
		ImsOmDatastore imsOMDatastore;
		try {
			imsOMDatastore = ImsOmDatastore.getInstance();
			
			//Build the meta-data for member table
			OmMemberTable omMemberTable = imsOMDatastore.getOmMemberStore();
			if(omMemberTable != null){
				omMemberTable.autoConfigureResourceMetaData();
			}
			
		} catch (DatastoreException e) {
			//This exception will only happen if dependency "com.ibm.im.ac.datastore" has not been
			//loaded by OSGI. Moving this logic to Declarative serivces might be a good option. 
			
			if(logger.isDebugEnabled()){
				logger.debug("Appears that the bundle for service com.ibm.im.ac.datastore.AbstractDatastore has not been loaded");
			}
		}
    }

    //This must remain protected else the Om instance will not be able to aggregate all the Om Messages
    protected MemberServices(Om om) {
    	super(om);
    	
		try {
			this.resourceVersion = om.getImsplexService().getResourceVersions(new QueryImsPlex.TypeOptions[]{QueryImsPlex.TypeOptions.IMS});
		} catch (Exception e) {
			version = Version.IMS_ZERO_RELEASE;
		}
    }

// ************************************************************************************************************
// * Get Member's 
// ************************************************************************************************************
    @Override
    public Collection<Member> getMember() throws OmException, OmConnectionException, OmDatastoreException {
    	if(logger.isDebugEnabled()) logger.debug(">> getMember()");
    	
    	try{
    		return getMember(new String[]{ImsCommandAttributes.ASTERISK});
    	}finally{
    		if(logger.isDebugEnabled()) logger.debug("<< getMember()");
    	}
    }

    @Override
    public Collection<Member> getMember(String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
        if (logger.isDebugEnabled()) logger.debug(">> getMember("+Arrays.toString(imsSystemName)+")"); 
        
        String imsplexNameTemp = CSL.concat(this.imsplexName);
        
        int resourceCacheSize = 0;
		Date date = null;
		ArrayList<String> imsAttributes = null;
		
		//Note the method key to be used for associating the service
		String methodKey = "getMember";
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
		
        try {
        	imsSystemName = this.routeMemberFormater(imsSystemName);
        	
        	//Set and configure the version using mapped resource version and the route name
        	this.version = this.setVersion(this.resourceVersion , imsSystemName);
        	
        	/** Case: If it is not live then enter this block otherwise drop down to the live code **/
        	if(!this.om.isInteractionModeLive()){

        		//Create a connection to OmMember table (cache) datastore 
        		OmMemberTable omMemberTable = ImsOmDatastore.getInstance().getOmMemberStore();

				//Size greater than 0 then transactions have been discovered
				resourceCacheSize = omMemberTable.getCountFromMemoryCache(this.sysplexId, imsplexNameTemp, imsSystemName);
				
				if( resourceCacheSize > 0){
					
					//Set the date the discovery was done
					date = omMemberTable.getLastestDateFromMemoryCache(sysplexId, imsplexNameTemp,imsSystemName);
					
					//Set the imsattributes that are in the memcache
					imsAttributes = ImsOmDatastore.getInstance().getGridHeaderTable().getGridHeadersMemCache(version.toString(), methodKey);
					
        			/** Case: interaction mode is DEFAULT **/
        			return omMemberTable.getMember(this.sysplexId, imsplexNameTemp, imsSystemName, this.om);
				}
        	}

        	/**Case: No discovery has been run, continue to operate without the cache (live mode)*/
        	//Query Member for SHOW(ALL) and status
        	Type2Command type2Command = new Type2Command();
        	type2Command.setVerb(Type2Command.VerbOptions.QUERY);
        	type2Command.setResource(Type2Command.ResourceOptions.MEMBER);
        	type2Command.getRoute().addAll(Arrays.asList(imsSystemName));
        	
        	QueryMember queryMember = new QueryMember();
        	queryMember.setTYPE(QueryMember.TypeOptions.IMS);
        	queryMember.getSHOW().add(QueryMember.ShowOptions.ALL); // SHOW(ALL) returns global and local values 
        	
        	type2Command.setQueryMember(queryMember);
        	
        	Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
        	String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);
        	
        	Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

            //Convert the omResponse to a collection to be returned
            return propertiesToCollection(omResultSet);
   		 
        } catch (OmDatastoreException e) {
        	e.setImsplexName(imsplexNameTemp);
        	throw e;
        } catch (DatastoreException e) {
        	throw convertDatatstoreException(e, this.sysplexId, imsplexNameTemp);
        } catch (OmCommandGenerationException e) {
        	throw new OmRuntimeException(e);
        } finally {
            if (logger.isDebugEnabled()) logger.debug("<< getMember("+Arrays.toString(imsSystemName)+")");
            
            this.setOmInteractionContext(omResultSet,resourceCacheSize, date, imsAttributes, methodKey);
        }
    }
    
// ************************************************************************************************************
// * Get Transaction Status
// ************************************************************************************************************

    @Override
    public Collection<Member> getMemberStatus() throws OmException, OmConnectionException, OmDatastoreException{
    	if(logger.isDebugEnabled()) logger.debug(">> getMemberStatus()");
    	
    	try{
    		return getMemberStatus(new String[]{ImsCommandAttributes.ASTERISK});
    	}finally{
    		if(logger.isDebugEnabled()) logger.debug("<< getMemberStatus()");
    	}
    }
    
    @Override
    public Collection<Member> getMemberStatus(String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException{
    	if(logger.isDebugEnabled()) logger.debug(">> getMemberStatus(" + Arrays.toString(imsSystemName)+")");
    	
    	//Note the method key to be used for associating the service
    	String methodKey = "getMemberStatus";
    			
    	//Local omresultSet otherwise we risk data corruption of the service is reused. 
    	OmResultSet omResultSet = null;
    	
    	try{
    		imsSystemName = this.routeMemberFormater(imsSystemName);
    		
    		//Set and configure the version using mapped resource version and the route name
    		this.version = this.setVersion(this.resourceVersion , imsSystemName);
    		
    		Type2Command type2Command = new Type2Command();
    		type2Command.setVerb(Type2Command.VerbOptions.QUERY);
    		type2Command.setResource(Type2Command.ResourceOptions.MEMBER);
    		type2Command.getRoute().addAll(Arrays.asList(imsSystemName));
    		
    		QueryMember queryMember = new QueryMember();
    		queryMember.setTYPE(QueryMember.TypeOptions.IMS);
    		queryMember.getSHOW().add(QueryMember.ShowOptions.STATUS);
    		
    		type2Command.setQueryMember(queryMember);
    		
    		Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
    		String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);
    		
    		Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);
    		
    		return propertiesToCollection(omResultSet);
    		
    	} catch(OmCommandGenerationException e){
    		throw new OmRuntimeException(e);
		}finally{
    		if(logger.isDebugEnabled()) logger.debug("<< getMemberStatus("+ Arrays.toString(imsSystemName)+")");
    		
    		this.setOmInteractionContext(omResultSet, methodKey);
    	}
    }
    
// ************************************************************************************************************
// * Discovery members
// ************************************************************************************************************
	
	@Override
	public int discoverMember() throws OmDatastoreException, OmException, OmConnectionException{
		if(logger.isDebugEnabled()) logger.debug(">> discoverMember()");
		
		try{
			Collection<Member> members = om.getMemberService().getMember();
			int insertionSize = 0;
			
			for(Member member: members){
				String mbrName = member.getProperty(MemberResponseAttribute.MBR);
				insertionSize += this.discoverMember(mbrName);
			}
			
			return insertionSize;
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< discoverMember()");
		}
	}
	    
    @Override
	public int discoverMember(String imsSystemName) throws OmDatastoreException, OmException, OmConnectionException {
    	if(logger.isDebugEnabled()) logger.debug(">> discoverMember("+ imsSystemName+")");
    	
		String imsplexNameTemp  = CSL.concat(this.imsplexName);
		int insertionSize   = 0;
		
		try {
			this.isDiscovering = true;
			this.om.setInteractionMode(Om.InteractionMode.LIVE);
			Collection<Member> member = this.getMember(new String[]{imsSystemName});
			this.om.setInteractionMode(Om.InteractionMode.DEFAULT);
			
			// Create a connection to the member table (cache) datastore
			OmMemberTable imsMemberTable = ImsOmDatastore.getInstance().getOmMemberStore();

			// Clear the Member cache
			imsMemberTable.deleteTable(this.sysplexId, imsplexNameTemp, imsSystemName);

			//Insert the response into Derby
			insertionSize = imsMemberTable.addMember(member, this.sysplexId, imsplexNameTemp);
			
			//Populate the meta-data with the latest update
			imsMemberTable.autoConfigureResourceMetaData(this.sysplexId, imsplexNameTemp, imsSystemName); 
			
			//Since the discovery was run in live mode, we need to add to the omInteractionContext the size and Date
			String[] imsSystemNameArray = new String[]{imsSystemName};
			int resourceCacheSize = imsMemberTable.getCountFromMemoryCache(sysplexId, imsplexNameTemp, imsSystemNameArray);
			Date date = imsMemberTable.getLastestDateFromMemoryCache(sysplexId, imsplexNameTemp, imsSystemNameArray);
			
			OmInteractionContext omInteractionContext = this.om.getOmInteractionContexts().get("getMember");
			omInteractionContext.setResourceLastUpdated(date);
			omInteractionContext.setResourceCacheSize(resourceCacheSize);
			
			return insertionSize;
		} catch (OmDatastoreException e) {
			e.setImsplexName(this.om.getOMConnection().getImsplex());
			throw e;
		} catch (DatastoreException e) {
			throw convertDatatstoreException(e, this.sysplexId, imsplexNameTemp);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< discoverMember("+ imsSystemName+")");
		}
	}
    
// ************************************************************************************************************
// * PRIVATE MEMBER HELPERS
// ************************************************************************************************************   
    /**
  	 * Method will map a omResulset to a collection of ims beans. It will also
  	 * append to each bean the sysplex and imsplex name. 
  	 * @param omResultSet
  	 * @return
  	 */
      private Collection<Member> propertiesToCollection(OmResultSet omResultSet) {
          Collection<Member> tempList = new ArrayList<Member>();

              Properties[] properties = omResultSet.getResponseProperties();

              for (Properties p : properties) {
            	  Member member = new Member();
            	  member.setMap((Map)p);
            	  member.getMap().put(ImsBaseDastoreConstants.SYSPLEX_ID, omResultSet.getEnvironment());
            	  member.getMap().put(ImsBaseDastoreConstants.IMSPLX, omResultSet.getImsplex());
                  tempList.add(member);
              }

          return tempList;
      }
}
