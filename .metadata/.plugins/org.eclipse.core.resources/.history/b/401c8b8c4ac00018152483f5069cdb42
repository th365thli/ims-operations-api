/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.common;

import java.util.ArrayList;

/**
 * <pre>
 * Abstract class to be used by TYPE2 command builders. Provides foundation common across all TYPE2
 * and necessary meta-data to note the command types and sub types.
 * 
 * Example use:
  	private static String commandId = "IMSCON";
	private static String commandPrefix = "QUERY IMSCON TYPE";
	private static String commandIdSubType = ICON_COMMAND_SUBTYPE.CONFIG.name();
	
	@Override
	public String getCommandPrefix() {
		return commandPrefix;
	}

	@Override
	public String getCommandSubType() {
		return commandIdSubType;
	}
	
	@Override
	public String getCommandId() {
		return commandId;
	}
 	</pre>
 */
public abstract class Type2CommandBuilder {
	public static final String COMMA = ",";
	public static final String CLOSEPARANTH = ") ";
	public static final String OPENPARANTH ="(";
	public static final String HEADER = "CMD(";
	private String commandSubType;
	private String commandPrefix;
	protected ArrayList<String> commandArgs	= new ArrayList<String>();
	
	public static final String STAR = "*";
	
	/**
	 * Constructs a Type2CommandBuilder class by assigning
	 * default IDs, prefixes, and types. 
	 */
	public Type2CommandBuilder() {
		commandSubType = getCommandSubType();
		commandPrefix = getCommandPrefix();
	}
	
	/**
	 * Method will return the type-2 to command as a string
	 * Builds the command by appending the header, prefix, id (if no subtype), and keywords.
	 * The string comand returned will vary depending on the arguments and objects selected
	 * @return
	 */
    public String getCommand() {
        String result;
        StringBuilder command = new StringBuilder(HEADER);
        if(commandSubType == null || commandSubType.isEmpty()){
        	command.append(commandPrefix).append(" ");
        }else{
        	command.append(commandPrefix).append(OPENPARANTH).append(commandSubType).append(CLOSEPARANTH);
        }
        
        //Loop over the map to finish building the rest of the command provided by the concrete class
        for (String entry : commandArgs) {
            command.append(entry);
        }
      
        command.append(CLOSEPARANTH);
        result = command.toString();
        
        return result;
    }
    
    
    /**
     * Returns the command prefix for a given command. The command prefix is
     * everything in the type2 command up to the actual command argument. 
     * i.e. "QUERY IMSCON TYPE", QUERY IMSPLEX" , "QUERY TRAN" are all command prefixes.
     * @return Command prefix
     */
    abstract public String getCommandPrefix();
    
    /**
     * Returns the command sub type for a given command. The commnd type is 
     * what's in the parantheses right after the command prefix
     * i.e. "CONFIG, PORT" are sub types for the commandID IMSCON
     * @return Command type
     */
    abstract public String getCommandSubType();

	
   
  
}
