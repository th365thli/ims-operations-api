/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/


package com.ibm.ims.ea.om.icon.query.datastore;

import com.ibm.ims.ea.base.om.common.messages.IQEO;
import com.ibm.ims.ea.om.common.Type2CommandBuilder;
import com.ibm.ims.ea.om.icon.query.IconQueryCommandBuilder.ICON_COMMAND_SUBTYPE;

public class IconDatastoreQueryCommandBuilder extends Type2CommandBuilder implements IconDatastoreQueryCommand {
	
	private static String commandPrefix = "QUERY IMSCON TYPE";
	private static String commandIdSubType = ICON_COMMAND_SUBTYPE.DATASTORE.name();
	
	@Override
	public void setName(String[] names) {
		int length = names.length;
		int count = 1;
		StringBuffer temp = new StringBuffer("NAME(");

		for (String name : names) {
			int name_length = name.trim().length();

			if (name_length == 0 || name_length > 8) {
				throw new IllegalArgumentException(IQEO.IQEO0009E.msg(new Object[] { "(Name = " + name + ", length = " + name_length }));
			}

			temp.append(name);

			if (length > 1 && count != length) {
				count++;
				temp.append(COMMA);
			}
		}
		temp.append(CLOSEPARANTH);
		commandArgs.add(temp.toString());
	}

	@Override
	public void setShow(SHOW[] shows) {
		int length = shows.length;
		int count = 1;
		StringBuffer temp = new StringBuffer("SHOW(");

		for (SHOW show: shows) {
			temp.append(show);

			if(length > 1 && count != length){
				count++;
				temp.append(COMMA);
			}
		}
		temp.append(CLOSEPARANTH);
		commandArgs.add(temp.toString());
	}

	@Override
	public void setSMEM(String[] name) {
		int length = name.length;
		int count = 1;
		StringBuffer temp = new StringBuffer("SMEM(");

		for (String data: name) {
			temp.append(data);

			if(length > 1 && count != length){
				count++;
				temp.append(COMMA);
			}
		}
		temp.append(CLOSEPARANTH);
		commandArgs.add(temp.toString());
	}

	@Override
	public void setState(STATE[] states) {
		int length = states.length;
		int count = 1;
		StringBuffer temp = new StringBuffer("STATE(");

		for (STATE show: states) {
			temp.append(show);

			if(length > 1 && count != length){
				count++;
				temp.append(COMMA);
			}
		}
		temp.append(CLOSEPARANTH);
		commandArgs.add(temp.toString());
	}

	@Override
	public void setStatus(STATUS[] status) {
		int length = status.length;
		int count = 1;
		StringBuffer temp = new StringBuffer("STATUS(");

		for (STATUS show: status) {
			temp.append(show);

			if(count > 1 && count != length){
				count++;
				temp.append(COMMA);
			}
		}
		temp.append(CLOSEPARANTH);
		commandArgs.add(temp.toString());
	}

	@Override
	public void setRoute(String[] imsName) {
		int length = imsName.length;
		int count = 1;
		StringBuffer temp = new StringBuffer(") ROUTE(");

		for (String name: imsName) {
			temp.append(name);

			if(length > 1 && count !=length ){           
				temp.append(COMMA);   
			}
			count++;
		}
        commandArgs.add(temp.toString());
	}

	@Override
	public String getCommandPrefix() {
		return commandPrefix;
	}

	@Override
	public String getCommandSubType() {
		return commandIdSubType;
	}
	
	

}
