/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.common.service;

import java.util.Collection;

import com.ibm.ims.ea.om.common.connection.factory.OMConnection;
import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.member.Member;

/**
 * Class provides a simple to use API to interact with Operations Manager. The objects returned are beans that 
 * aid represent the result OM has returned. This API is backed by a cache that is populated by calling the 
 * class discovery. Once discovered certain members will interact with the cache minimizing the size of the 
 * query sent to OM thus yielding performance. It should be noted not all methods interact with a cache, each
 * method explains its interaction.
 */
public interface MemberService {

	/**
	 * <pre>
	 * Returns all Members of type Ims in the IMSplex.
	 * 
	 * The query is sent to all members of type IMS registered with the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered IMSA and IMSB then 
     * the result include responses for both IMSA and IMSB.
     * 
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
	 * @return
	 * @throws OmException
	 * @throws OmConnectionException 
	 * @throws OmDatastoreException 
	 * </pre>
	 */
	public Collection<Member> getMember() throws OmException, OmConnectionException, OmDatastoreException;
	
	/**
	 * <pre>
	 * Returns all Members of type Ims in the IMSPlex.
	 * 
	 * The query is sent to the IMS (imsName) within the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered IMSA and IMSB then 
     * the result include responses for IMSA only.
     * 
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
	 * @param imsName
	 * @return
	 * @throws OmException
	 * @throws OmConnectionException
	 * @throws OmDatastoreException
	 * </pre>
	 */
	public Collection<Member> getMember(String[] imsName) throws OmException, OmConnectionException, OmDatastoreException ;

	/**
	 * This method will discover all members of type IMS for an IMSplex and cache them in our local database. After discovery
     * has been invoked, the services that support {@link InteractionMode) will interact with the local cache when answering
     * queries. This improves performance and reduces the overall cost to run queries. 
     * 
     * Once discovery has been invoked you can re-discover changes in the IMS System by running the method again as many
     * times as needed.
	 * @return
	 * @throws OmDatastoreException
	 * @throws OmException
	 * @throws OmConnectionException
	 */
	public int discoverMember() throws OmDatastoreException, OmException, OmConnectionException;

	/**
	 * This method will discover all members of type IMS for an IMS System and cache them in our local database. After discovery
     * has been invoked, the services that support {@link InteractionMode) will interact with the local cache when answering
     * queries. This improves performance and reduces the overall cost to run queries. 
     * 
     * Once discovery has been invoked you can re-discover changes in the IMS System by running the method again as many
     * times as needed.
	 * @param imsSystemName
	 * @return
	 * @throws OmDatastoreException
	 * @throws OmException
	 * @throws OmConnectionException
	 */
	public int discoverMember(String imsSystemName) throws OmDatastoreException, OmException, OmConnectionException;

	/**
	 * <pre>
	 * Returns all members in the given Imsplex with status (STT, LSTT) field.
	 * 
	 * QUERY MEMBER TYPE(IMS) SHOW(STATUS) is sent to all IMSs registered with the Imsplex that is configured in the 
	 * {@link OMConnection}.
	 * For example: if the omConnection is configured with IMSPLEX1 which has registered IMSA and IMSB then
	 * the result include responses for both IMSA and IMSB.
	 * 
	 * This service is a live only call to Operations Manager, there is no cache involved. 
	 * {@link InteractionMode} is not supported for this service.
	 * @return
	 * @throws OmException
	 * @throws OmConnectionException
	 * @throws OmDatastoreException 
	 */
	public Collection<Member> getMemberStatus() throws OmException,	OmConnectionException, OmDatastoreException;

	/**
	 * <pre>
	 * Returns all members in the given Imsplex with status (STT, LSTT) field in the IMS System.
	 * 
	 * QUERY MEMBER TYPE(IMS) SHOW(STATUS) is sent to the IMS(imsName) within the Imsplex that is configured 
	 * in the {@link OMConnection}.
	 * For example: if the omConnection is configured with IMSPLEX1 which has registered IMSA and IMSB and
	 * the imsName is set to IMSA, then the result include responses for both IMSA only.
	 * 
	 * This service is a live only call to Operations Manager, there is no cache involved. 
	 * {@link InteractionMode} is not supported for this service.
	 * @param imsSystemName
	 * @return
	 * @throws OmException
	 * @throws OmConnectionException
	 * @throws OmDatastoreException 
	 */
	public Collection<Member> getMemberStatus(String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException;
}