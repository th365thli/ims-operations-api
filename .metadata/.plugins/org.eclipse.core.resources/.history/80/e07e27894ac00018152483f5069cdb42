/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-V93
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.common.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.Map;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ibm.ims.ea.base.version.Version;
import com.ibm.ims.ea.om.cmd.constants.ImsCommandAttributes;
import com.ibm.ims.ea.om.cmd.exceptions.OmCommandGenerationException;
import com.ibm.ims.ea.om.cmd.utilities.Type2CommandSerializable;
import com.ibm.ims.ea.om.cmd.v14.type2.Type2Command;
import com.ibm.im.ac.datastore.DatastoreException;
import com.ibm.ims.ea.om.cmd.v14.query.imsplex.QueryImsPlex;
import com.ibm.ims.ea.om.cmd.v14.query.tran.QueryTran;
import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.common.exception.OmRuntimeException;
import com.ibm.ims.ea.om.common.message.OmInteractionContext;
import com.ibm.ims.ea.om.common.result.OmResultSet;
import com.ibm.ims.ea.om.common.service.TransactionService;
import com.ibm.ims.ea.om.datastore.ImsBaseDastoreConstants;
import com.ibm.ims.ea.om.datastore.ImsOmDatastore;
import com.ibm.ims.ea.om.datastore.ImsTransactionRepoTable;
import com.ibm.ims.ea.om.datastore.ImsTransactionTable;
import com.ibm.ims.ea.om.ims.Ims;
import com.ibm.ims.ea.om.ims.Ims.ImsResponseAttribute;
import com.ibm.ims.ea.om.imsplex.Imsplex;
import com.ibm.ims.ea.om.imsplex.Imsplex.ImsplexResponseAttribute;
import com.ibm.ims.ea.om.pgm.Program;
import com.ibm.ims.ea.om.pgm.Program.ProgramResponseAttribute;
import com.ibm.ims.ea.om.tran.Transaction;
import com.ibm.ims.ea.om.tran.update.TranUpdateCommandBuilder;
import com.ibm.ims.ea.om.tran.update.syntax.START._START;
import com.ibm.ims.ea.om.tran.update.syntax.STOP._STOP;


/**
 * <pre>
 * Class provides methods to interact with OM for the IMS Transactions Resource types. 
 * Return types are generalized for all interactions as a Collection of {@link Tran} objects. 
 * 
 * It should be noted that the Collection only manages the response for the particular 
 * resource and that OM Messages including Reason Codes, Reason Text, etc are accessible 
 * from the {@link Om} instance managing the interaction. 
 * 
 * See  <code>{@link Om#getOmMessageContexts()} </code> on how to access OM Messages.
 * </pre>
 * 
 * @author ddimatos
 *
 */
public final class TransactionServices extends ServicesHelper implements TransactionService{
	private static final Logger logger = LoggerFactory.getLogger(TransactionServices.class);
	
	//Statically build a mem-cache of all the known discovered meta-data about this service resulting from discovery
	static{
	   	//Try to get an instance of the com.ibm.im.ac.datastore 
		ImsOmDatastore imsOMDatastore;
	
		try {
				imsOMDatastore = ImsOmDatastore.getInstance();
				
				//Build the meta-data for transaction table
				ImsTransactionTable imsTransactionTable = imsOMDatastore.getImsTransactionStore();
			
				if(imsTransactionTable != null){
					imsTransactionTable.autoConfigureResourceMetaData();
				}
			
				//Build the meta-data for transaction REPO table
				ImsTransactionRepoTable imsTransactionRepoTable = imsOMDatastore.getImsTransactionRepoStore();
			
				if(imsTransactionRepoTable != null){
					imsTransactionRepoTable.autoConfigureResourceMetaData();
				}
		} catch (DatastoreException e) {
			//This exception will only happen if dependency "com.ibm.im.ac.datastore" has not been
			//loaded by OSGI. Moving this logic to Declarative serivces might be a good option. 
		
			if(logger.isDebugEnabled()){
				logger.debug("Appears that the bundle for service com.ibm.im.ac.datastore.AbstractDatastore has not been loaded");
			}
		}
	}
	  
	/**This must remain protected else the Om instance will not be able to aggregate all the Om Messages **/
	protected TransactionServices(Om om) {
		super(om); 
		
		try {
			this.resourceVersion = om.getImsplexService().getResourceVersions(new QueryImsPlex.TypeOptions[]{QueryImsPlex.TypeOptions.IMS});
		} catch (Exception e) {
			this.version = Version.IMS_ZERO_RELEASE;
		}
	}

	// ************************************************************************************************************
	// * Get Transactions
	// ************************************************************************************************************
	@Override
	public Collection<Transaction> getTransactions() throws OmException, OmDatastoreException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> getTransactions()");
		return getTransactions(new String[]{ImsCommandAttributes.ASTERISK});
	}

	@Override
	public Collection<Transaction> getTransactions(String[] imsSystemName) throws OmException, OmDatastoreException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> getTransactions("+Arrays.toString(imsSystemName)+")");
		
		int resourceCacheSize = 0;
		Date date = null;
		ArrayList<String> imsAttributes = null;
		
		//This variable will hold the query that is been execute live mode or equivalent type2command query the derby query that is executed in cache mode. 
		//The value is fetched up to the GUI for showing a hover over the command button
		//Since this is done as part of a bug fix, a complete dynamic implementation of the value for the variable is not done
		// Currently its just hardcoded in the services level
		String cmdExecuted = null; 
		
		//Note the method key to be used for associating the service
		String methodKey = "getTransactions";
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
				
		try {
			imsSystemName = this.routeMemberFormater(imsSystemName);
            
			//Hardcoded value which needs to be enhanced to be dynamic eventually
			cmdExecuted = new String("CMD(QUERY TRAN NAME(*) SHOW(ALL,LOCAL)) ROUTE(" + Arrays.toString(imsSystemName) + ")");
			
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);
			
			if(!this.om.isInteractionModeLive()){

				//Create a connection to the transaction table (cache) datastore
				ImsTransactionTable imsTransactionTable = ImsOmDatastore.getInstance().getImsTransactionStore();

				//Size greater than 0 then transactions have been discovered
				resourceCacheSize = imsTransactionTable.getCountFromMemoryCache(sysplexId, imsplexName,imsSystemName);
				
				if( resourceCacheSize > 0){
					//Set the date the discovery was done
					date = imsTransactionTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemName);
					
					//Set the imsattributes that are in the memcache
					imsAttributes = ImsOmDatastore.getInstance().getGridHeaderTable().getGridHeadersMemCache(this.version.toString(), methodKey);
			        
			        /** Case: interaction mode is DEFAULT or CACHE**/
					return imsTransactionTable.getTransactions(sysplexId,imsplexName,imsSystemName,this.om);
				}
			}

			/***************************************************************************************
			 * Case: No discovery has been run, continue to operate without the cache (live mode)
			 ***************************************************************************************/
			
			//Query trans for show all and status
			Type2Command type2Command = new Type2Command(); 
			type2Command.setVerb(Type2Command.VerbOptions.QUERY); 
			type2Command.setResource(Type2Command.ResourceOptions.TRAN);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));
			
			QueryTran queryTran = new QueryTran();
			queryTran.getNAME().add(ImsCommandAttributes.ASTERISK);
			queryTran.getSHOW().add(QueryTran.ShowOptions.ALL);
			queryTran.getSHOW().add(QueryTran.ShowOptions.LOCAL);
			
			type2Command.setQueryTran(queryTran);

			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);
			
			return propertiesToCollection(omResultSet);

		} catch (OmDatastoreException e) {
			e.setImsplexName(this.om.getOMConnection().getImsplex());
			throw e;
		} catch (DatastoreException e){
			throw convertDatatstoreException(e, sysplexId, imsplexName);
		} catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getTransactions("+Arrays.toString(imsSystemName)+")");
			
			this.setOmInteractionContext(omResultSet,resourceCacheSize, date, imsAttributes, methodKey,cmdExecuted);
		}
	}

	@Override
	// ************************************************************************************************************
    // * It initially find which all IMS members have repo enabled and then call for repo info for transactions
	// ************************************************************************************************************ 

	public Collection<Transaction> getTransactionsWithRepoInfo()throws OmException, OmDatastoreException, OmConnectionException {
	
		
		try{
			//Getting collection from Ims Service on which has repo
			Collection<Ims> membersWithRepo = om.getImsService().getRepoInfo(new String[]{"*"});
			
			if(!membersWithRepo.isEmpty()){
				
				//Getting an IMS member name from the collection
				String routeMember = membersWithRepo.iterator().next().getProperty(ImsResponseAttribute.MBR);
				
				//Calling to get the transaction Repo info with the identified IMS Member
				return getTransactionsWithRepoInfo(new String[]{routeMember});

			}
			return new ArrayList<Transaction>();
		
		
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getTransactionsWithRepoInfo()");
			
		}


	}
	
	// ************************************************************************************************************
    // * Get Repo Info for transactions.
	// * The imsName parameter will be the names of Ims for which repo is enabled.
	// ************************************************************************************************************ 

	@Override
	public Collection<Transaction> getTransactionsWithRepoInfo(String[] imsSystemName) throws OmException, OmDatastoreException, OmConnectionException {

		if(logger.isDebugEnabled()) logger.debug(">> getTransactionsWithRepoInfo("+Arrays.toString(imsSystemName)+")");
		
		int resourceCacheSize = 0;
		Date date = null;
		ArrayList<String> imsAttributes = null;
		
		//This variable will hold the query that is been execute live mode or equivalent type2command query the derby query that is executed in cache mode. 
		//The value is fetched up to the GUI for showing a hover over the command button
		//Since this is done as part of a bug fix, a complete dynamic implementation of the value for the variable is not done
		// Currently its just hardcoded in the services level
		String cmdExecuted = null;
		
		//Note the method key to be used for associating the service
		String methodKey = "getTransactionsWithRepoInfo"; 
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
				
		try {
			imsSystemName = this.routeMemberFormater(imsSystemName);
			
			//Hardcoded value which needs to be enhanced to be dynamic eventually
			cmdExecuted = new String("CMD(QUERY TRAN NAME(*) SHOW(DEFN,GLOBAL,IMSID)) ROUTE(" + Arrays.toString(imsSystemName) + ")");
	        
			
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);
			
			if(!this.om.isInteractionModeLive()){

				//Create a connection to the transaction table (cache) datastore
				ImsTransactionRepoTable imsTransactionRepoTable = ImsOmDatastore.getInstance().getImsTransactionRepoStore();

				//Size greater than 0 then transactions have been discovered
				resourceCacheSize = imsTransactionRepoTable.getCountFromMemoryCache(sysplexId, imsplexName,imsSystemName);
				
				if( resourceCacheSize > 0){
					//Set the date the discovery was done
					date = imsTransactionRepoTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemName);
					
					//Set the imsattributes that are in the memcache
					imsAttributes = ImsOmDatastore.getInstance().getGridHeaderTable().getGridHeadersMemCache(version.toString(), methodKey);
			        
			        /** Case: interaction mode is DEFAULT or CACHE**/
					return imsTransactionRepoTable.getTransactions(sysplexId,imsplexName,imsSystemName,this.om);
				}
			}

			/***************************************************************************************
			 * Case: No discovery has been run, continue to operate without the cache (live mode)
			 ***************************************************************************************/
			
			//Query trans for show all and status
			Type2Command type2Command = new Type2Command(); 
			type2Command.setVerb(Type2Command.VerbOptions.QUERY); 
			type2Command.setResource(Type2Command.ResourceOptions.TRAN);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));
			
			QueryTran queryTran = new QueryTran();
			queryTran.getNAME().add(ImsCommandAttributes.ASTERISK);
			queryTran.getSHOW().add(QueryTran.ShowOptions.DEFN);
			queryTran.getSHOW().add(QueryTran.ShowOptions.GLOBAL);
			queryTran.getSHOW().add(QueryTran.ShowOptions.IMSID);

			
			type2Command.setQueryTran(queryTran);

			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
		    String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);
			
			return propertiesToCollection(omResultSet);

		} catch (OmDatastoreException e) {
			e.setImsplexName(this.om.getOMConnection().getImsplex());
			throw e;
		} catch (DatastoreException e){
			throw convertDatatstoreException(e, sysplexId, imsplexName);
		} catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getTransactionsWithRepoInfo("+Arrays.toString(imsSystemName)+")");
			
			this.setOmInteractionContext(omResultSet,resourceCacheSize, date, imsAttributes, methodKey,cmdExecuted);
			
			// This is specifically for REPO implementation
			// In repo implementation we never go live for Status, so the message Context is not set.
			//So we are explicitly setting it
			if(!this.om.isInteractionModeLive()){
				if(omResultSet == null)
					omResultSet = new OmResultSet();
				this.om.addOmMessageContext(methodKey,omResultSet.getOmMessageContext());
			}
		}
	
	}
	
	// ************************************************************************************************************
    // * Get Transaction by Name for REPO info
    // ************************************************************************************************************
    @Override
    public Collection<Transaction> getTransactionsByNameWithRepoInfo(String[] transactions) throws OmException, OmConnectionException, OmDatastoreException {
        if (logger.isDebugEnabled())
            logger.debug(">> getTransactionsByNameWithRepoInfo(" + Arrays.toString(transactions) + ")");

        try {
            //Getting collection from Ims Service on which has repo
            Collection<Ims> membersWithRepo = om.getImsService().getRepoInfo(new String[] {"*"});

            if (!membersWithRepo.isEmpty()) {

                //Getting an IMS member name from the collection
                String routeMember = membersWithRepo.iterator().next().getProperty(ImsResponseAttribute.MBR);

                return getTransactionsByNameWithRepoInfo(transactions, new String[] {routeMember});
            }
            return new ArrayList<Transaction>();
        } finally {
            if (logger.isDebugEnabled())
                logger.debug("<< getTransactionsByNameWithRepoInfo(" + Arrays.toString(transactions) + ")");
        }
    }

    @Override
    public Collection<Transaction> getTransactionsByNameWithRepoInfo(String[] transactions, String[] imsSystemName) throws OmException, OmConnectionException,
            OmDatastoreException {
        if (logger.isDebugEnabled())
            logger.debug(">> getTransactionsByNameWithRepoInfo(" + Arrays.toString(transactions) + "," + Arrays.toString(imsSystemName) + ")");

        int resourceCacheSize = 0;
        Date date = null;
        
        ArrayList<String> imsAttributes = null;

        //Note the method key to be used for associating the service
        String methodKey = "getTransactionsByNameWithRepoInfo";

        //Local omresultSet otherwise we risk data corruption of the service is reused. 
        OmResultSet omResultSet = null;

        try {
            imsSystemName = this.routeMemberFormater(imsSystemName);

            //Set and configure the version using mapped resource version and the route name
            this.version = this.setVersion(this.resourceVersion, imsSystemName);

            /** Case: If it is not live then enter this block otherwise drop down to the live code **/
            if (!this.om.isInteractionModeLive()) {

              //Create a connection to the transaction table (cache) datastore
                ImsTransactionRepoTable imsTransactionRepoTable = ImsOmDatastore.getInstance().getImsTransactionRepoStore();

                //Size greater than 0 then transactions have been discovered
                resourceCacheSize = imsTransactionRepoTable.getCountFromMemoryCache(sysplexId, imsplexName,imsSystemName);
                
                if( resourceCacheSize > 0){
                    //Set the date the discovery was done
                    date = imsTransactionRepoTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemName);
                    
                    //Set the imsattributes that are in the memcache
                    imsAttributes = ImsOmDatastore.getInstance().getGridHeaderTable().getGridHeadersMemCache(version.toString(), "getTransactionsWithRepoInfo");
                    
                    /** Case: interaction mode is DEFAULT or CACHE **/
                    return imsTransactionRepoTable.getTransactionsByName(sysplexId, imsplexName, imsSystemName, transactions, this.om);
                }
            }
            
            
         
            /** Case: No discovery has been run, continue to operate without the cache (live mode) **/
            //Query trans for show all and status
            Type2Command type2Command = new Type2Command();
            type2Command.setVerb(Type2Command.VerbOptions.QUERY);
            type2Command.setResource(Type2Command.ResourceOptions.TRAN);
            type2Command.getRoute().addAll(Arrays.asList(imsSystemName));

            QueryTran queryTran = new QueryTran();
            queryTran.getNAME().addAll(Arrays.asList(transactions));
            queryTran.getSHOW().add(QueryTran.ShowOptions.DEFN);
            queryTran.getSHOW().add(QueryTran.ShowOptions.GLOBAL);
            queryTran.getSHOW().add(QueryTran.ShowOptions.IMSID);

            type2Command.setQueryTran(queryTran);

            Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
            String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

            Service service = new Service(this.om, this.version);
            omResultSet = service.executeCommand(methodKey, cmd);

            return propertiesToCollection(omResultSet);

        } catch (OmDatastoreException e) {
            e.setImsplexName(this.om.getOMConnection().getImsplex());
            throw e;
        } catch (DatastoreException e) {
            throw convertDatatstoreException(e, sysplexId, imsplexName);
        } catch (OmCommandGenerationException e) {
            throw new OmRuntimeException(e);
        } finally {
            if (logger.isDebugEnabled())
                logger.debug("<< getTransactionsByNameWithRepoInfo(" + Arrays.toString(transactions) + "," + Arrays.toString(imsSystemName) + ")");
            this.setOmInteractionContext(omResultSet, resourceCacheSize, date, imsAttributes, methodKey);

            // This is specifically for REPO implementation
            // In repo implementation we never go live for Status, so the message Context is not set.
            //So we are explicitly setting it
            if (!this.om.isInteractionModeLive()) {
                if (omResultSet == null)
                    omResultSet = new OmResultSet();
                this.om.addOmMessageContext(methodKey, omResultSet.getOmMessageContext());
            }
        }
    }
	// ************************************************************************************************************
	// * Get Transaction by Name
	// ************************************************************************************************************
	@Override
	public Collection<Transaction> getTransactionsByName(String[] transactions) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getTransactionsByName("+Arrays.toString(transactions)+")");
		
		try{
			return getTransactionsByName(transactions,new String[]{ImsCommandAttributes.ASTERISK});
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getTransactionsByName("+Arrays.toString(transactions)+")");
		}
	}

	@Override
	public Collection<Transaction> getTransactionsByName(String[] transactions, String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getTransactions("+Arrays.toString(imsSystemName)+")");
		
		int resourceCacheSize = 0;
		Date date = null;
		ArrayList<String> imsAttributes = null;
		
		//Note the method key to be used for associating the service
		String methodKey = "getTransactionsByName";
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
		
		try {
			imsSystemName = this.routeMemberFormater(imsSystemName);

			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);
			
			/** Case: If it is not live then enter this block otherwise drop down to the live code **/
			if(!this.om.isInteractionModeLive()){

				//Create a connection to the transaction table (cache) datastore
				ImsTransactionTable imsTransactionTable = ImsOmDatastore.getInstance().getImsTransactionStore();

				//Size greater than 0 then transactions have been discovered
				resourceCacheSize = imsTransactionTable.getCountFromMemoryCache(sysplexId, imsplexName,imsSystemName);
				
				if( resourceCacheSize > 0){
					//Set the date the discovery was done
					date = imsTransactionTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemName);
					
					//Set the imsattributes that are in the memcache
					imsAttributes = ImsOmDatastore.getInstance().getGridHeaderTable().getGridHeadersMemCache(this.version.toString(), methodKey);
			        
			        /** Case: interaction mode is DEFAULT or CACHE**/
					return imsTransactionTable.getTransactionsByName(sysplexId, imsplexName, imsSystemName, transactions, this.om);
				}
			}

			/** Case: No discovery has been run, continue to operate without the cache (live mode)**/
			//Query trans for show all and status
			Type2Command type2Command = new Type2Command(); 
			type2Command.setVerb(Type2Command.VerbOptions.QUERY); 
			type2Command.setResource(Type2Command.ResourceOptions.TRAN);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));

			QueryTran queryTran = new QueryTran();
			queryTran.getNAME().addAll(Arrays.asList(transactions));
			queryTran.getSHOW().add(QueryTran.ShowOptions.ALL);
			queryTran.getSHOW().add(QueryTran.ShowOptions.LOCAL);

			type2Command.setQueryTran(queryTran);

			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);
			
			return propertiesToCollection(omResultSet);

		} catch (OmDatastoreException e) {
			e.setImsplexName(this.om.getOMConnection().getImsplex());
			throw e;
		} catch (DatastoreException e){
			throw convertDatatstoreException(e, sysplexId, imsplexName);
		} catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getTransactions("+Arrays.toString(imsSystemName)+")");
			
			this.setOmInteractionContext(omResultSet,resourceCacheSize, date, imsAttributes, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get Transaction by Status
	// ************************************************************************************************************

	@Override
	public Collection<Transaction> getTransactionsByStatus(QueryTran.StatusOptions[] queryTranStatuses) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getTransactionsByStatus("+Arrays.toString(queryTranStatuses)+")");
		
		try{
			return getTransactionsByStatus(queryTranStatuses,new String[]{ImsCommandAttributes.ASTERISK});
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getTransactionsByStatus("+Arrays.toString(queryTranStatuses)+")");
		}
	}

	@Override
	public Collection<Transaction> getTransactionsByStatus(QueryTran.StatusOptions[] queryTranStatuses, String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if (logger.isDebugEnabled()) logger.debug(">> getTransactionsByStatus(" + Arrays.toString(queryTranStatuses) + ", " + Arrays.toString(imsSystemName) + ")");
	
		//Note the method key to be used for associating the service
		String methodKey = "getTransactionsByStatus";
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
		
		try{
			imsSystemName = this.routeMemberFormater(imsSystemName);
			
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);

			Type2Command type2Command = new Type2Command(); 
			type2Command.setVerb(Type2Command.VerbOptions.QUERY); 
			type2Command.setResource(Type2Command.ResourceOptions.TRAN);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));

			QueryTran queryTran = new QueryTran();
			queryTran.getSTATUS().addAll(Arrays.asList(queryTranStatuses));
			queryTran.getSHOW().add(QueryTran.ShowOptions.ALL);
			queryTran.getSHOW().add(QueryTran.ShowOptions.LOCAL);

			type2Command.setQueryTran(queryTran);

			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);
			
			return propertiesToCollection(omResultSet);

		} catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getTransactionsStatus("+ Arrays.toString(queryTranStatuses)+ ", " + Arrays.toString(imsSystemName)+")");
			
			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get related programs for given transaction
	// ************************************************************************************************************
	@Override
	public Collection<Transaction> getTransactionPrograms() throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getTransactionPrograms()");
		try{
			return getTransactionPrograms(new String[]{ImsCommandAttributes.ASTERISK});
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<<  getTransactionPrograms()");
		}
	}

	@Override
	public Collection<Transaction> getTransactionPrograms(String[] transactions) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getTransactionPrograms("+Arrays.toString(transactions)+ ")");
		
		try{
			return getTransactionPrograms(transactions,new String[]{ImsCommandAttributes.ASTERISK});
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getTransactionPrograms("+Arrays.toString(transactions)+ ")");
		}
	}

	@Override
	public Collection<Transaction> getTransactionPrograms(String[] transactions, String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getTransactionPrograms("+Arrays.toString(transactions)+ ", " + Arrays.toString(imsSystemName)+")");
		
		//Note the method key to be used for associating the service
		String methodKey = "getTransactionPrograms";
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
		
		try {
			imsSystemName = this.routeMemberFormater(imsSystemName);
			
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);

			Type2Command type2Command = new Type2Command(); 
			type2Command.setVerb(Type2Command.VerbOptions.QUERY); 
			type2Command.setResource(Type2Command.ResourceOptions.TRAN);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));

			QueryTran queryTran = new QueryTran();
			queryTran.getNAME().addAll(Arrays.asList(transactions));
			queryTran.getSHOW().add(QueryTran.ShowOptions.PGM);
			type2Command.setQueryTran(queryTran);

			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);
			
			return propertiesToCollection(omResultSet);

		} catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getTransactionPrograms("+Arrays.toString(transactions)+ ", " + Arrays.toString(imsSystemName)+")");
			
			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}
	
	// ************************************************************************************************************
	// * Get Transactions for a Program
	// ************************************************************************************************************
	@Override
	public  Collection<Transaction> getTransactionsForProgram(Program program, String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getTransactionsForProgram("+program+ ", " + Arrays.toString(imsSystemName)+")");
		
		String methodKey = "getTransactionsForProgram";
		Collection<Transaction> transactions = new ArrayList<Transaction>();
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = new OmResultSet();
		
		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);
			
			String rgnType = program.getProperty(ProgramResponseAttribute.RGNT);

            // Programs that region type isBMP, JBP and FPU do not have Trans associated 
            if (!(rgnType.equals(ProgramResponseAttribute.BMP.name()) || rgnType.equals(ProgramResponseAttribute.JBP.name()) || rgnType.equals(ProgramResponseAttribute.FPU.name()))) {
            	
            	String[] psbName = {program.getProperty(ProgramResponseAttribute.PGM)};

                Collection<Program> programs = om.getProgramService().getProgramTransactions(psbName, imsSystemName);
                
                ArrayList<String> tranNames = new ArrayList<String>();
                for (Program aPgm : programs) {
                    if (aPgm.getProperty(ProgramResponseAttribute.TRAN) != null && !aPgm.getProperty(ProgramResponseAttribute.TRAN).isEmpty()) {
                        tranNames.add(aPgm.getProperty(ProgramResponseAttribute.TRAN).trim());
                    }
                }
                
                //Convert the collection to an array of names
                String[] tranNamesArray = tranNames.toArray(new String[tranNames.size()]);
                
                transactions = this.getTransactionsByName(tranNamesArray, imsSystemName);
                
                ArrayList<String> imsAttributes = new ArrayList<String>();
                //Extract the ominteractionContext for the called service so we can get its omInteractionContext which contains the column headers
                if (!om.getOmInteractionContexts().containsKey("getTransactionsByStatus")) {
                	imsAttributes = om.getOmInteractionContexts().get("getTransactionsByName").getResourceAttributes();
                }
                else {
    			 imsAttributes = om.getOmInteractionContexts().get("getTransactionsByStatus").getResourceAttributes();
                }
    			//Add the column headers to the omInteractionContext
    			omResultSet.getOmInteractionContext().setResourceAttributes(imsAttributes);
            }
            
            return transactions;
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getTransactionsForProgram("+program+ ", " + Arrays.toString(imsSystemName)+")");
			
			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Discovery methods
	// ************************************************************************************************************

	@Override
	public int discoverTransactions() throws OmDatastoreException, OmException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> discoverTransactions()");
		
		try{
			Collection<Imsplex> plexResources = om.getImsplexService().getImsResources();
			int insertionSize = 0;

			for (Imsplex plexMemberResource : plexResources) {
				String imsMbrName = plexMemberResource.getProperty(ImsplexResponseAttribute.IMSMBR);
				insertionSize += this.discoverTransactions(imsMbrName);
			}
		
			return insertionSize;
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< discoverTransactions()");
		}
	}

	@Override
	public int discoverTransactions(String imsSystemName) throws OmDatastoreException, OmException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> discoverTransactions("+imsSystemName+")");
		int insertionSize 	= 0;

		try {
			this.isDiscovering = true;
			this.om.setInteractionMode(Om.InteractionMode.LIVE);
			Collection<Transaction> transactions = this.getTransactions(new String[]{imsSystemName});
			this.om.setInteractionMode(Om.InteractionMode.DEFAULT);

			ImsTransactionTable imsTransactionTable = ImsOmDatastore.getInstance().getImsTransactionStore();
			imsTransactionTable.deleteTable(this.sysplexId,this.imsplexName,imsSystemName);
			insertionSize = imsTransactionTable.addImsTransaction(transactions, this.sysplexId, this.imsplexName);
			imsTransactionTable.autoConfigureResourceMetaData(this.sysplexId, this.imsplexName, imsSystemName);
			
			//Since the discovery was run in live mode we need to add to the omInteractionContext the size and date
			String [] imsSystemNameArray = new String[]{imsSystemName};
			int resourceCacheSize = imsTransactionTable.getCountFromMemoryCache(sysplexId, imsplexName,imsSystemNameArray);
			Date date = imsTransactionTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemNameArray);
				
			OmInteractionContext omInteractionContext = this.om.getOmInteractionContexts().get("getTransactions");
			omInteractionContext.setResourceLastUpdated(date);
			omInteractionContext.setResourceCacheSize(resourceCacheSize);
			
		} catch (OmDatastoreException e) {
			e.setImsplexName(this.om.getOMConnection().getImsplex());
			throw e;
		} catch (DatastoreException e) {
			throw convertDatatstoreException(e, sysplexId,  imsplexName);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< discoverTransactions("+imsSystemName+")");
		}

		return insertionSize;
	}
	
	@Override
	public int discoverTransactionsWithRepoInfo() throws OmDatastoreException, OmException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> discoverTransactionsWithRepoInfo()");
		
		try{
			int insertionSize = 0;
			//Getting collection from Ims Service on which has repo
			Collection<Ims> membersWithRepo = om.getImsService().getRepoInfo(new String[]{"*"});
			
			if(!membersWithRepo.isEmpty()){
				
				//Getting an IMS member name from the collection
				String routeMember = membersWithRepo.iterator().next().getProperty(ImsResponseAttribute.MBR);
				
				//Inserting Condition if the IMS resource has Repo= true.Only then try to discover it
				insertionSize += this.discoverTransactionsWithRepoInfo(routeMember);

			}
			return insertionSize;
			
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< discoverTransactionsWithRepoInfo()");
		}
	}

	
	private int discoverTransactionsWithRepoInfo(String imsSystemName) throws OmDatastoreException, OmException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> discoverTransactionsWithRepoInfo("+imsSystemName+")");
		int insertionSize 	= 0;

		try {
			this.isDiscovering = true;
			this.om.setInteractionMode(Om.InteractionMode.LIVE);
			Collection<Transaction> transactions = this.getTransactionsWithRepoInfo(new String[]{imsSystemName});
			this.om.setInteractionMode(Om.InteractionMode.DEFAULT);

			ImsTransactionRepoTable imsTransactionRepoTable = ImsOmDatastore.getInstance().getImsTransactionRepoStore();
			imsTransactionRepoTable.deleteTable(this.sysplexId,this.imsplexName,imsSystemName);
			insertionSize = imsTransactionRepoTable.addImsTransaction(transactions, this.sysplexId, this.imsplexName);
			imsTransactionRepoTable.autoConfigureResourceMetaData(this.sysplexId, this.imsplexName, imsSystemName);
			
			//Since the discovery was run in live mode we need to add to the omInteractionContext the size and date
			String [] imsSystemNameArray = new String[]{imsSystemName};
			int resourceCacheSize = imsTransactionRepoTable.getCountFromMemoryCache(sysplexId, imsplexName,imsSystemNameArray);
			Date date = imsTransactionRepoTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemNameArray);
				
			OmInteractionContext omInteractionContext = this.om.getOmInteractionContexts().get("getTransactionsWithRepoInfo");
			omInteractionContext.setResourceLastUpdated(date);
			omInteractionContext.setResourceCacheSize(resourceCacheSize);
			
		} catch (OmDatastoreException e) {
			e.setImsplexName(this.om.getOMConnection().getImsplex());
			throw e;
		} catch (DatastoreException e) {
			throw convertDatatstoreException(e, sysplexId,  imsplexName);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< discoverTransactionsWithRepoInfo("+imsSystemName+")");
		}

		return insertionSize;
	}
	// ************************************************************************************************************
	// * Stop Transactions
	// ************************************************************************************************************

	@Override
	@Deprecated
	public Collection<Transaction> stopTransactions(String[] transactions, _STOP[] values, String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> stopTransactions("+Arrays.toString(transactions)+ ", "+Arrays.toString(values)+ ", " + Arrays.toString(imsSystemName)+")");
		String methodKey = "stopTransactions";
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
		
		try{
			// Create a instance of the command builder
			TranUpdateCommandBuilder transactionCommandBuilder = new TranUpdateCommandBuilder();
	
			// Instruct the command builder to create a custom command or you can use one of the predefined ones.
			transactionCommandBuilder.setName(transactions);
			transactionCommandBuilder.setStop(values);
			transactionCommandBuilder.setRoute(imsSystemName);
			String cmd = transactionCommandBuilder.getCommand();
	
			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);
	
			return propertiesToCollection(omResultSet);

		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< stopTransactions("+Arrays.toString(transactions)+ ", "+Arrays.toString(values)+ ", " + Arrays.toString(imsSystemName)+")");
		}
	}

	// ************************************************************************************************************
	// * Start Transactions
	// ************************************************************************************************************

	@Override
	@Deprecated
	public Collection<Transaction> startTransactions(String[] transactions, _START[] values, String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> startTransactions("+Arrays.toString(transactions)+ ", "+Arrays.toString(values)+ ", " + Arrays.toString(imsSystemName)+")");
		String methodKey = "startTransactions";
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
		
		try{
			//Create a instance of the command builder
			TranUpdateCommandBuilder transactionCommandBuilder = new TranUpdateCommandBuilder();
	
			//Instruct the command builder to create a custom command or you can use one of the predefined ones.
			transactionCommandBuilder.setName(transactions);
			transactionCommandBuilder.setStart(values);
			transactionCommandBuilder.setRoute(imsSystemName);
			String cmd = transactionCommandBuilder.getCommand();
	
			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< startTransactions("+Arrays.toString(transactions)+ ", "+Arrays.toString(values)+ ", " + Arrays.toString(imsSystemName)+")");
		}
	}
	
	/**
	 * Method will map a omResulset to a collection of transaction beans. It will also
	 * append to each bean the sysplex and imsplex name. 
	 * @param omResultSet
	 * @return
	 */
    private Collection<Transaction> propertiesToCollection(OmResultSet omResultSet) {
        Collection<Transaction> tempList = new ArrayList<Transaction>();

            Properties[] properties = omResultSet.getResponseProperties();

            for (Properties p : properties) {
            	Transaction transaction = new Transaction();
            	transaction.setMap((Map)p);
            	transaction.getMap().put(ImsBaseDastoreConstants.SYSPLEX_ID, omResultSet.getEnvironment());
            	transaction.getMap().put(ImsBaseDastoreConstants.IMSPLX, omResultSet.getImsplex());
                tempList.add(transaction);
            }

        return tempList;
    }

}
