/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-V93
 * (C) Copyright IBM Corp. 2013, 2015 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.pgm;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ibm.ims.ea.base.om.common.messages.IQEO;
import com.ibm.ims.ea.om.common.ImsResource;
import com.ibm.ims.ea.om.datastore.ImsTransactionTable;

/**
 * Class represents an object type of the return values for the PGM Query command.
 * All values that can be returned are mapped to this object, in the event a value 
 * is empty or not mapped the return value would be empty string.
 */
public class Program extends ImsResource{

	private static final Logger logger = LoggerFactory.getLogger(Program.class);

	/**
	 * Constructor helpful in creating an empty bean particularly in areas reflection is used. 
	 * Should be used with ({@link Program#setMap(Map)}
	 */
	public Program() {
		this.resourceType = ResourceType.PGM;
	}

	/**
	 * Method creates an instance of the bean given a Map representing the resource from an OM interaction
	 * @param omResourceResponse Map representation for IMS resource such as 
	 * a transaction or database query.
	 * @param properties
	 */
	public Program(Map<String, String> properties) {
		super(properties);
		this.resourceType = ResourceType.PGM;
	}

	/**
	 * Method creates an instance of the bean from an SQL ResultSet
	 * @param sqlResultSet
	 * @throws SQLException
	 */
	public Program(ResultSet sqlResultSet) throws SQLException{
		//if (logger.isDebugEnabled()) { logger.debug(this.getClass() + "Program(ResultSet)"); }

		this.resourceType = ResourceType.PGM;
		ResultSetMetaData rsMetaData = sqlResultSet.getMetaData();
		int numberOfColumns = rsMetaData.getColumnCount();
		
		try {					
			for (int i = 1; i < numberOfColumns + 1; i++) {
			      String columnName = rsMetaData.getColumnName(i);
			      
			      if (columnName.equals(ImsTransactionTable.SYSPLEX_ID) ){
						properties.put(columnName, String.valueOf(sqlResultSet.getInt(columnName)));
					}else {
						if (sqlResultSet.getString(columnName) != null) {
							properties.put(columnName, sqlResultSet.getString(columnName));
						}
					}
			    }
		} catch(SQLException e) {
			if(logger.isDebugEnabled()){
				logger.debug(IQEO.IQEO0000E.msg(new Object[] {Arrays.toString(e.getStackTrace())}));
			}
		}

		//if (logger.isDebugEnabled()) { logger.debug(this.getClass() + "<<<Program(ResultSet results): " + sqlResultSet.toString()); }
	}

	@Override
	public void setMap(Map<String, String> resourceMap) {
		this.properties = resourceMap;
		this.resourceType = ResourceType.PGM;
	}

	public String getProperty(ProgramResponseAttribute key){
		return this.properties.get(key.toString());
	}

	/**
	 * IMS Program Output fields that are returned for this resource type. 
	 * Depending on the command some fields when queried will return null.
	 */
	public enum ProgramResponseAttribute {
		BMPT,CC,CCTXT,DB,DFNT,DOPT,FP, FPU, JBP, BMP, GPSB,IMSID,LANG,LRSDNT,LSTT,MBR,MDLN,MDLT,PGM,RBMPT,RDOPT,REPO,RFP,RGNT,RGPSB,RLANG,RRSDNT,RRGNT,
		RSCHD,RSDNT,RTC,RTLS,RTMCR,RTMUP,SCHD,TLS,TMAC,TMCR,TMIM,TMUP,TRAN,WRK,ERRT,
		
		//NON-KEYWORDS
		SYSPLEX_ID, IMSPLX; 

		public String value() {
			return name();
		}

		public static ProgramResponseAttribute fromValue(String v) {
			return valueOf(v);
		}

		@Override
		public String toString(){
			return name();
		}
	}

	public static enum STATUS {
		/** Database used by the Program is not available */
		DBNOTAVL("DB-NOTAVL"),

		/** I/O prevention not completed */
		IOPREV("IOPREV"),

		/** Return information about Programs that are locked */
		LOCK("LOCK"),

		/** Return information about Programs that are not initialized */
		NOTINIT("NOTINIT"),

		/** Return information about Programs for which program scheduling is stopped */
		STOSCHD("STOSCHD"),

		/** Return information about Programs that are being traced */
		TRACE("TRACE");

		private String value = "";

		private STATUS(String val){
			this.value = val;
		}

		private STATUS(){}

		@Override
		public String toString(){
			return this.value;
		}

	}

	@Override
	public void setAttribute(String key, String value) {
		this.properties.put(key, value);
	}
}

