/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.datastore;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;


import com.ibm.im.ac.datastore.Datastore;
import com.ibm.im.ac.datastore.DatastoreException;
import com.ibm.im.ac.datastore.impl.SysplexTable;

import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.common.services.Om;
import com.ibm.ims.ea.om.rtc.RoutingCode;
import com.ibm.ims.ea.om.rtc.RoutingCode.RtcResponseAttribute;


public class ImsRoutingCodeRepoTable extends AbstractImsBaseDatastore{
    private static final String VERSION     = "1.1";
    private static final String COMMA       = " , ";
    public static final String TABLE_NAME   = "ROUTING_CODE_REPO";
	public static final String SYSPLEX_ID 	= "SYSPLEX_ID";
	public static final String RTC_ID 		= "RRTC_ID";
	public static final String TIMESTAMP	= "TIMESTAMP";
	public static final String UPDATED		= "UPDATED";
	
	private static final String SYSPLEX_TABLE_NAME = SysplexTable.TABLE_NAME;
	private static final String INDEX_NAME = "INDEX_RTC_REPO_MBR_SYSPLEX_IMSPLEX";
	//private  static final String UPDATE_EDIT_DATE_TRIGGER = "UPDATE_ROUTING_CODE_DATE_TRIGGER";
	
	protected ImsRoutingCodeRepoTable(Datastore parentDatastore) throws DatastoreException {
		super(parentDatastore, TABLE_NAME, VERSION, RtcResponseAttribute.MBR.toString());
	}

	@Override
	public void createTables() throws DatastoreException { 
		StringBuffer createSQL = new StringBuffer("CREATE TABLE ").append(this.tableName).append(" (")
				.append(RTC_ID).append(" INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY, ")
				.append(RtcResponseAttribute.CC).append(" VARCHAR(255), ")
				.append(RtcResponseAttribute.CCTXT).append(" VARCHAR(255), ")
				.append(RtcResponseAttribute.IMSID).append(" VARCHAR(255), ")
				.append(RtcResponseAttribute.MBR).append(" VARCHAR(255), ")
				.append(RtcResponseAttribute.REPO).append(" VARCHAR(255), ")
				.append(RtcResponseAttribute.RINQ).append(" VARCHAR(255), ")
				.append(RtcResponseAttribute.RPGM).append(" VARCHAR(255), ")
				.append(RtcResponseAttribute.RTC).append(" VARCHAR(255), ")
				.append(RtcResponseAttribute.RTMCR).append(" VARCHAR(255), ")
				.append(RtcResponseAttribute.RTMUP).append(" VARCHAR(255), ")
     			.append(SYSPLEX_ID).append(" INTEGER, ")
				.append(UPDATED).append(" TIMESTAMP DEFAULT CURRENT_TIMESTAMP, ")
				.append(IMSPLX).append(" VARCHAR(255) NOT NULL, ")
		 		.append(" FOREIGN KEY (").append(SYSPLEX_ID).append(") REFERENCES ").append(SYSPLEX_TABLE_NAME).append("(").append(SYSPLEX_ID).append(") ON DELETE SET NULL)");

            // Don't delete this is a problem with this trigger causing duplicates on update.
            //			StringBuffer trigger = new StringBuffer("CREATE TRIGGER ").append(UPDATE_EDIT_DATE_TRIGGER)
            //				.append(" AFTER UPDATE  OF LSTT ON ").append(this.tableName)
            //				.append(" REFERENCING OLD AS MODIFIEDROW FOR EACH  ROW ")
            //				.append(" UPDATE " ).append(this.tableName).append(" SET ")
            //				.append(this.tableName).append(".").append(UPDATED).append(" = ").append(" CURRENT_TIMESTAMP ")
            //				.append(" WHERE ").append(RTC_ID).append(" = ").append(" MODIFIEDROW").append(".").append(RTC_ID);
		
	         StringBuffer index = new StringBuffer("CREATE INDEX ").append(INDEX_NAME).append(" ON ").append(this.tableName)
	                    .append(" (").append(RtcResponseAttribute.RTC).append(",")
	                    .append(RtcResponseAttribute.MBR).append(",")
	                    .append(SYSPLEX_ID).append(",")
	                    .append(IMSPLX).append(")");
	         
		try {
			execute(createSQL.toString());
		} catch (DatastoreException e) {
				OmDatastoreException omDatastoreException = new OmDatastoreException(e);
				omDatastoreException.setQuery(createSQL.toString());
				throw omDatastoreException;
		}
		
		/*		try {
			execute(trigger.toString());
		} catch (DatastoreException e) {
				OmDatastoreException omDatastoreException = new OmDatastoreException(e);
				omDatastoreException.setQuery(trigger.toString());
				throw omDatastoreException;
		}*/
		
	    try {
              execute(index.toString());
        } catch (DatastoreException e) {
              OmDatastoreException omDatastoreException = new OmDatastoreException(e);
              omDatastoreException.setQuery(index.toString());
              throw omDatastoreException;
        }
	}

	public int  addImsRoutingCode(Collection<RoutingCode> routingCodes,int sysplexId, String imsplexName)  throws OmDatastoreException{
		Connection connection 	= null;
        PreparedStatement ps 	= null;
        int insertionSize=0;
        
        StringBuffer sb = new StringBuffer("INSERT INTO ")
    	        .append(this.tableName)
    	        .append(" (")
    	        .append(RtcResponseAttribute.CC).append(COMMA)
    	        .append(RtcResponseAttribute.CCTXT).append(COMMA)
    	        .append(RtcResponseAttribute.IMSID).append(COMMA)
    	        .append(RtcResponseAttribute.MBR).append(COMMA)
    	        .append(RtcResponseAttribute.REPO).append(COMMA)
    	        .append(RtcResponseAttribute.RINQ).append(COMMA)
    	        .append(RtcResponseAttribute.RPGM).append(COMMA)
    	        .append(RtcResponseAttribute.RTC).append(COMMA)
    	        .append(RtcResponseAttribute.RTMCR).append(COMMA)
    	        .append(RtcResponseAttribute.RTMUP).append(COMMA)
    	        .append(SYSPLEX_ID).append(COMMA)
    	        .append(IMSPLX)
    	        .append(")")
    	        .append(" VALUES (?,?,?,?,?,?,?,?,?,?,?,?)");
        
		try {
		    int i = 0;
            connection = parentDatastore.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sb.toString(),Statement.RETURN_GENERATED_KEYS);
            
			for (RoutingCode rtc : routingCodes) {
				ps.setString(1, rtc.getProperty(RtcResponseAttribute.CC));
				ps.setString(2, rtc.getProperty(RtcResponseAttribute.CCTXT));
				ps.setString(3, rtc.getProperty(RtcResponseAttribute.IMSID));
				ps.setString(4, rtc.getProperty(RtcResponseAttribute.MBR));
				ps.setString(5, rtc.getProperty(RtcResponseAttribute.REPO));
				ps.setString(6, rtc.getProperty(RtcResponseAttribute.RINQ));
				ps.setString(7, rtc.getProperty(RtcResponseAttribute.RPGM));
				ps.setString(8, rtc.getProperty(RtcResponseAttribute.RTC));
				ps.setString(9, rtc.getProperty(RtcResponseAttribute.RTMCR));
				ps.setString(10, rtc.getProperty(RtcResponseAttribute.RTMUP));
				ps.setInt(11, sysplexId);
				ps.setString(12, imsplexName);
				ps.addBatch();
				
				
				if ((++i) % 1000 == 0) {
					insertionSize += ps.executeBatch().length;
					connection.commit();
					ps.clearBatch();
				}
			}
			
			insertionSize += ps.executeBatch().length;
			connection.commit();
			ps.clearBatch();
			
		} catch (SQLException e) {
        	try {
				logAndRollback(connection, e);
			} catch (DatastoreException e1) {
				OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
				omDatastoreException.setQuery(sb.toString());
				throw omDatastoreException;
			}
		} finally {
			close(ps); 
			close(connection);
		}
		return insertionSize;
	}

  	
	
	
	public int updateRoutingcode(Collection<RoutingCode> routingcodes , int sysplexId, String imsplexName) throws OmDatastoreException{
		
		Connection connection 	= null;
		PreparedStatement ps 	= null;
		int insertionSize=0;
						
		StringBuffer  sb = new StringBuffer("UPDATE ")
		.append(this.tableName).append("SET ")
		.append(RtcResponseAttribute.CC).append(" = ? , ")
		.append(RtcResponseAttribute.CCTXT).append(" = ? , ")
		.append(RtcResponseAttribute.IMSID).append(" = ? , ")
		.append(RtcResponseAttribute.MBR).append(" = ? , ")
		.append(RtcResponseAttribute.REPO).append(" = ? , ")
		.append(RtcResponseAttribute.RINQ).append(" = ? , ")
		.append(RtcResponseAttribute.RPGM).append(" = ? , ")
		.append(RtcResponseAttribute.RTC).append(" = ? , ")
		.append(RtcResponseAttribute.RTMCR).append(" = ? , ")
		.append(RtcResponseAttribute.RTMUP).append(" = ? , ")
		.append(" WHERE ").append(RtcResponseAttribute.RTC).append(" = ? ")
        .append(" AND ").append(RtcResponseAttribute.MBR).append(" = ? ")
		.append(" AND ").append(SYSPLEX_ID).append(" = ? ")
		.append(" AND ").append(IMSPLX).append(" = ? ");
		
		try{
			int i = 0;
	        connection = parentDatastore.getConnection();
	        connection.setAutoCommit(false);
	        ps = connection.prepareStatement(sb.toString(),Statement.RETURN_GENERATED_KEYS);
	           
			for(RoutingCode routingcode: routingcodes){
				ps.setString(1, routingcode.getProperty(RtcResponseAttribute.CC));
				ps.setString(2, routingcode.getProperty(RtcResponseAttribute.CCTXT));
				ps.setString(3, routingcode.getProperty(RtcResponseAttribute.IMSID));
				ps.setString(4, routingcode.getProperty(RtcResponseAttribute.MBR));
				ps.setString(5, routingcode.getProperty(RtcResponseAttribute.REPO));
				ps.setString(6, routingcode.getProperty(RtcResponseAttribute.RINQ));
				ps.setString(7, routingcode.getProperty(RtcResponseAttribute.RPGM));
				ps.setString(8, routingcode.getProperty(RtcResponseAttribute.RTC));
				ps.setString(9, routingcode.getProperty(RtcResponseAttribute.RTMCR));
				ps.setString(10, routingcode.getProperty(RtcResponseAttribute.RTMUP));
				ps.setInt(11, sysplexId);
				ps.setString(12, imsplexName);
				
				if ((++i) % 1000 == 0) {
					insertionSize += ps.executeBatch().length;
					connection.commit();
					ps.clearBatch();
				}
			}
			
			insertionSize += ps.executeBatch().length;
			connection.commit();
			ps.clearBatch();
			
			//Populate the meta-data with the latest update
			this.autoConfigureResourceMetaData(sysplexId, imsplexName);
			
		} catch (SQLException e) {
	       	try {
					logAndRollback(connection, e);
				} catch (DatastoreException e1) {
					OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
					omDatastoreException.setQuery(sb.toString());
					throw omDatastoreException;
				}
			} finally {
				close(ps); 
				close(connection);
			}

		return insertionSize;
	}

//**************************************************************************************
// Get routing code methods
//**************************************************************************************
	public Collection<RoutingCode> getRoutingCodes(int sysplexId) throws OmDatastoreException {
		Collection<RoutingCode> routingCodes	= new ArrayList<RoutingCode>();
		
		try{
			routingCodes =  getRoutingCodes(sysplexId, null, null,null);
		} catch (OmConnectionException e) { 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		} catch (OmException e){ 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		}
		return routingCodes;
	}
	
	public Collection<RoutingCode> getRoutingCodes(int sysplexId, String imsplexName) throws OmDatastoreException {
		Collection<RoutingCode> routingCodes	= new ArrayList<RoutingCode>();
		
		try{
			routingCodes =  getRoutingCodes(sysplexId, imsplexName, null,null);
		} catch (OmConnectionException e) { 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		} catch (OmException e){ 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		}
		return routingCodes;
	}
	
	public Collection<RoutingCode> getRoutingCodes(int sysplexId,String imsplexName , String[] imsSystemName) throws OmDatastoreException {
		Collection<RoutingCode> routingCodes	= new ArrayList<RoutingCode>();
		
		try{
			routingCodes =  getRoutingCodes(sysplexId, imsplexName, imsSystemName,null);
		} catch (OmConnectionException e) { 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		} catch (OmException e){ 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		}
		return routingCodes;
	}
	
	public Collection<RoutingCode> getRoutingCodes(int sysplexId, String imsplexName,String[] imsSystemName,Om om) throws OmDatastoreException, OmException, OmConnectionException {
        Connection connection 	= null;
        PreparedStatement ps 	= null;
        ResultSet results 		= null;
        StringBuffer sb			= null; 
        Collection<RoutingCode> routingCodes		= new ArrayList<RoutingCode>();
        try {
        	
        	connection = parentDatastore.getConnection();
            
        	//Case: no route has been passed or the length is 0 but so we need to check if an impslexname has been passed.
        	if(imsSystemName == null || imsSystemName.length == 0){
        		if(imsplexName != null){
                    sb = new StringBuffer("SELECT * FROM ")
                    .append(this.tableName)
                    .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                    .append(" AND ").append(IMSPLX).append(" = ? ")
                    .append(" ORDER BY ").append(RtcResponseAttribute.RTC);
                    
                    ps = connection.prepareStatement(sb.toString());
                    ps.setInt(1, sysplexId);
                    ps.setString(2, imsplexName);
            	}else{
            		 sb = new StringBuffer("SELECT * FROM ")
                     .append(this.tableName)
                     .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                     .append(" ORDER BY ").append(RtcResponseAttribute.RTC);
                     
                     ps = connection.prepareStatement(sb.toString());
                     ps.setInt(1, sysplexId);
            	}
        		
        		results = ps.executeQuery();
                
                while (results.next()) {
                    RoutingCode rtc = new RoutingCode(results);
                    routingCodes.add(rtc);
                }
                
        	}else{ //Route has been passed and for each we route the command and concat the results
        		String sqlIn = this.sqlInGenerator(RtcResponseAttribute.MBR.toString(), imsSystemName);
                sb = new StringBuffer("SELECT * FROM ")
                    .append(this.tableName)
                    .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                    .append(" AND ").append(IMSPLX).append(" = ? ")
                    .append(sqlIn)
                    .append(" ORDER BY ").append(RtcResponseAttribute.RTC);
                         
                     ps = connection.prepareStatement(sb.toString());
                     ps.setInt(1, sysplexId);
                     ps.setString(2, imsplexName);
                	
                     results = ps.executeQuery();
                    
                     while (results.next()) {
                        RoutingCode rtc = new RoutingCode(results);
                        routingCodes.add(rtc);
                     }
        	}
        	 
        } catch(SQLException e) {
            try {
                logAndRollback(connection, e);
            } catch (DatastoreException e1) {
                OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
                omDatastoreException.setQuery(sb.toString());
                omDatastoreException.setEnvironmentId(sysplexId);
                throw omDatastoreException;
            }
        } finally {
            close(results);    
            close(ps);         
            close(connection); 
        }
        return routingCodes;    
    }
	
	   //Get routingcodes by Name for REPO
    
    public Collection<RoutingCode> getRoutingCodesByName(int sysplexId, String imsplexName, String[] imsSystemName, String[] routingcodeNames, Om om) throws OmDatastoreException, OmException, OmConnectionException {
        Connection connection = null;
        PreparedStatement ps = null;
        ResultSet results = null;
        ArrayList<RoutingCode> routingcodes = new ArrayList<RoutingCode>();
        StringBuffer sb = null; 
        Collection<RoutingCode> routingcodeStatuses = null;

        try{
             
            connection = parentDatastore.getConnection();
            String sqlNameSearch = this.sqlResourceGenerator(RtcResponseAttribute.RTC.toString(), routingcodeNames);
            
            //Case: no route has been passed or the length is 0 but so we need to check if an impslexname has been passed.
            if(imsSystemName == null || imsSystemName.length == 0){
             if(imsplexName != null){
                     
                    sb = new StringBuffer("SELECT * FROM ")
                     .append(this.tableName)
                     .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                     .append(" AND ").append(IMSPLX).append(" = ? ")
                     .append(sqlNameSearch);
                       
                    ps = connection.prepareStatement(sb.toString());
                    ps.setInt(1, sysplexId);
                    ps.setString(2, imsplexName);
                 }else{
                     
                    sb = new StringBuffer("SELECT * FROM ")
                     .append(this.tableName)
                     .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                     .append(sqlNameSearch);
                        
                     ps = connection.prepareStatement(sb.toString());
                     ps.setInt(1, sysplexId);
                 }
                 
             results = ps.executeQuery();
                    
                while (results.next()) {
                    RoutingCode rtc = new RoutingCode(results);
                    routingcodes.add(rtc);
                }
                    
            }else{ //Route has been passed and for each we route the command and concat the results
             
             //String sqlIn = this.sqlInGenerator(RtcResponseAttribute.MBR.toString(), imsSystemName);
                sb = new StringBuffer("SELECT * FROM ")
                     .append(this.tableName)
                    .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                    .append(" AND ").append(IMSPLX).append(" = ? ")
                  //  .append(sqlIn)
                    .append(sqlNameSearch);
                        
                    ps = connection.prepareStatement(sb.toString());
                    ps.setInt(1, sysplexId);
                    ps.setString(2, imsplexName);
                        
                    results = ps.executeQuery();
                        
                    while (results.next()) {
                        RoutingCode rtc = new RoutingCode(results);
                        routingcodes.add(rtc);
                    }
            }
            
            //Execute process to cleanup the status column in the derby cache
            //this.executeUpdateRoutingCodeColumnAsynchronously(routingcodeStatuses,sysplexId,imsplexName);
            
        } catch(SQLException e) {
            try {
                logAndRollback(connection, e);
            } catch (DatastoreException e1) {
                OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
                omDatastoreException.setQuery(sb.toString());
                throw omDatastoreException;
            }
        } finally {
            close(results);    // ResultSet
            close(ps);         // PreparedStatement
            close(connection); // Connection
        }
        
        return routingcodes;
    }
}

