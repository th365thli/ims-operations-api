/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.common.service;

import java.util.Collection;

import com.ibm.ims.ea.om.cmd.v14.query.rtc.QueryRtc.StatusOptions;
import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.rtc.RoutingCode;
import com.ibm.ims.ea.om.rtc.update.syntax.RTC_START._RTC_START;
import com.ibm.ims.ea.om.rtc.update.syntax.RTC_STOP._RTC_STOP;
import com.ibm.ims.ea.om.tran.Transaction;

public interface RoutingCodeService {
	
	/**
	 *  Get all routing codes for the IMS resources that are in the IMSPlex. 
	 * Query is derived using OM type-2 command and routed to all IMS's.
	 * @return
	 * @throws OmException
	 * @throws OmConnectionException 
	 * @throws OmDatastoreException 
	 */
	public Collection<RoutingCode> getRoutingCodes() throws OmException, OmConnectionException, OmDatastoreException ;
	
	/**
	 * Get routing code(s) for a particular system (imsName) that are in the IMSPlex 
	 * identified by setting the imsName. 
     * Query is derived using OM type-2 and routed only to the IMS resource identified by imsName.
	 * @param imsName
	 * @return
	 * @throws OmException
	 * @throws OmConnectionException 
	 * @throws OmDatastoreException 
	 */
	public Collection<RoutingCode> getRoutingCodes(String[] imsName) throws OmException, OmConnectionException, OmDatastoreException ;
	
	/**
	 * Get routing code(s) for the IMS resources that are in the IMSPlex.
	 * Query is derived using OM type-2 command and routed to all IMS's.
	 * @param routingcodes
	 * @return
	 * @throws OmException
	 * @throws OmConnectionException 
	 * @throws OmDatastoreException 
	 */
	public Collection<RoutingCode> getRoutingCodesByName(String[] routingcodes) throws OmException, OmConnectionException, OmDatastoreException ;
	
	/**
	 * Get routing code(s) for a particular system (imsName) that are in the IMSPlex 
	 * identified by setting the imsName. 
	 * Query is derived using OM type-2 and routed only to the IMS resource identified by imsName.
	 * @param routingcodes
	 * @param imsName
	 * @return
	 * @throws OmException
	 * @throws OmConnectionException 
	 * @throws OmDatastoreException 
	 */
	public Collection<RoutingCode> getRoutingCodesByName(String[] routingcodes,String[] imsName) throws OmException, OmConnectionException, OmDatastoreException ;
	
	public Collection<RoutingCode> getRoutingCodesByStatus(StatusOptions[] queryRtcStatuses) throws OmException,OmConnectionException, OmDatastoreException;
	
	//Note: This error can happen when no trans return with one of the requested statues "RC = 02000004, RSN =00001014 , RSM = CSLN055I, RSNTxt = At least one request completed with warning(s)"
	public Collection<RoutingCode> getRoutingCodesByStatus(StatusOptions[] queryRtcStatuses, String[] imsName)throws OmException, OmConnectionException, OmDatastoreException;

	public int discoverRoutingcodes() throws OmDatastoreException, OmException,OmConnectionException;
	
	public int discoverRoutingcodes(String imsName) throws OmDatastoreException, OmException, OmConnectionException;

	@Deprecated
	public Collection<RoutingCode> startRoutingCodes(String[] routingcodes,_RTC_START value, String[] imsName) throws OmException,OmConnectionException, OmDatastoreException;
	   
	@Deprecated
	public Collection<RoutingCode> stopRoutingCodes(String[] routingcodes,_RTC_STOP value, String[] imsName) throws OmException,OmConnectionException, OmDatastoreException;


	public RoutingCode getRoutingcodeForTransaction(Transaction routingcode, String[] systemId)throws OmDatastoreException, OmException, OmConnectionException;
	
	 /**
     * Returns repo info for the routingCodes in the IMSplex. 
     *
     * The query is sent to the IMS (imsName) within the IMSplex that is configured for repo.This info can be got thru the IMSPlex node.
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
     * @param imsName
     * @return
     * @throws OmException
     * @throws OmDatastoreException 
     */
	 public Collection<RoutingCode> getRoutingCodesWithRepoInfo(String[] imsSystemName)
			throws OmException, OmDatastoreException, OmConnectionException;
	 
	 /**
	     * Returns repo info for the routingCodes in the IMSplex. 
	     * THIs service will call the Ims Service and understand which  are the IMS that that repository configured and use one of them 
	     * as route to get the routingCode information on Repo
	     * The query is sent to the IMS (imsName) within the IMSplex that is configured for repo.This info can be got thru the IMSPlex node.
	     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
	     * can be overridden to behave differently. To do so, you can set the interaction mode with 
	     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
	     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
	     
	     * @return
	     * @throws OmException
	     * @throws OmDatastoreException 
	     */
		 public Collection<RoutingCode> getRoutingCodesWithRepoInfo()
				throws OmException, OmDatastoreException, OmConnectionException;
		 
	 /**
	   * This method will discover all routingCodes with Repo enabled and exported for an IMS System and cache them in our local database. After discovery
	   * has been invoked, the services that support {@link InteractionMode) will interact with the local cache when answering
	   * queries. This improves performance and reduces the overall cost to run queries. 
	   * 
	   * Once discovery has been invoked you can re-discover changes in the IMS System by running the method again as many
	   * times as needed.
	   * 
	   * @param imsName
	   * @return
	   * @throws OmDatastoreException
	   * @throws OmException
	   * @throws OmConnectionException
	   */
	  public int discoverRoutingCodesWithRepoInfo(String imsName) throws OmDatastoreException, OmException, OmConnectionException;

	  /**
	   * This method will discover all routingCodes with Repo enabled and exported for an IMSplex and cache them in our local database. After discovery
	   * has been invoked, the services that support {@link InteractionMode) will interact with the local cache when answering
	   * queries. This improves performance and reduces the overall cost to run queries. 
	   * 
	   * Once discovery has been invoked you can re-discover changes in the IMS System by running the method again as many
	   * times as needed.
	   * @return
	   * @throws OmDatastoreException
	   * @throws OmException
	   * @throws OmConnectionException
	   */
	  public int discoverRoutingCodesWithRepoInfo() throws OmDatastoreException, OmException,OmConnectionException;
		
	    /**
	     * <pre>
	     * Returns routingcodes matching that match the provided names for all IMS Systems in the PLEX with REPO. 
	     * 
	     * The query is sent to the IMS (imsName) within the IMSplex that is configured in the {@link OMConnection}
	     * which will act as master and retrieve data for all the IMSs with REPO.
	     * For example: if the omConnection is configured with IMSPLEX1 which has registered IMSA and IMSB and the 
	     * imsName is set to IMSA, then the result include responses for IMSA only.
	     * 
	     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
	     * can be overridden to behave differently. To do so, you can set the interaction mode with 
	     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
	     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
	     * 
	     * @param routingcodeNames
	     * @param imsName
	     * @return
	     * @throws OmException
	     * @throws OmConnectionException 
	     * @throws OmDatastoreException
	     * </pre>
	     */
	    public Collection<RoutingCode> getRoutingCodesByNameWithRepoInfo(String[] routingcodes, String[] imsName) throws OmException, OmConnectionException,
	            OmDatastoreException;

	    /**
	     * <pre>
	     * Returns routingcodes matching that match the provided names for all IMS Systems in the PLEX with REPO. 
	     * 
	     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
	     * can be overridden to behave differently. To do so, you can set the interaction mode with 
	     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
	     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
	     * 
	     * @param routingcodeNames
	     * @return
	     * @throws OmException
	     * @throws OmConnectionException 
	     * @throws OmDatastoreException
	     * </pre>
	     */
	    public Collection<RoutingCode> getRoutingCodesByNameWithRepoInfo(String[] routingcodes) throws OmException, OmConnectionException, OmDatastoreException;

}
