/*********************************************************************************
` * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2015 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/
package com.ibm.ims.ea.om.tran;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ibm.ims.ea.base.om.common.messages.IQEO;
import com.ibm.ims.ea.om.common.ImsResource;
import com.ibm.ims.ea.om.datastore.ImsTransactionTable;

/**
 * Class represents an object type of the return values for the TRAN Query command.
 * All values that can be returned are mapped to this object, in the event a value 
 * is empty or not mapped the return value would be empty string.
 */
public class Transaction extends ImsResource{

	private static final Logger logger = LoggerFactory.getLogger(Transaction.class);

	/**
	 * Constructor helpful in creating an empty bean particularly in areas reflection is used. 
	 * Should be used with ({@link Transaction#setMap(Map)}
	 */
	public Transaction() {
		resourceType = ResourceType.TRAN;
	}

	/**
	 * Method creates an instance of the bean given a Map representing the resource from an OM interaction
	 * @param omResourceResponse Map representation for IMS resource such as 
	 * a transaction or database query.
	 * @param properties
	 */
	public Transaction(Map<String, String> properties) {
		super(properties);
		resourceType = ResourceType.TRAN;
	}

	public String getProperty(TransactionResponseAttribute key){   //This will replace getInstanceField(....)
		return this.properties.get(key.toString());
	}
	
	
	/**
	 * Method creates an instance of the bean from an SQL ResultSet
	 * @param resultSet
	 * @throws SQLException
	 */
	public Transaction(ResultSet sqlResultSet) throws SQLException{
		//if (logger.isDebugEnabled()) { logger.debug(" >> Transaction(ResultSet)"); }
		
		resourceType = ResourceType.TRAN;
		ResultSetMetaData rsMetaData = sqlResultSet.getMetaData();
		int numberOfColumns = rsMetaData.getColumnCount();

		try {
		    for (int i = 1; i < numberOfColumns + 1; i++) {
		      String columnName = rsMetaData.getColumnName(i);
		      
		      if (columnName.equals(ImsTransactionTable.SYSPLEX_ID) ){
					properties.put(columnName, String.valueOf(sqlResultSet.getInt(columnName)));
				}else {
					if (sqlResultSet.getString(columnName) != null) {
						properties.put(columnName, sqlResultSet.getString(columnName));
					}
				}
		    }
		} catch (SQLException e) {
			if(logger.isDebugEnabled()){
				logger.debug(IQEO.IQEO0000E.msg(new Object[] {e.getMessage() + Arrays.toString(e.getStackTrace())}));
			}
		}

		//if (logger.isDebugEnabled()) { 
		//	logger.debug(" << Transaction(ResultSet results): " );
		//}
	}
	
	/**
	 * IMS Program Output fields that are returned for this resource type. 
	 * Depending on the command some fields when queried will return null.
	 */
	public enum TransactionResponseAttribute {
		AFIN, AOCMD, CC, CCTXT, CMTM, CONV, CONVID, DCLW, DFNT, DRRT, EDTR, EDTT, EMHBS, EXPRT, FP, IMSID, INQ, LCLS, LCP,
		LLCT, LLP, LMRG, LNP, LPLCT, LPLM, LQ, LSNO, LSSZ, LSTT, LU, MDLN, MDLT, MBR, MSGT, MSN, NODE, PLCTT, PGM, PSB, Q, 
		RAOCMD, RCLS, RCMTM, RCONV, RCV, RDCLW, RDRRT, REDTR, REDTT, REMHBS, REPO, REXPRT, RFP, RGC, RINQ, RLCT, RLP, RMRG, 
		RMSGT, RMT, RNP ,RPLCT, RPLCTT, RPLM, RPSB, RRCV, RRMT, RRSP, RSER, RSIDL, RSIDR, RSNO, RSP, RSPASZ, RSPATR, RSSZ,
		RTLS, RTMCR, RTMUP, RWFI, SER, SIDL, SIDR, SPASZ, SPATR, STT, TLS, TMAC, TMCR, TMEM, TMIM, TMUP, TPIP, TRAN, WFI, WRK, 
		ERRT, GBL, USER, 
		
		//NON-KEYWORDS
		SYSPLEX_ID, IMSPLX;

		public String value() {
			return name();
		}

		public static TransactionResponseAttribute fromValue(String v) {
			return valueOf(v);
		}

		@Override
		public String toString(){
			return name();
		}
	}
	
	/**
	 * Displays Transactions that display at least one of the specified status.
	 */
	public enum STATUS {
         AFFIN("AFFIN"),                          
         BAL("BAL"),                                    
         CONV("CONV"),                                    
         CPIC("CPIC"),                                  
         DYN("DYN"),                                  
         IOPREV("IOPREV"),                                   
         LCK("LCK"),                                  
         NOTINIT("NOTINIT"),                                  
         QERR("QERR"),                                
         QSTP("QSTP"),                                     
         SUSPEND("SUSPEND"),                                  
         STOQ("STOQ"),                                   
         STOSCHD("STOSCHD"),                                   
         TRA("TRA"),                                  
         USTO("USTO");   
         
         private String value = "";

         private STATUS(String val){
             this.value = val;
         }

         private STATUS(){}

         @Override
         public String toString(){
             return this.value;
         }
	}

	 public static enum FASTPATH {
         EXCLUSIVE("E"),
         OPTION("N"),
         POTENTIAL("P");

         private String value = "";

         private FASTPATH(String value) {
             this.value = value;
         }
         
         private FASTPATH(){}
         
         public String toString() {
             return this.value.toString();
         }
     }

	@Override
	public void setMap(Map<String, String> resourceMap) {
		this.properties = resourceMap;
		this.resourceType = ResourceType.TRAN;

	}
	
	@Override
	public void setAttribute(String key, String value) {
		this.properties.put(key, value);
	}

}
