/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om;

import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;

import com.ibm.ims.ea.om.common.fid.FIDManager;
//import com.ibm.ims.ea.om.datastore.GridHeaderTable;
//import com.ibm.ims.ea.om.datastore.ImsDatabaseTable;
//import com.ibm.ims.ea.om.datastore.ImsOmDatastore;
//import com.ibm.ims.ea.om.datastore.ImsProgramTable;
//import com.ibm.ims.ea.om.datastore.ImsRoutingCodeTable;
//import com.ibm.ims.ea.om.datastore.ImsTransactionTable;
//import com.ibm.ims.ea.om.datastore.OmImsTable;
//import com.ibm.ims.ea.om.datastore.OmImsplexTable;
//import com.ibm.ims.ea.om.datastore.OmMemberTable;
//import com.ibm.ims.ea.om.datastore.ImsProgramRepoTable;
//import com.ibm.ims.ea.om.datastore.OmImsTable;
//import com.ibm.ims.ea.om.datastore.OmImsplexTable;
//import com.ibm.ims.ea.om.datastore.OmMemberTable;

public class Activator implements BundleActivator {
	private static BundleContext context;

	static BundleContext getContext() {
		return context;
	}

	/*
	 * Method is used to configure the OM bundles meta-data and some start up code that can be done when a
	 * bundle is loaded as opposed to waiting for this to be done when a user invokes the bundle. 
	 * (non-Javadoc)
	 * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)
	 */
	public void start(BundleContext bundleContext) {
		Activator.context = bundleContext;
		
		//Launch a thread that will perform certain pre-bundle activation work such as build meta-data models.
		
		//Put to the side in favor of static init's in the services layer. Will look into Declarative services
		//new Thread(runnable).start();
		FIDManager.getInstance();
	}

	/*
	 * (non-Javadoc)
	 * @see org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)
	 */
	public void stop(BundleContext bundleContext) throws Exception {
		Activator.context = null;
	}

	//Several ideas were considered, serviceTracker, bundleTracker, etc and the settled solution is to use a background thread
	//to perform some of the bundle pre-load work. Work done here has a dependency on some other services and therefore 10 attempts
	//are allowed to be made, when the attempts all fail, the code should opperate in lazy fashion even though it will hinder performance
	//slightly. 
	
	//Put to the side in favor of static init's in the services layer. Will look into Declarative services
	//	private Runnable runnable = new Runnable() {
	//		public void run() {
	//			
	//			boolean WAIT = true;
	//
	//			//Sleep once because likely the bundle will load by this sleep time
	//			try {
	//				Thread.sleep(1000);
	//			} catch (InterruptedException e) {
	//				//Eat the exception - we don't need to act on this
	//				
	//				//************************************************************************************************
	//				//SHALI/Jerry this is broken I am disabling it for now, please clean up my comments too when fixed
	//				//Build the meta-data for transaction Repo table
	//				ImsTransactionRepoTable imsTransactionRepoTable = imsOMDatastore.getImsTransactionRepoStore();
	//				if(imsTransactionRepoTable != null){
	//					imsTransactionRepoTable.autoConfigureResourceMetaData();
	//				}
	//				
	//				ImsProgramRepoTable imsProgramRepoTable = imsOMDatastore.getImsProgramRepoStore();
	//				if(imsProgramRepoTable != null){
	//					imsProgramRepoTable.autoConfigureResourceMetaData();
	//				}
	//				ImsRoutingCodeRepoTable imsRoutingCodeRepoTable = imsOMDatastore.getImsRoutingCodeRepoStore();
	//				if(imsRoutingCodeRepoTable != null){
	//					imsRoutingCodeRepoTable.autoConfigureResourceMetaData();
	//				}
	//				ImsDatabaseRepoTable imsDatabaseRepoTable = imsOMDatastore.getImsDatabaseRepoStore();
	//				if(imsDatabaseRepoTable != null){
	//					imsDatabaseRepoTable.autoConfigureResourceMetaData();
	//				}
	//				//************************************************************************************************
	//					OmImsTable omImsTable = imsOMDatastore.getOmImsStore();
	//					if(omImsTable != null){
	//						omImsTable.autoConfigureResourceMetaData();
	//					}
	//					
	//					//Build the meta-data for transaction table
	//					ImsTransactionTable imsTransactionTable = imsOMDatastore.getImsTransactionStore();
	//					if(imsTransactionTable != null){
	//						imsTransactionTable.autoConfigureResourceMetaData();
	//					}
	//					
	//					//Build the meta-data for database table
	//					ImsDatabaseTable imsDatabaseTable = imsOMDatastore.getImsDatabaseStore();
	//					if(imsDatabaseTable != null){
	//						imsDatabaseTable.autoConfigureResourceMetaData();
	//					}
	//							
	//					//Build the meta-data for routing code table
	//					ImsRoutingCodeTable imsRoutingCodeTable = imsOMDatastore.getImsRoutingCodeStore();
	//					if(imsRoutingCodeTable != null){
	//						imsRoutingCodeTable.autoConfigureResourceMetaData();
	//					}
	//						
	//					//Build the meta-data for program table
	//					ImsProgramTable imsProgramTable = imsOMDatastore.getImsProgramStore();
	//					if(imsProgramTable != null){
	//						imsProgramTable.autoConfigureResourceMetaData();
	//					}
	//					
	//					GridHeaderTable gridHeaderTable = imsOMDatastore.getGridHeaderTable();
	//					if (gridHeaderTable != null) {
	//						gridHeaderTable.autoConfigureGridMetaData();
	//					}
	//					
	//					//If we get here, our bundle dependency has been met.
	//					WAIT = false;
	//				} catch (Exception e){
	//					//Eat all the exceptions 
	//					//If we get an exception its because the com.ibm.im.ac.datastore bundle has not loaded
	//					//so we should sleep here and try again.
	//					try{
	//						Thread.sleep(1000);
	//					} catch (InterruptedException es) {
	//						//Eat the exception
	//					}
	//					counter++;
	//				}
	//				
	//				if(counter == 10){
	//					WAIT = false;
	//				}
	//			}
	//		}
//	};
}
