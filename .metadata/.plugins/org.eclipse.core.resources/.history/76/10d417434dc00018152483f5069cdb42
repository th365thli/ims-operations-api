package om.common.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import om.common.version.Version;
import om.common.constants.ImsCommandAttributes;
import om.common.exception.OmDatastoreException;
import om.common.message.OM_MESSAGE;
import om.common.result.OmResultSet;

public abstract class ServicesHelper {// extends Service {
	protected int sysplexId ;
	protected String imsplexName;
	protected Version version = null;
	protected boolean isDiscovering = false;
	protected Om om = null;
	protected Map<String, Version> resourceVersion = null;
	private static final Logger logger = LoggerFactory.getLogger(ServicesHelper.class);
	
	//Statically build a mem-cache of all the known discovered meta-data about this service resulting from discovery
    static{
    	//Try to get an instance of the com.ibm.im.ac.datastore 
		ImsOmDatastore imsOMDatastore;
		try {
			imsOMDatastore = ImsOmDatastore.getInstance();
			
			GridHeaderTable gridHeaderTable = imsOMDatastore.getGridHeaderTable();
			if (gridHeaderTable != null) {
				gridHeaderTable.autoConfigureGridMetaData();
			}			
		} catch (DatastoreException e) {
			//This exception will only happen if dependency "com.ibm.im.ac.datastore" has not been
			//loaded by OSGI. Moving this logic to Declarative serivces might be a good option. 
			if(logger.isDebugEnabled()){
				logger.debug("Appears that the bundle for service com.ibm.im.ac.datastore.AbstractDatastore has not been loaded");
			}
		}
    }
    
    protected ServicesHelper(Om om){
    	this.om = om;
    	this.sysplexId = om.getOMConnection().getEnvironment();
    	this.imsplexName = om.getOMConnection().getImsplex();
    }

    /**
     * Method converts a Datastore Exception often thrown by the abstract datastore dependency and converted into and
     * OmDatastoreExecption that contains added meta-data such as where it originated from.
     * @param e
     * @param sysplexId
     * @param imsplexId
     * @param imsplexName
     * @return
     */
    protected OmDatastoreException convertDatatstoreException(DatastoreException e, int sysplexId, String imsplexName) {
        OmDatastoreException omDatastoreException = new OmDatastoreException(e);
        omDatastoreException.setEnvironmentId(sysplexId);
        omDatastoreException.setImsplexName(imsplexName);
        omDatastoreException.setQuery("No Query Availble");
        return omDatastoreException;
    }
    
    /**
     * Method will review the route members passed and if there is at least one route member that is a '*', then a new
     * array is returned which removes all other members and resets it to an array of only '*'
     * @param routeMembers
     * @return
     */
    public String[] routeMemberFormater(String[] routeMembers) {
        /** Case: There is at least one asterisk as a member so reset it to a single asterisk **/
    	
    	HashSet<String> routeMemberList = new HashSet<String>(Arrays.asList(routeMembers));
    	
        if (routeMemberList.contains(ImsCommandAttributes.ASTERISK)) {
            return new String[] {ImsCommandAttributes.ASTERISK};
        }
        return routeMembers;
    }
    

   
	
	public Version setVersion(Map<String, Version> versions, String [] routeMembers){
		HashSet<String> routeMemberList = new HashSet<String>(Arrays.asList(routeMembers));
		
		if(routeMemberList.contains(ImsCommandAttributes.ASTERISK) || routeMemberList.size() > 1){
			return versions.get("latestResourceVersion");
		}else if(routeMembers[0] != null){
			return versions.get(routeMembers[0]);
		}
		
		return Version.IMS_ZERO_RELEASE;
	}
	
	public Version getVersion(){
		return this.version;
	}
}
