/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2015 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.db;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ibm.ims.ea.base.om.common.messages.IQEO;
import com.ibm.ims.ea.om.common.ImsResource;
import com.ibm.ims.ea.om.datastore.ImsDatabaseTable;
import com.ibm.ims.ea.om.rm.list.Rcn;

/**
 * Class represents an object type of the return values for the DB Query command.
 * All values that can be returned are mapped to this object, in the event a value 
 * is empty or not mapped the return value would be empty string.
 */
public class Database extends ImsResource {

	private static final Logger logger = LoggerFactory.getLogger(Database.class);
	private Rcn recon = null;
	
	
	/**
	 * Constructor helpful in creating an empty bean particularly in areas reflection is used. 
	 * Should be used with ({@link Database#setMap(Map)}
	 */
	public Database() {
		this.resourceType = ResourceType.DB;
	}

	
	/**
	 * Method creates an instance of the bean given a Map representing the resource from an OM interaction
	 * @param omResourceResponse Map representation for IMS resource such as 
	 * a transaction or database query.
	 * @param properties
	 */
	public Database(Map <String, String> properties) {
		super(properties);
		this.resourceType= ResourceType.DB;
	}

	public String getProperty(DatabaseResponseAttribute key){   //This will replace getInstanceField(....)
		return this.properties.get(key.toString().trim()); //TODO: Do we really need a trim() here?????
	}

	/**
	 * Method creates an instance of the bean from an SQL ResultSet
	 * @param resultSet
	 * @throws SQLException
	 */
	public Database(ResultSet results) throws SQLException{
		resourceType = ResourceType.DB;
		ResultSetMetaData rsMetaData = results.getMetaData();
		int numberOfColumns = rsMetaData.getColumnCount();
		
		//if (logger.isDebugEnabled()) { logger.debug(this.getClass() + "Database(ResultSet)"); }

		try {
		    for (int i = 1; i < numberOfColumns + 1; i++) {
		    	String columnName = rsMetaData.getColumnName(i);
		      
		    	if (columnName.equals(ImsDatabaseTable.SYSPLEX_ID) ){
					properties.put(columnName, String.valueOf(results.getInt(columnName)));
		    	}else {
		    		if (results.getString(columnName) != null && !columnName.equalsIgnoreCase("RECON_IMS_NAME")
		    		    && !columnName.equalsIgnoreCase("RECON_2_DSN") && !columnName.equalsIgnoreCase("RECON_1_STATUS")
		    		    && !columnName.equalsIgnoreCase("RECON_1_NAME") && !columnName.equalsIgnoreCase("RECON_2_NAME")
		    		    && !columnName.equalsIgnoreCase("RECON_3_NAME") && !columnName.equalsIgnoreCase("RECON_1_DSN")
		    		    && !columnName.equalsIgnoreCase("RECON_LEVEL") && !columnName.equalsIgnoreCase("RECON_2_STATUS")
		    		    && !columnName.equalsIgnoreCase("RECON_3_STATUS") && !columnName.equalsIgnoreCase("RECON_MIN_VERSION")
		    		    && !columnName.equalsIgnoreCase("RECON_3_DSN")) {
							properties.put(columnName, results.getString(columnName));
		    		}
		    	}
		   }
		} catch (SQLException e) {
			if(logger.isDebugEnabled()){
				logger.debug(IQEO.IQEO0000E.msg(new Object[] {e.getMessage() + Arrays.toString(e.getStackTrace())}));
			}
		}

		//if (logger.isDebugEnabled()) { logger.debug(this.getClass() + 	"Database(ResultSet results): " + results.toString()); }
	}
	
	
	/**
	 * IMS Program Output fields that are returned for this resource type. 
	 * Depending on the command some fields when queried will return null.
	 */
	public enum DatabaseResponseAttribute {

		ACC, AREA, CC, CCTXT, DB, DFNT, IMSID, LACC, LRSDNT, LSTT, MBR, MDLN, MDLT, PART, PGM, RACC, REPO, RRSDNT,
		RSDNT, RTMCR, RTMUP, SNDX, STT, TMAC, TMCR, TMIM, TMUP, TYP, WRK,

		//UPDATE ONLY FIELDS
		ERRT, GBL,

		//DELETE ONLY FIELDS
		TYPE,
		
		//NON-Keywords
		SYSPLEX_ID, IMSPLX;

		public String value() {
			return name();
		}

		public static DatabaseResponseAttribute fromValue(String v) {
			return valueOf(v);
		}

		@Override
		public String toString(){
			return name();
		}

	}
	
	 /**
     * Status values
     *
     */
//    public enum STATUS {
//        ALLOCF,
//        ALLOCS,
//        BACKOUT,
//        EEQE,
//        LOCK,
//        NONE,
//        NOTINIT,
//        NOTOPEN,
//        OFR,
//        OLR,
//        OPEN,
//        QUIESCED,
//        QUIESCING,
//        RECALL,
//        RECOV,
//        RNL,
//        STOACC,
//        STOSCHD,    
//        STOUPDS,
//       // STA;
//    }
    
    
    public enum STATUS {
        //DB Status Orginating from LSTT
        ALLOCF("ALLOCF"),
        ALLOCS("ALLOCS"),
        BACKOUT("BACKOUT"), 
        EEQE("EEQE"),   
        IC("IC"),   
        LOCK("LOCK"),   
        NONE("NONE"),   
        NOTINIT("NOTINIT"),  //NOTINIT-xx-reason 
        DFSDDIR("DFSDDIR"), 
        NOTOPEN("NOTOPEN"), 
        OFR("OFR"),     
        OLR("OLR"),     
        OPEN("OPEN"),   
        PRELOAD("PRELOAD"), 
        PREOPEN("PREOPEN"), 
        QUIESCED("QUIESCED"),
        QUIESCING("QUIESCING"),     
        RECALL("RECALL"),       
        RECOVINP("RECOVINP"),   
        RECOVNEEDED("RECOVNEEDED"),     
        RNL("RNL"),         
        STOACC("STOACC"),       
        STOPPED("STOPPED"),     
        STOSCHD("STOSCHD"),     
        STOUPDS("STOUPDS"),     
        VSO("VSO"),         

        /**DB status Orginating from STT**/
        //OPEN("OPEN"), //TODO: OPEN is in LSTT and STT, for now we just have one STATUS?
        //STOACC("STOACC"),//TODO: STOACC is in LSTT and STT, for now we just have one STATUS?
        //STOSCHD("STOSCHD"), //TODO: STOSCHD is in LSTT and STT, for now we just have one STATUS?
        //STOUPDS("STOUPDS");//TODO: STOUPDS is in LSTT and STT, for now we just have one STATUS?
        ALLOC("ALLOC"),
        LOCKED("LOCKED"),
        STA("STA");

        private String value = "";

        private STATUS(String val){
            this.value = val;
        }

        private STATUS(){}

        @Override
        public String toString(){
            return this.value;
        }
    }


	public Rcn getRecon(){
		return this.recon;
	}
	public void setRecon(Rcn recon){
		this.recon = recon;
	}

	/**
	 * Returns a string containing the name of the Area, if DB type is AREA (for DEDB)
	 * or name of the Part, if DB type is PART (HALDB).
	 * Null for other database types.
	 */
	public String getAreaPart() {
		String area = this.getProperty(DatabaseResponseAttribute.AREA);
		String typ = this.getProperty(DatabaseResponseAttribute.TYP);
		String part = this.getProperty(DatabaseResponseAttribute.PART);

		if(typ != null && area != null){
			if(typ.equals(DatabaseResponseAttribute.AREA.name())){
				return area;
			}
		}else if( typ != null && part != null){
			if(typ.equals(DatabaseResponseAttribute.PART.name())){
				return part;
			}
		}
		return "";
	}


	@Override
	public void setMap(Map<String, String> resourceMap) {
		this.properties = resourceMap;
		this.resourceType= ResourceType.DB;

	}

	@Override
	public void setAttribute(String key, String value) {
		this.properties.put(key, value);
	}







}
