/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.datastore;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumSet;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import com.ibm.im.ac.datastore.Datastore;
import com.ibm.im.ac.datastore.DatastoreException;
import com.ibm.im.ac.datastore.impl.SysplexTable;
import com.ibm.ims.ea.base.utils.ArrayUtils;
import com.ibm.ims.ea.om.cmd.v14.query.pgm.QueryPgm;
import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.common.services.Om;
import com.ibm.ims.ea.om.pgm.Program;
import com.ibm.ims.ea.om.pgm.Program.ProgramResponseAttribute;

public class ImsProgramTable extends AbstractImsBaseDatastore{
    private static final String COMMA               = " , ";
    private static final String VERSION             = "1.1";
    public static final String  TABLE_NAME          = "PROGRAM";
    public static final String  SYSPLEX_ID          = "SYSPLEX_ID";
    public static final String  PGM_ID              = "PGM_ID";
    public static final String  TIMESTAMP           = "TIMESTAMP";
    public static final String  UPDATED             = "UPDATED";
	
	private static final String SYSPLEX_TABLE_NAME  = SysplexTable.TABLE_NAME;
	private static final String INDEX_NAME          = "INDEX_PGM_MBR_SYSPLEX_IMSPLEX";
	//private static final String UPDATE_EDIT_DATE_TRIGGER = "UPDATE_PROGRAM_DATE_TRIGGER";

	
	protected ImsProgramTable(Datastore parentDatastore) throws DatastoreException {
		super(parentDatastore, TABLE_NAME, VERSION, ProgramResponseAttribute.MBR.toString());
	}

	@Override
	public void createTables() throws DatastoreException { 
		
		StringBuffer createSQL = new StringBuffer("CREATE TABLE ").append(this.tableName).append(" (")
				.append(PGM_ID).append(" INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY, ")
				.append(ProgramResponseAttribute.BMPT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.CC).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.CCTXT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.DB).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.DFNT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.DOPT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.FP).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.FPU).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.JBP).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.BMP).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.GPSB).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.IMSID).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.LANG).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.LRSDNT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.LSTT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.MBR).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.MDLN).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.MDLT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.PGM).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RBMPT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RDOPT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.REPO).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RFP).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RGNT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RGPSB).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RLANG).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RRSDNT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RRGNT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RSCHD).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RSDNT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RTC).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RTLS).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RTMCR).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RTMUP).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.SCHD).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.TLS).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.TMAC).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.TMCR).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.TMIM).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.TMUP).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.TRAN).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.WRK).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.ERRT).append(" VARCHAR(255), ")
				.append(SYSPLEX_ID).append(" INTEGER, ")
				.append(IMSPLX).append(" VARCHAR(255) NOT NULL, ")
				.append(UPDATED).append(" TIMESTAMP DEFAULT CURRENT_TIMESTAMP, ")
		 		.append(" FOREIGN KEY (").append(SYSPLEX_ID).append(") REFERENCES ").append(SYSPLEX_TABLE_NAME).append("(").append(SYSPLEX_ID).append(") ON DELETE SET NULL) ");
	
		    // Don't delete this is a problem with this trigger causing duplicates on update.
			/*StringBuffer trigger = new StringBuffer("CREATE TRIGGER ").append(UPDATE_EDIT_DATE_TRIGGER)
				.append(" AFTER UPDATE  OF LSTT ON ").append(this.tableName)
				.append(" REFERENCING OLD AS MODIFIEDROW FOR EACH  ROW ")
				.append(" UPDATE " ).append(this.tableName).append(" SET ")
				.append(this.tableName).append(".").append(UPDATED).append(" = ").append(" CURRENT_TIMESTAMP ")
				.append(" WHERE ").append(PGM_ID).append(" = ").append(" MODIFIEDROW").append(".").append(PGM_ID);*/
			
	         StringBuffer index = new StringBuffer("CREATE INDEX ").append(INDEX_NAME).append(" ON ").append(this.tableName)
	                    .append(" (").append(ProgramResponseAttribute.PGM).append(",")
	                    .append(ProgramResponseAttribute.MBR).append(",")
	                    .append(SYSPLEX_ID).append(",")
	                    .append(IMSPLX).append(")");
		
		try {
			execute(createSQL.toString());
		} catch (DatastoreException e) {
				OmDatastoreException omDatastoreException = new OmDatastoreException(e);
				omDatastoreException.setQuery(createSQL.toString());
				throw omDatastoreException;
		}
		
		/*		try {
			execute(trigger.toString());
		} catch (DatastoreException e) {
				OmDatastoreException omDatastoreException = new OmDatastoreException(e);
				omDatastoreException.setQuery(trigger.toString());
				throw omDatastoreException;
		}*/
		
	    try {
              execute(index.toString());
        } catch (DatastoreException e) {
              OmDatastoreException omDatastoreException = new OmDatastoreException(e);
              omDatastoreException.setQuery(index.toString());
              throw omDatastoreException;
        }
	}
	
	public int addImsProgram(Collection<Program> programs,int sysplexId, String imsplexName)  throws OmDatastoreException{
		Connection connection 	= null;
        PreparedStatement ps 	= null;
        int insertionSize 	= 0;
        
        StringBuffer sb = new StringBuffer("INSERT INTO ")
        .append(this.tableName)
        .append(" (")
        .append(ProgramResponseAttribute.BMPT).append(COMMA)
        .append(ProgramResponseAttribute.CC).append(COMMA)
		.append(ProgramResponseAttribute.CCTXT).append(COMMA)
		.append(ProgramResponseAttribute.DB).append(COMMA)
		.append(ProgramResponseAttribute.DFNT).append(COMMA)
		.append(ProgramResponseAttribute.DOPT).append(COMMA)
		.append(ProgramResponseAttribute.FP).append(COMMA)
		.append(ProgramResponseAttribute.FPU).append(COMMA)
		.append(ProgramResponseAttribute.JBP).append(COMMA)
		.append(ProgramResponseAttribute.BMP).append(COMMA)
		.append(ProgramResponseAttribute.GPSB).append(COMMA)
		.append(ProgramResponseAttribute.IMSID).append(COMMA)
		.append(ProgramResponseAttribute.LANG).append(COMMA)
		.append(ProgramResponseAttribute.LRSDNT).append(COMMA)
		.append(ProgramResponseAttribute.LSTT).append(COMMA)
		.append(ProgramResponseAttribute.MBR).append(COMMA)
		.append(ProgramResponseAttribute.MDLN).append(COMMA)
		.append(ProgramResponseAttribute.MDLT).append(COMMA)
		.append(ProgramResponseAttribute.PGM).append(COMMA)
		.append(ProgramResponseAttribute.RBMPT).append(COMMA)
		.append(ProgramResponseAttribute.RDOPT).append(COMMA)
		.append(ProgramResponseAttribute.REPO).append(COMMA)
		.append(ProgramResponseAttribute.RFP).append(COMMA)
		.append(ProgramResponseAttribute.RGNT).append(COMMA)
		.append(ProgramResponseAttribute.RGPSB).append(COMMA)
		.append(ProgramResponseAttribute.RLANG).append(COMMA)
		.append(ProgramResponseAttribute.RRSDNT).append(COMMA)
		.append(ProgramResponseAttribute.RRGNT).append(COMMA)
		.append(ProgramResponseAttribute.RSCHD).append(COMMA)
		.append(ProgramResponseAttribute.RSDNT).append(COMMA)
		.append(ProgramResponseAttribute.RTC).append(COMMA)
		.append(ProgramResponseAttribute.RTLS).append(COMMA)
		.append(ProgramResponseAttribute.RTMCR).append(COMMA)
		.append(ProgramResponseAttribute.RTMUP).append(COMMA)
		.append(ProgramResponseAttribute.SCHD).append(COMMA)
		.append(ProgramResponseAttribute.TLS).append(COMMA)
		.append(ProgramResponseAttribute.TMAC).append(COMMA)
		.append(ProgramResponseAttribute.TMCR).append(COMMA)
		.append(ProgramResponseAttribute.TMIM).append(COMMA)
		.append(ProgramResponseAttribute.TMUP).append(COMMA)
		.append(ProgramResponseAttribute.TRAN).append(COMMA)
		.append(ProgramResponseAttribute.WRK).append(COMMA)
		.append(ProgramResponseAttribute.ERRT).append(COMMA)
		.append(SYSPLEX_ID).append(COMMA)
    	.append(IMSPLX)
        .append(") ")
    	.append(" VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
        
		try {
		    int i = 0;
            connection = parentDatastore.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sb.toString(),Statement.RETURN_GENERATED_KEYS);
            
			for (Program pgm : programs) {
				ps.setString(1, pgm.getProperty(ProgramResponseAttribute.BMPT));
				ps.setString(2, pgm.getProperty(ProgramResponseAttribute.CC));
				ps.setString(3, pgm.getProperty(ProgramResponseAttribute.CCTXT));
				ps.setString(4, pgm.getProperty(ProgramResponseAttribute.DB));
				ps.setString(5, pgm.getProperty(ProgramResponseAttribute.DFNT));
				ps.setString(6, pgm.getProperty(ProgramResponseAttribute.DOPT));
				ps.setString(7, pgm.getProperty(ProgramResponseAttribute.FP));
				ps.setString(8, pgm.getProperty(ProgramResponseAttribute.FPU));
				ps.setString(9, pgm.getProperty(ProgramResponseAttribute.JBP));
				ps.setString(10, pgm.getProperty(ProgramResponseAttribute.BMP));
				ps.setString(11, pgm.getProperty(ProgramResponseAttribute.GPSB));
				ps.setString(12, pgm.getProperty(ProgramResponseAttribute.IMSID));
				ps.setString(13, pgm.getProperty(ProgramResponseAttribute.LANG));
				ps.setString(14, pgm.getProperty(ProgramResponseAttribute.LRSDNT));
				ps.setString(15, pgm.getProperty(ProgramResponseAttribute.LSTT));
				ps.setString(16, pgm.getProperty(ProgramResponseAttribute.MBR));
				ps.setString(17, pgm.getProperty(ProgramResponseAttribute.MDLN));
				ps.setString(18, pgm.getProperty(ProgramResponseAttribute.MDLT));
				ps.setString(19, pgm.getProperty(ProgramResponseAttribute.PGM));
				ps.setString(20, pgm.getProperty(ProgramResponseAttribute.RBMPT));
				ps.setString(21, pgm.getProperty(ProgramResponseAttribute.RDOPT));
				ps.setString(22, pgm.getProperty(ProgramResponseAttribute.REPO));
				ps.setString(23, pgm.getProperty(ProgramResponseAttribute.RFP));
				ps.setString(24, pgm.getProperty(ProgramResponseAttribute.RGNT));
				ps.setString(25, pgm.getProperty(ProgramResponseAttribute.RGPSB));
				ps.setString(26, pgm.getProperty(ProgramResponseAttribute.RLANG));
				ps.setString(27, pgm.getProperty(ProgramResponseAttribute.RRSDNT));
				ps.setString(28, pgm.getProperty(ProgramResponseAttribute.RRGNT));
				ps.setString(29, pgm.getProperty(ProgramResponseAttribute.RSCHD));
				ps.setString(30, pgm.getProperty(ProgramResponseAttribute.RSDNT));
				ps.setString(31, pgm.getProperty(ProgramResponseAttribute.RTC));
				ps.setString(32, pgm.getProperty(ProgramResponseAttribute.RTLS));
				ps.setString(33, pgm.getProperty(ProgramResponseAttribute.RTMCR));
				ps.setString(34, pgm.getProperty(ProgramResponseAttribute.RTMUP));
				ps.setString(35, pgm.getProperty(ProgramResponseAttribute.SCHD));
				ps.setString(36, pgm.getProperty(ProgramResponseAttribute.TLS));
				ps.setString(37, pgm.getProperty(ProgramResponseAttribute.TMAC));
				ps.setString(38, pgm.getProperty(ProgramResponseAttribute.TMCR));
				ps.setString(39, pgm.getProperty(ProgramResponseAttribute.TMIM));
				ps.setString(40, pgm.getProperty(ProgramResponseAttribute.TMUP));
				ps.setString(41, pgm.getProperty(ProgramResponseAttribute.TRAN));
				ps.setString(42, pgm.getProperty(ProgramResponseAttribute.WRK));
				ps.setString(43, pgm.getProperty(ProgramResponseAttribute.ERRT));
				ps.setInt(44, sysplexId);
				ps.setString(45, imsplexName);
				ps.addBatch();
				
				if ((++i) % 1000 == 0) {
					insertionSize += ps.executeBatch().length;
					connection.commit();
					ps.clearBatch();
				}
			}
		
			insertionSize += ps.executeBatch().length;
			connection.commit();
			ps.clearBatch();
			
		} catch (SQLException e) {
        	try {
				logAndRollback(connection, e);
			} catch (DatastoreException e1) {
				OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
				omDatastoreException.setQuery(sb.toString());
				throw omDatastoreException;
			}
		} finally {
			close(ps); 
			close(connection); 
		}

		return insertionSize;
	}
	
	//*******************************************************************************************
	// get distinct column method
	//*******************************************************************************************

    public Collection<String> getDistinctColumn(int sysplexId,String imsplexName,ProgramResponseAttribute column) throws OmDatastoreException{
        return this.getDistinctColumn(sysplexId, imsplexName, column.toString());
    }
    
	//*******************************************************************************************
	// get programs methods
	//*******************************************************************************************
	public Collection<Program> getPrograms(int sysplexId) throws OmDatastoreException {
		Collection<Program> programs = new ArrayList<Program>();
		
		try{
			programs =  getPrograms(sysplexId, null, null,null);
		} catch (OmConnectionException e) { 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		} catch (OmException e){ 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		}
		return programs;
	}
	
	public Collection<Program> getPrograms(int sysplexId, String imsplexName) throws OmDatastoreException {
		Collection<Program> programs = new ArrayList<Program>();
		
		try{
			programs =  getPrograms(sysplexId, imsplexName, null,null);
		} catch (OmConnectionException e) { 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		} catch (OmException e){ 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		}
		return programs;
	}
	
	public Collection<Program> getPrograms(int sysplexId,String imsplexName , String[] imsSystemName) throws OmDatastoreException {
		Collection<Program> programs = new ArrayList<Program>();
		
		try{
			programs =  getPrograms(sysplexId, imsplexName, imsSystemName,null);
		} catch (OmConnectionException e) { 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		} catch (OmException e){ 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		}
		return programs;
	}
		
	public Collection<Program> getPrograms(int sysplexId, String imsplexName,String[] imsSystemName,Om om) throws OmDatastoreException, OmException, OmConnectionException {
		Connection connection 	= null;
	    PreparedStatement ps 	= null;
	    ResultSet results 		= null;
	    StringBuffer sb			= null; 
	    Collection<Program> programs = new ArrayList<Program>();
	    Collection<Program> programStatuses = null;
	    
	    try {
        	//If the om is not null then query IMS for the routing code status
        	if(om != null && !om.isInteractionModeCache()){
	        		
       			EnumSet<QueryPgm.StatusOptions> queryPgmStatusOptionsSet = EnumSet.allOf(QueryPgm.StatusOptions.class);
       			QueryPgm.StatusOptions[] queryPgmStatusOptions = (QueryPgm.StatusOptions[]) queryPgmStatusOptionsSet.toArray(new QueryPgm.StatusOptions[queryPgmStatusOptionsSet.size()]);
	    			
       			programStatuses = om.getProgramService().getProgramsByStatus(queryPgmStatusOptions, imsSystemName);

       			if(programStatuses.size() > 0){
	       			this.updateProgramStatus(programStatuses,sysplexId,imsplexName);
	       		}
	        }

	        connection = parentDatastore.getConnection();
	            
	        //Case: no route has been passed or the length is 0 but so we need to check if an impslexname has been passed.
	        if(imsSystemName == null || imsSystemName.length == 0){
	        	if(imsplexName != null){
	        		sb = new StringBuffer("SELECT * FROM ")
	                .append(this.tableName)
	                .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
	                .append(" AND ").append(IMSPLX).append(" = ? ")
	                .append(" ORDER BY ").append(ProgramResponseAttribute.PGM);
	                    
	                ps = connection.prepareStatement(sb.toString());
	                ps.setInt(1, sysplexId);
	                ps.setString(2, imsplexName);
	            }else{
	            	 sb = new StringBuffer("SELECT * FROM ")
	                 .append(this.tableName)
	                 .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
	                 .append(" ORDER BY ").append(ProgramResponseAttribute.PGM);
	                    
	                 ps = connection.prepareStatement(sb.toString());
	                 ps.setInt(1, sysplexId);
	            }
	        		
	        	results = ps.executeQuery();
	                
	            while (results.next()) {
	              	 Program pgm = new Program(results);
	 	             programs.add(pgm);
	            }
	                
	        }else{ //Route has been passed and for each we route the command and concat the results
	        	String sqlIn = this.sqlInGenerator(ProgramResponseAttribute.MBR.toString(), imsSystemName);
	            sb = new StringBuffer("SELECT * FROM ")
	                .append(this.tableName)
	                .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
	                .append(" AND ").append(IMSPLX).append(" = ? ")
	                .append(sqlIn)
	                .append(" ORDER BY ").append(ProgramResponseAttribute.PGM);
	                        
	                 ps = connection.prepareStatement(sb.toString());
	                 ps.setInt(1, sysplexId);
	                 ps.setString(2, imsplexName);
	               	
	                 results = ps.executeQuery();
	                    
	                 while (results.next()) {
	                   	 Program pgm = new Program(results);
	     	             programs.add(pgm);
	                 }
	        }
	        	 
	        //Execute process to cleanup the status column in the derby cache
	        this.executeUpdateProgramColumnAsynchronously(programStatuses, sysplexId, imsplexName);
	    } catch(SQLException e) {
	    	try {
	    		logAndRollback(connection, e);
	        } catch (DatastoreException e1) {
	            OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
	            omDatastoreException.setQuery(sb.toString());
	            omDatastoreException.setEnvironmentId(sysplexId);
	            throw omDatastoreException;
	        }
	    } finally {
	         close(results);    
	         close(ps);         
	         close(connection); 
	    }
	        
	    return programs;    
	}
	   
	//*******************************************************************************************
	// Update IMS Program Code functions
	//*******************************************************************************************
	
	/**
	 * Method allows updating the programs table (cache) column LSTT with the latest status given a colleciton of programs
	 * containing status, sysplexId and the imsplexId.
	 * @param programs Collection of programs with updated status. At minimum the object should have in it
	 * LSTT,TRAN and MBR. 
	 * @param sysplexId
	 * @param imsplexId
	 * @return an array of update counts containing one element for each command in the batch. The elements of the 
	 * array are ordered according to the order in which commands were added to the batch. 
	 * @throws DatastoreException
	 */
	public int[] updateProgramStatus(Collection<Program> programs, int sysplexId, String imsplexName) throws OmDatastoreException{
		//	UPDATE IMSOM_PROGRAM
		//	SET LSTT = 'ADDINV'
		//	WHERE TRAN = 'ADDINV' AND SYSPLEX_ID = 1 AND IMSPLEX_ID = 1
		
		StringBuffer sb = new StringBuffer("UPDATE ")
        .append(this.tableName)
        .append(" SET ").append(ProgramResponseAttribute.LSTT).append(" = ? ")
        .append(" WHERE ").append(ProgramResponseAttribute.PGM).append(" = ? ")
        .append(" AND ").append(ProgramResponseAttribute.MBR).append(" = ? ")
        .append(" AND ").append(SYSPLEX_ID).append(" = ? ")
        .append(" AND ").append(IMSPLX).append(" = ? ");
        
        Connection connection = null;
        PreparedStatement ps = null;
        int[] result = new int[0];
        ArrayList<int[]> results = new ArrayList<int[]>();
        
        try {
        	connection = parentDatastore.getConnection();
        	connection.setAutoCommit(false);
            ps = connection.prepareStatement(sb.toString(), Statement.RETURN_GENERATED_KEYS);
            int i =0;
            
            for(Program pgm: programs){
            	ps.setString(1, pgm.getProperty(ProgramResponseAttribute.LSTT));
                ps.setString(2, pgm.getProperty(ProgramResponseAttribute.PGM));
                ps.setString(3, pgm.getProperty(ProgramResponseAttribute.MBR));
                ps.setInt(4, sysplexId);
                ps.setString(5,imsplexName);
                ps.addBatch();
                if ((++i) % 1000 == 0) {
                	results.add(ps.executeBatch());
                	connection.commit();
                	ps.clearBatch();
                }
            }
            
            results.add(ps.executeBatch());
            connection.commit();
            
        } catch(SQLException e) {
        	try {
				logAndRollback(connection, e);
			} catch (DatastoreException e1) {
				OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
				omDatastoreException.setQuery(sb.toString());
				throw omDatastoreException;
			}
        } finally {
        	close(ps);         
        	close(connection); 
        }
        
        for(int i = 0; i < results.size();i++){
        	result = ArrayUtils.mergeArrays(result, results.get(i));
        }
        
        return result;
	}
	
	public int updateProgram(Collection<Program> programs , int sysplexId, String imsplexName) throws OmDatastoreException{
		
		Connection connection 	= null;
		PreparedStatement ps 	= null;
		int insertionSize=0;
						
		StringBuffer  sb = new StringBuffer("UPDATE ")
		.append(this.tableName).append(" SET ")
		.append(ProgramResponseAttribute.BMPT).append(" = ? , ")
		.append(ProgramResponseAttribute.CC).append(" = ? , ")
		.append(ProgramResponseAttribute.CCTXT).append(" = ? , ")
		.append(ProgramResponseAttribute.DB).append(" = ? , ")
		.append(ProgramResponseAttribute.DFNT).append(" = ? , ")
		.append(ProgramResponseAttribute.DOPT).append(" = ? , ")
		.append(ProgramResponseAttribute.FP).append(" = ? , ")
		.append(ProgramResponseAttribute.FPU).append(" = ? , ")
		.append(ProgramResponseAttribute.JBP).append(" = ? , ")
		.append(ProgramResponseAttribute.BMP).append(" = ? , ")
		.append(ProgramResponseAttribute.GPSB).append(" = ? , ")
		.append(ProgramResponseAttribute.IMSID).append(" = ? , ")
		.append(ProgramResponseAttribute.LANG).append(" = ? , ")
		.append(ProgramResponseAttribute.LRSDNT).append(" = ? , ")
		.append(ProgramResponseAttribute.LSTT).append(" = ? , ")
		.append(ProgramResponseAttribute.MBR).append(" = ? , ")
		.append(ProgramResponseAttribute.MDLN).append(" = ? , ")
		.append(ProgramResponseAttribute.MDLT).append(" = ? , ")
		.append(ProgramResponseAttribute.PGM).append(" = ? , ")
		.append(ProgramResponseAttribute.RBMPT).append(" = ? , ")
		.append(ProgramResponseAttribute.RDOPT).append(" = ? , ")
		.append(ProgramResponseAttribute.REPO).append(" = ? , ")
		.append(ProgramResponseAttribute.RFP).append(" = ? , ")
		.append(ProgramResponseAttribute.RGNT).append(" = ? , ")
		.append(ProgramResponseAttribute.RGPSB).append(" = ? , ")
		.append(ProgramResponseAttribute.RLANG).append(" = ? , ")
		.append(ProgramResponseAttribute.RRSDNT).append(" = ? , ")
		.append(ProgramResponseAttribute.RRGNT).append(" = ? , ")
		.append(ProgramResponseAttribute.RSCHD).append(" = ? , ")
		.append(ProgramResponseAttribute.RSDNT).append(" = ? , ")
		.append(ProgramResponseAttribute.RTC).append(" = ? , ")
		.append(ProgramResponseAttribute.RTLS).append(" = ? , ")
		.append(ProgramResponseAttribute.RTMCR).append(" = ? , ")
		.append(ProgramResponseAttribute.RTMUP).append(" = ? , ")
		.append(ProgramResponseAttribute.SCHD).append(" = ? , ")
		.append(ProgramResponseAttribute.TLS).append(" = ? , ")
		.append(ProgramResponseAttribute.TMAC).append(" = ? , ")
		.append(ProgramResponseAttribute.TMCR).append(" = ? , ")
		.append(ProgramResponseAttribute.TMIM).append(" = ? , ")
		.append(ProgramResponseAttribute.TMUP).append(" = ? , ")
		.append(ProgramResponseAttribute.TRAN).append(" = ? , ")
		.append(ProgramResponseAttribute.WRK).append(" = ? , ")
		.append(ProgramResponseAttribute.ERRT).append(" = ?  ")
		.append(" WHERE ").append(ProgramResponseAttribute.PGM).append(" = ? ")
        .append(" AND ").append(ProgramResponseAttribute.MBR).append(" = ? ")
		.append(" AND ").append(SYSPLEX_ID).append(" = ? ")
		.append(" AND ").append(IMSPLX).append(" = ? ");
		
		try{
			int i = 0;
	        connection = parentDatastore.getConnection();
	        connection.setAutoCommit(false);
	        ps = connection.prepareStatement(sb.toString(),Statement.RETURN_GENERATED_KEYS);
	           
			for(Program program: programs){
				ps.setString(1, program.getProperty(ProgramResponseAttribute.BMPT));
				ps.setString(2, program.getProperty(ProgramResponseAttribute.CC));
				ps.setString(3, program.getProperty(ProgramResponseAttribute.CCTXT));
				ps.setString(4, program.getProperty(ProgramResponseAttribute.DB));
				ps.setString(5, program.getProperty(ProgramResponseAttribute.DFNT));
				ps.setString(6, program.getProperty(ProgramResponseAttribute.DOPT));
				ps.setString(7, program.getProperty(ProgramResponseAttribute.FP));
				ps.setString(8, program.getProperty(ProgramResponseAttribute.FPU));
				ps.setString(9, program.getProperty(ProgramResponseAttribute.JBP));
				ps.setString(10, program.getProperty(ProgramResponseAttribute.BMP));
				ps.setString(11, program.getProperty(ProgramResponseAttribute.GPSB));
				ps.setString(12, program.getProperty(ProgramResponseAttribute.IMSID));
				ps.setString(13, program.getProperty(ProgramResponseAttribute.LANG));
				ps.setString(14, program.getProperty(ProgramResponseAttribute.LRSDNT));
				ps.setString(15, program.getProperty(ProgramResponseAttribute.LSTT));
				ps.setString(16, program.getProperty(ProgramResponseAttribute.MBR));
				ps.setString(17, program.getProperty(ProgramResponseAttribute.MDLN));
				ps.setString(18, program.getProperty(ProgramResponseAttribute.MDLT));
				ps.setString(19, program.getProperty(ProgramResponseAttribute.PGM));
				ps.setString(20, program.getProperty(ProgramResponseAttribute.RBMPT));
				ps.setString(21, program.getProperty(ProgramResponseAttribute.RDOPT));
				ps.setString(22, program.getProperty(ProgramResponseAttribute.REPO));
				ps.setString(23, program.getProperty(ProgramResponseAttribute.RFP));
				ps.setString(24, program.getProperty(ProgramResponseAttribute.RGNT));
				ps.setString(25, program.getProperty(ProgramResponseAttribute.RGPSB));
				ps.setString(26, program.getProperty(ProgramResponseAttribute.RLANG));
				ps.setString(27, program.getProperty(ProgramResponseAttribute.RRSDNT));
				ps.setString(28, program.getProperty(ProgramResponseAttribute.RRGNT));
				ps.setString(29, program.getProperty(ProgramResponseAttribute.RSCHD));
				ps.setString(30, program.getProperty(ProgramResponseAttribute.RSDNT));
				ps.setString(31, program.getProperty(ProgramResponseAttribute.RTC));
				ps.setString(32, program.getProperty(ProgramResponseAttribute.RTLS));
				ps.setString(33, program.getProperty(ProgramResponseAttribute.RTMCR));
				ps.setString(34, program.getProperty(ProgramResponseAttribute.RTMUP));
				ps.setString(35, program.getProperty(ProgramResponseAttribute.SCHD));
				ps.setString(36, program.getProperty(ProgramResponseAttribute.TLS));
				ps.setString(37, program.getProperty(ProgramResponseAttribute.TMAC));
				ps.setString(38, program.getProperty(ProgramResponseAttribute.TMCR));
				ps.setString(39, program.getProperty(ProgramResponseAttribute.TMIM));
				ps.setString(40, program.getProperty(ProgramResponseAttribute.TMUP));
				ps.setString(41, program.getProperty(ProgramResponseAttribute.TRAN));
				ps.setString(42, program.getProperty(ProgramResponseAttribute.WRK));
				ps.setString(43, program.getProperty(ProgramResponseAttribute.ERRT));
				ps.setString(44, program.getProperty(ProgramResponseAttribute.PGM));
				ps.setString(45, program.getProperty(ProgramResponseAttribute.MBR));
				ps.setInt(46, sysplexId);
				ps.setString(47, imsplexName);
				ps.addBatch();
			
				if ((++i) % 1000 == 0) {
					insertionSize += ps.executeBatch().length;
					connection.commit();
					ps.clearBatch();
				}
			}
			
			insertionSize += ps.executeBatch().length;
			connection.commit();
			ps.clearBatch();
			
			//Populate the meta-data with the latest update
			this.autoConfigureResourceMetaData(sysplexId, imsplexName);
			
		} catch (SQLException e) {
	       	try {
					logAndRollback(connection, e);
				} catch (DatastoreException e1) {
					OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
					omDatastoreException.setQuery(sb.toString());
					throw omDatastoreException;
				}
			} finally {
				close(ps); 
				close(connection);
			}

		return insertionSize;
		
	}
	
	private int updateProgramColumn(Collection<Program> programs, ProgramResponseAttribute programResponseAttribute, String value, int sysplexId, String imsplexName) throws OmDatastoreException{
	    StringBuffer sb = new StringBuffer("UPDATE ")
        .append(this.tableName)
        .append(" SET ").append(programResponseAttribute).append(" = ? ")
        .append(" WHERE ").append(ProgramResponseAttribute.PGM).append(" = ? ")
        .append(" AND ").append(ProgramResponseAttribute.MBR).append(" = ? ")
        .append(" AND ").append(SYSPLEX_ID).append(" = ? ")
        .append(" AND ").append(IMSPLX).append(" = ? ");
        
        Connection connection = null;
        PreparedStatement ps = null;
        int updateSize = 0;
        
        try {
        	connection = parentDatastore.getConnection();
        	connection.setAutoCommit(false);
            ps = connection.prepareStatement(sb.toString(), Statement.RETURN_GENERATED_KEYS);
            int i =0;
            
            for(Program program: programs){
            	ps.setString(1, value);
                ps.setString(2, program.getProperty(ProgramResponseAttribute.PGM));
                ps.setString(3, program.getProperty(ProgramResponseAttribute.MBR));
                ps.setInt(4, sysplexId);
                ps.setString(5,imsplexName);
                ps.addBatch();
                
                if ((++i) % 1000 == 0) {
                	updateSize += ps.executeBatch().length;
                	connection.commit();
                	ps.clearBatch();
                }
            }
            updateSize = ps.executeBatch().length;
            connection.commit();
            
        } catch(SQLException e) {
        	try {
				logAndRollback(connection, e);
			} catch (DatastoreException e1) {
				OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
				omDatastoreException.setQuery(sb.toString());
				throw omDatastoreException;
			}
        } finally {
        	close(ps);         
        	close(connection); 
        }
        
        return updateSize;
	}

	/**
	 * Update an entire column with a value. This can be pretty expensive and time costly.
	 * @param Column
	 * @param value
	 * @param sysplexId
	 * @param imsplexId
	 * @return
	 * @throws DatastoreException
	 */
	public int updateColumn(ProgramResponseAttribute column, String value, int sysplexId, String imsplexName) throws OmDatastoreException{
		StringBuffer sb = new StringBuffer("UPDATE ")
        .append(this.tableName)
        .append(" SET ").append(column).append(" = ? ")
        .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
        .append(" AND ").append(IMSPLX).append(" = ? ");
		
		 Connection connection = null;
	        PreparedStatement ps = null;
	        int result = 0;

	        try {
	        	connection = parentDatastore.getConnection();
	            ps = connection.prepareStatement(sb.toString(), Statement.RETURN_GENERATED_KEYS);
	            ps.setString(1, value);
	            ps.setInt(2, sysplexId);
	            ps.setString(3, imsplexName);
	           
	            ps.executeUpdate();
	            connection.commit();
	            
	        } catch(SQLException e) {
	        	try {
					logAndRollback(connection, e);
				} catch (DatastoreException e1) {
					OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
					omDatastoreException.setQuery(sb.toString());
					throw omDatastoreException;
				}
	        } finally {
	        	close(ps);         
	        	close(connection);
	        }
	        return result;
	}
	
	/**
	 * Update an entire column with a value. This can be pretty expensive and time costly.
	 * @param Column
	 * @param value
	 * @param systemId
	 * @param sysplexId
	 * @param imsplexId
	 * @return
	 * @throws DatastoreException
	 */
	public int updateColumn(ProgramResponseAttribute column, String value,String systemId, int sysplexId, String imsplexName) throws OmDatastoreException{
		StringBuffer sb = new StringBuffer("UPDATE ")
        .append(this.tableName)
        .append(" SET ").append(column).append(" = ? ")
        .append(" WHERE ").append(ProgramResponseAttribute.MBR).append(" = ? ")
        .append(" AND ").append(SYSPLEX_ID).append(" = ? ")
        .append(" AND ").append(IMSPLX).append(" = ? ");
		
		 Connection connection = null;
	        PreparedStatement ps = null;
	        int result = 0;

	        try {
	        	connection = parentDatastore.getConnection();
	            ps = connection.prepareStatement(sb.toString(), Statement.RETURN_GENERATED_KEYS);
	            ps.setString(1, value);
	            ps.setString(2, systemId);
	            ps.setInt(3, sysplexId);
	            ps.setString(4, imsplexName);
	           
	            ps.executeUpdate();
	            connection.commit();
	            
	        } catch(SQLException e) {
	        	try {
					logAndRollback(connection, e);
				} catch (DatastoreException e1) {
					OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
					omDatastoreException.setQuery(sb.toString());
					throw omDatastoreException;
				}
	        } finally {
	        	close(ps);         
	        	close(connection);
	        }
	        return result;
	}
	

	//**************************************************************************************
	// Get Routing Codes by name methods
	//**************************************************************************************
       public Collection<Program> getProgramsByName(int sysplexId,String[] routingCodeNames) throws OmDatastoreException {
    	   Collection<Program> programs = new ArrayList<Program>();
           try {
        	   programs = getProgramsByName(sysplexId, null, null,routingCodeNames, null);
       		} catch (OmConnectionException e) { 
       			/** Will not be thrown because we pass null for the Om, so eat the error **/
       		} catch (OmException e){ 
       			/** Will not be thrown because we pass null for the Om, so eat the error **/
       		}
           return programs;
       }
       
       public Collection<Program> getProgramsByName(int sysplexId, String imsplexName,String[] routingCodeNames) throws OmDatastoreException {
    	   Collection<Program> programs = new ArrayList<Program>();
           try {
        	   programs = getProgramsByName(sysplexId, imsplexName, null,routingCodeNames, null);
       		} catch (OmConnectionException e) { 
       			/** Will not be thrown because we pass null for the Om, so eat the error **/
       		} catch (OmException e){ 
       			/** Will not be thrown because we pass null for the Om, so eat the error **/
       		}
           return programs;
       }
       
       public Collection<Program> getProgramsByName(int sysplexId, String imsplexName, String [] imsName, String[] programNames) throws OmDatastoreException {
    	   Collection<Program> programs = new ArrayList<Program>();
           try {
        	   programs = getProgramsByName(sysplexId, imsplexName, imsName,programNames, null);
       		} catch (OmConnectionException e) { 
       			/** Will not be thrown because we pass null for the Om, so eat the error **/
       		} catch (OmException e){ 
       			/** Will not be thrown because we pass null for the Om, so eat the error **/
       		}
           return programs;
       }
       
       public Collection<Program> getProgramsByName(int sysplexId, String imsplexName, String[] imsSystemName, String[] programNames, Om om) throws OmDatastoreException, OmException, OmConnectionException {
           Connection connection = null;
           PreparedStatement ps = null;
           ResultSet results = null;
           ArrayList<Program> programs = new ArrayList<Program>();
           StringBuffer sb = null; 
           Collection<Program> programStatuses = null;
           
           try{
          		//If the om is not null then query IMS for the transactions status
        	   if(om != null && !om.isInteractionModeCache()){
        		
       				EnumSet<QueryPgm.StatusOptions> queryPgmStatusOptionsSet = EnumSet.allOf(QueryPgm.StatusOptions.class);
       				QueryPgm.StatusOptions[] queryPgmStatusOptions = (QueryPgm.StatusOptions[]) queryPgmStatusOptionsSet.toArray(new QueryPgm.StatusOptions[queryPgmStatusOptionsSet.size()]);
	    			
       				programStatuses = om.getProgramService().getProgramsByStatus(queryPgmStatusOptions, imsSystemName);

       				if(programStatuses.size() > 0){
       					this.updateProgramStatus(programStatuses,sysplexId,imsplexName);
       				}
        	   }
          		
               connection = parentDatastore.getConnection();
               String sqlNameSearch = this.sqlResourceGenerator(ProgramResponseAttribute.PGM.toString(), programNames);
               
               //Case: no route has been passed or the length is 0 but so we need to check if an impslexname has been passed.
               if(imsSystemName == null || imsSystemName.length == 0){
               	if(imsplexName != null){
                      	
                       sb = new StringBuffer("SELECT * FROM ")
                      	.append(this.tableName)
                      	.append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                      	.append(" AND ").append(IMSPLX).append(" = ? ")
                      	.append(sqlNameSearch);
                          
                       ps = connection.prepareStatement(sb.toString());
                       ps.setInt(1, sysplexId);
                       ps.setString(2, imsplexName);
                  	}else{
                       	
                       sb = new StringBuffer("SELECT * FROM ")
                      	.append(this.tableName)
                      	.append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                      	.append(sqlNameSearch);
                           
                        ps = connection.prepareStatement(sb.toString());
                        ps.setInt(1, sysplexId);
                  	}
               		
               	results = ps.executeQuery();
                       
                   while (results.next()) {
                	   Program pgm = new Program(results);
                       programs.add(pgm);
                   }
                       
               }else{ //Route has been passed and for each we route the command and concat the results
               	
               	String sqlIn = this.sqlInGenerator(ProgramResponseAttribute.MBR.toString(), imsSystemName);
                   sb = new StringBuffer("SELECT * FROM ")
                      	.append(this.tableName)
                       .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                       .append(" AND ").append(IMSPLX).append(" = ? ")
                       .append(sqlIn)
                       .append(sqlNameSearch);
                           
                       ps = connection.prepareStatement(sb.toString());
                       ps.setInt(1, sysplexId);
                       ps.setString(2, imsplexName);
                           
                       results = ps.executeQuery();
                           
                       while (results.next()) {
                    	   Program pgm = new Program(results);
                           programs.add(pgm);
                       }
               }
               
               //Execute process to cleanup the status column in the derby cache
               this.executeUpdateProgramColumnAsynchronously(programStatuses, sysplexId, imsplexName);
           	
           } catch(SQLException e) {
               try {
                   logAndRollback(connection, e);
               } catch (DatastoreException e1) {
                   OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
                   omDatastoreException.setQuery(sb.toString());
                   throw omDatastoreException;
               }
           } finally {
               close(results); 
               close(ps);       
               close(connection); 
           }
           
           return programs;
       }
       
     //**************************************************************************************
    // asynchronous clean up methods
    //**************************************************************************************
          
         /**
          * Executes a callable to clean up the transaction status column, see {link {@link updateTransactionColumnAsynchronously}
          * @param transactionStatuses
          * @param sysplexId
          * @param imsplexName
          * @return
          */
         private int executeUpdateProgramColumnAsynchronously(Collection<Program> programStatuses, int sysplexId,String imsplexName){
        	 int result = 0;
        	 ExecutorService service =  Executors.newSingleThreadExecutor();
        	 UpdateProgramColumnAsynchronously updateProgramColumnAsynchronously = new UpdateProgramColumnAsynchronously(programStatuses,sysplexId,imsplexName);
             Future<Integer> future = service.submit(updateProgramColumnAsynchronously);
             try {
    			result =  future.get();
             } catch (InterruptedException e) {
            	 //TODO: Do anything here?
             } catch (ExecutionException e) {
            	//TODO: Do anything here?
             }
             
             return result;
         }
         
        /**
         * <pre>
         * Class will create a callable to run in the background for a non-blocking call to {@link ImsTransactionTable#updateTransactionColumn(Collection, TransactionResponseAttribute, String, int, int)}
         *
         * Usage:
         *  ExecutorService service =  Executors.newSingleThreadExecutor();
         *  updateTransactionColumnAsynchronously upTransactionsAssychronously = new updateTransactionColumnAsynchronously(transactionStatuses,sysplexId,imsplexId);
         *  Future<Integer> future = service.submit(upTransactionsAssychronously);
         *  try {
         *  	Integer result = future.get();
         *  } catch (InterruptedException e) {
         *  } catch (ExecutionException e) {} 
         * 
         * @author ddimatos
         *</pre>
         */
        private class UpdateProgramColumnAsynchronously implements Callable<Integer> {
        	private Collection<Program> programs ;
        	private int sysplexId;
        	private String imsplexName = null;
        	      
        	// Null out the statuses that were set, we want to keep the status column null after use
        	private UpdateProgramColumnAsynchronously(Collection<Program> programs, int sysplexId,String imsplexName) {
        		this.programs = programs;
        		this.sysplexId = sysplexId;
        		this.imsplexName = imsplexName;
        	}

        	@Override
        	public Integer call() throws OmDatastoreException  {
        		//My guess is this is thread safe because Derby will not allow a read during an update
        		return new Integer (updateProgramColumn(programs,ProgramResponseAttribute.LSTT,null,sysplexId,imsplexName));
        	}
        }
}
