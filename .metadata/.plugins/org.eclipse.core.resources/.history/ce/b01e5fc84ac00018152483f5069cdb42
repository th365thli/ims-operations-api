/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013, 2015 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.common.service;

import java.util.Collection;

import com.ibm.ims.ea.om.cmd.v14.query.pgm.QueryPgm.StatusOptions;
import com.ibm.ims.ea.om.common.connection.factory.OMConnection;
import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.db.Database;
import com.ibm.ims.ea.om.pgm.Program;
import com.ibm.ims.ea.om.pgm.update.syntax.START._PGM_START;
import com.ibm.ims.ea.om.pgm.update.syntax.STOP._PGM_STOP;
import com.ibm.ims.ea.om.rtc.RoutingCode;
import com.ibm.ims.ea.om.tran.Transaction;

public interface ProgramService {
	public Collection<Program> getPrograms() throws OmException, OmDatastoreException, OmConnectionException;

	public Collection<Program> getPrograms(String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException;
 
	public Collection<Program> getProgramsByName(String[] programs) throws OmException, OmConnectionException, OmDatastoreException; 

	public Collection<Program> getProgramsByName(String[] programs, String[] imsSystemName) throws OmException, OmConnectionException,OmDatastoreException;

	public Collection<Program> getProgramsByStatus(StatusOptions[] queryPgmStatuses) throws OmException, OmConnectionException, OmDatastoreException;

	public Collection<Program> getProgramsByStatus(StatusOptions[] queryPgmStatuses, String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException;

	public Collection<Program> getProgramDatabases() throws OmException,OmConnectionException, OmDatastoreException;
	
	public Collection<Program> getProgramDatabases(String[] programs) throws OmException, OmConnectionException, OmDatastoreException;

	public Collection<Program> getProgramDatabases(String[] programs, String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException;

	public Collection<Program> getProgramTransactions() throws OmException,OmConnectionException, OmDatastoreException;
	
	public Collection<Program> getProgramTransactions(String[] programs) throws OmException, OmConnectionException, OmDatastoreException;

	public Collection<Program> getProgramTransactions(String[] programs, String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException;

	public int discoverPrograms(String imsSystemName) throws OmDatastoreException, OmException, OmConnectionException;
	
	public 	int discoverPrograms() throws OmDatastoreException, OmException, OmConnectionException;
	
	@Deprecated
	public Collection<Program> startPrograms(String[] programs, _PGM_START[] values, String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException;

	@Deprecated
	public Collection<Program> stopPrograms(String[] programs, _PGM_STOP[] values, String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException;
	 /**
     * Returns repo info for the programs in the IMSplex. 
     *
     * The query is sent to the IMS (imsName) within the IMSplex that is configured for repo.This info can be got thru the IMSPlex node.
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
     * @param imsName
     * @return
     * @throws OmException
     * @throws OmDatastoreException 
     */
	 public Collection<Program> getProgramsWithRepoInfo(String[] imsSystemName)
			throws OmException, OmDatastoreException, OmConnectionException;
	 
	 /**
	     * Returns repo info for the programs in the IMSplex. 
	     * THIs service will call the Ims Service and understand which  are the IMS that that repository configured and use one of them 
	     * as route to get the program information on Repo
	     * The query is sent to the IMS (imsName) within the IMSplex that is configured for repo.This info can be got thru the IMSPlex node.
	     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
	     * can be overridden to behave differently. To do so, you can set the interaction mode with 
	     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
	     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
	     
	     * @return
	     * @throws OmException
	     * @throws OmDatastoreException 
	     */
		 public Collection<Program> getProgramsWithRepoInfo()
				throws OmException, OmDatastoreException, OmConnectionException;
		 
	 /**
	   * This method will discover all programs with Repo enabled and exported for an IMS System and cache them in our local database. After discovery
	   * has been invoked, the services that support {@link InteractionMode) will interact with the local cache when answering
	   * queries. This improves performance and reduces the overall cost to run queries. 
	   * 
	   * Once discovery has been invoked you can re-discover changes in the IMS System by running the method again as many
	   * times as needed.
	   * 
	   * @param imsName
	   * @return
	   * @throws OmDatastoreException
	   * @throws OmException
	   * @throws OmConnectionException
	   */
	  public int discoverProgramsWithRepoInfo(String imsName) throws OmDatastoreException, OmException, OmConnectionException;

	  /**
	   * This method will discover all programs with Repo enabled and exported for an IMSplex and cache them in our local database. After discovery
	   * has been invoked, the services that support {@link InteractionMode) will interact with the local cache when answering
	   * queries. This improves performance and reduces the overall cost to run queries. 
	   * 
	   * Once discovery has been invoked you can re-discover changes in the IMS System by running the method again as many
	   * times as needed.
	   * @return
	   * @throws OmDatastoreException
	   * @throws OmException
	   * @throws OmConnectionException
	   */
	  public int discoverProgramsWithRepoInfo() throws OmDatastoreException, OmException,OmConnectionException;
		

	
	/**
	 * Add Javadoc but this returns a program for a given transaction. A transaction can only map to one program, so only one program will be returned.
	 * @param transaction
	 * @param imsSystemName
	 * @return
	 * @throws OmException
	 * @throws OmConnectionException
	 * @throws OmDatastoreException
	 */
	public Program getProgramForTransaction(Transaction transaction, String[] imsSystemName) throws OmException, OmConnectionException,OmDatastoreException;

	public Program getProgramForRoutingcode(RoutingCode routingCode,String[] imsSystemName) throws OmException, OmConnectionException,OmDatastoreException;

	public Collection<Program> getProgramsForDatabase(Database database, String[] imsSystemName) throws OmDatastoreException, OmException, OmConnectionException;
 
	public Collection<Program> getProgramsForDatabase(String databaseName,String[] imsSystemName) throws OmDatastoreException, OmException,OmConnectionException; 


    /**
     * <pre>
     * Returns programs matching that match the provided names for all IMS Systems in the PLEX with REPO. 
     * 
     * The query is sent to the IMS (imsName) within the IMSplex that is configured in the {@link OMConnection}
     * which will act as master and retrieve data for all the IMSs with REPO.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered IMSA and IMSB and the 
     * imsName is set to IMSA, then the result include responses for IMSA only.
     * 
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
     * @param programNames
     * @param imsName
     * @return
     * @throws OmException
     * @throws OmConnectionException 
     * @throws OmDatastoreException
     * </pre>
     */
    public Collection<Program> getProgramsByNameWithRepoInfo(String[] programs, String[] imsName) throws OmException, OmConnectionException,
            OmDatastoreException;

    /**
     * <pre>
     * Returns programs matching that match the provided names for all IMS Systems in the PLEX with REPO. 
     * 
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
     * @param programNames
     * @return
     * @throws OmException
     * @throws OmConnectionException 
     * @throws OmDatastoreException
     * </pre>
     */
    public Collection<Program> getProgramsByNameWithRepoInfo(String[] programs) throws OmException, OmConnectionException, OmDatastoreException;



}
