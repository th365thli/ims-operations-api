/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.common.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ibm.im.ac.datastore.DatastoreException;
import com.ibm.ims.ea.base.version.Version;
import com.ibm.ims.ea.om.ims.Ims;
import com.ibm.ims.ea.om.ims.Ims.ImsResponseAttribute;
import com.ibm.ims.ea.om.cmd.constants.ImsCommandAttributes;
import com.ibm.ims.ea.om.cmd.exceptions.OmCommandGenerationException;
import com.ibm.ims.ea.om.cmd.utilities.Type2CommandSerializable;
import com.ibm.ims.ea.om.cmd.v14.query.db.QueryDb;
import com.ibm.ims.ea.om.cmd.v14.query.imsplex.QueryImsPlex;
import com.ibm.ims.ea.om.cmd.v14.type2.Type2Command;
import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.common.exception.OmRuntimeException;
import com.ibm.ims.ea.om.common.message.OmInteractionContext;
import com.ibm.ims.ea.om.common.result.OmResultSet;
import com.ibm.ims.ea.om.common.service.DatabaseService;
import com.ibm.ims.ea.om.datastore.ImsBaseDastoreConstants;
import com.ibm.ims.ea.om.datastore.ImsDatabaseTable;
import com.ibm.ims.ea.om.datastore.ImsDatabaseRepoTable;
import com.ibm.ims.ea.om.datastore.ImsOmDatastore;
import com.ibm.ims.ea.om.db.Database;
import com.ibm.ims.ea.om.db.Database.DatabaseResponseAttribute;
import com.ibm.ims.ea.om.db.query.DbQueryCommandBuilder;
import com.ibm.ims.ea.om.db.update.DbUpdateCommandBuilder;
import com.ibm.ims.ea.om.db.update.syntax.DB_ACCTYPE._DB_ACCTYPE;
import com.ibm.ims.ea.om.db.update.syntax.DB_AREA._DB_AREA;
import com.ibm.ims.ea.om.db.update.syntax.DB_LOCK._DB_LOCK;
import com.ibm.ims.ea.om.db.update.syntax.DB_OPTION._DB_OPTION;
import com.ibm.ims.ea.om.db.update.syntax.DB_SCOPE._DB_SCOPE;
import com.ibm.ims.ea.om.db.update.syntax.DB_START._DB_START;
import com.ibm.ims.ea.om.db.update.syntax.DB_STOP._DB_STOP;
import com.ibm.ims.ea.om.imsplex.Imsplex;
import com.ibm.ims.ea.om.imsplex.Imsplex.ImsplexResponseAttribute;
import com.ibm.ims.ea.om.pgm.Program;
import com.ibm.ims.ea.om.pgm.Program.ProgramResponseAttribute;
import com.ibm.ims.ea.om.rm.list.Rcn;
import com.ibm.ims.ea.om.rm.list.Rcn.RcnResponseAttribute;
import com.ibm.ims.ea.om.tran.Transaction;
import com.ibm.ims.ea.om.tran.Transaction.TransactionResponseAttribute;

/**
 * <pre>
 * Class provides methods to interact with OM for the IMS Database Resource types. 
 * Return types are generalized for all interactions as a Collection of {@link Db} objects. 
 * 
 * It should be noted that the Collection only manages the response for the particular 
 * resource and that OM Messages including Reason Codes, Reason Text, etc are accessible 
 * from the {@link Om} instance managing the interaction. 
 * 
 * See  <code>{@link Om#getOmMessageContexts()} </code> on how to access OM Messages.
 * </pre>
 * 
 * @author ddimatos
 *
 */
public final class DatabaseServices extends ServicesHelper implements DatabaseService{
	private static final Logger logger = LoggerFactory.getLogger(DatabaseServices.class);

	//Statically build a mem-cache of all the known discovered meta-data about this service resulting from discovery
	static{
		//Try to get an instance of the com.ibm.im.ac.datastore 
		ImsOmDatastore imsOMDatastore;

		try {
				imsOMDatastore = ImsOmDatastore.getInstance();
				
				//Build the meta-data for database table
				ImsDatabaseTable imsDatabaseTable = imsOMDatastore.getImsDatabaseStore();
	
				if(imsDatabaseTable != null){
					imsDatabaseTable.autoConfigureResourceMetaData();
				}				
				
				//Build the meta-data for database REPO table
				ImsDatabaseRepoTable imsDatabaseRepoTable = imsOMDatastore.getImsDatabaseRepoStore();
				
				if(imsDatabaseRepoTable != null){
					imsDatabaseRepoTable.autoConfigureResourceMetaData();
				}
		} catch (DatastoreException e) {
			//This exception will only happen if dependency "com.ibm.im.ac.datastore" has not been
			//loaded by OSGI. Moving this logic to Declarative serivces might be a good option. 
			if(logger.isDebugEnabled()){
				logger.debug("Appears that the bundle for service com.ibm.im.ac.datastore.AbstractDatastore has not been loaded");
			}
		}
	}

	//This must remain protected else the Om instance will not be able to aggregate all the Om Messages
	protected DatabaseServices(Om om) {
		super(om);

		try {
			this.resourceVersion = om.getImsplexService().getResourceVersions(new QueryImsPlex.TypeOptions[]{QueryImsPlex.TypeOptions.IMS});
		} catch (Exception e) {
			version = Version.IMS_ZERO_RELEASE;
		}
	}

	// ************************************************************************************************************
	// * Get getDatabases - Get listing of all databases by SystemId (IMS MBR NAME) or for the entire IMSPLEX
	// ************************************************************************************************************
	@Override
	public Collection<Database> getDatabases() throws OmException, OmDatastoreException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> getDatabases()");

		try{
			return getDatabases(new String[]{DbQueryCommandBuilder.STAR});
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getDatabases()");
		}
	}

	@Override
	public Collection<Database> getDatabases(String[] imsSystemName) throws OmException, OmDatastoreException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> getDatabases("+Arrays.toString(imsSystemName)+")");

		int resourceCacheSize = 0;
		Date date = null;
		ArrayList<String> imsAttributes = null;

		String methodKey = "getDatabases";
		
		//This variable will hold the query that is been execute live mode or equivalent type2command query the derby query that is executed in cache mode. 
        //The value is fetched up to the GUI for showing a hover over the command button
        //Since this is done as part of a bug fix, a complete dynamic implementation of the value for the variable is not done
        // Currently its just hardcoded in the services level
        String cmdExecuted = null;


		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try {
			imsSystemName = this.routeMemberFormater(imsSystemName);

			//Hardcoded value which needs to be enhanced to be dynamic eventually
            cmdExecuted = new String("CMD(QUERY DB NAME(*) SHOW(ALL,LOCAL)) ROUTE(" + Arrays.toString(imsSystemName) + ")");
            
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);

			/** Case: If it is not live then enter this block otherwise drop down to the live code **/
			if(!this.om.isInteractionModeLive()){

				ImsDatabaseTable imsDatabaseTable = ImsOmDatastore.getInstance().getImsDatabaseStore();

				//Size greater than 0 then transactions have been discovered
				resourceCacheSize = imsDatabaseTable.getCountFromMemoryCache(this.sysplexId,this.imsplexName,imsSystemName);

				if( resourceCacheSize > 0){

					//Set the date the discovery was done
					date = imsDatabaseTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemName);

					//Set the imsattributes that are in the memcache
					imsAttributes = ImsOmDatastore.getInstance().getGridHeaderTable().getGridHeadersMemCache(version.toString(), methodKey);

					/** Case: interaction mode is DEFAULT or CACHE**/
					return imsDatabaseTable.getDatabases(this.sysplexId,this.imsplexName,imsSystemName,this.om);
				}
			}

			/** Case: No discovery has been run, continue to operate without the cache (live mode)**/
			Type2Command type2Command = new Type2Command(); 
			type2Command.setVerb(Type2Command.VerbOptions.QUERY); 
			type2Command.setResource(Type2Command.ResourceOptions.DB);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));

			QueryDb queryDb = new QueryDb();
			queryDb.getNAME().add(ImsCommandAttributes.ASTERISK);
			queryDb.getSHOW().add(QueryDb.ShowOptions.ALL);
			queryDb.getSHOW().add(QueryDb.ShowOptions.LOCAL);

			type2Command.setQueryDb(queryDb);

			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			Collection<Rcn> reconData = om.getReconService().getImsReconList(imsSystemName);

			return propertiesToCollectionDb(omResultSet, reconData);

		} catch (OmDatastoreException e) {
			e.setImsplexName(this.om.getOMConnection().getImsplex());
			throw e;
		} catch (DatastoreException e){
			throw convertDatatstoreException(e, sysplexId, imsplexName);
		} catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getDatabases()");

			this.setOmInteractionContext(omResultSet,resourceCacheSize, date, imsAttributes, methodKey, cmdExecuted);
		}
	}


	// ************************************************************************************************************
    // * It initially find which all IMS members have repo enabled and then call for repo info for databases
	// ************************************************************************************************************ 

	public Collection<Database> getDatabasesWithRepoInfo()throws OmException, OmDatastoreException, OmConnectionException {
	
		
		try{
			//Getting collection from Ims Service on which has repo
			Collection<Ims> membersWithRepo = om.getImsService().getRepoInfo(new String[]{"*"});
			
			if(!membersWithRepo.isEmpty()){
				
				//Getting an IMS member name from the collection
				String routeMember = membersWithRepo.iterator().next().getProperty(ImsResponseAttribute.MBR);
				
				//Calling to get the database Repo info with the identified IMS Member
				return getDatabasesWithRepoInfo(new String[]{routeMember});

			}
			return new ArrayList<Database>();
		
		
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getDatabasesWithRepoInfo()");
			
		}


	}
	
	// ************************************************************************************************************
    // * Get Repo Info for databases.
	// * The imsName parameter will be the names of Ims for which repo is enabled.
	// ************************************************************************************************************ 

	@Override
	public Collection<Database> getDatabasesWithRepoInfo(String[] imsSystemName) throws OmException, OmDatastoreException, OmConnectionException {

		if(logger.isDebugEnabled()) logger.debug(">> getDatabasesWithRepoInfo("+Arrays.toString(imsSystemName)+")");
		
		int resourceCacheSize = 0;
		Date date = null;
		ArrayList<String> imsAttributes = null;
		
		//Note the method key to be used for associating the service
		String methodKey = "getDatabasesWithRepoInfo"; 
		
		//This variable will hold the query that is been execute live mode or equivalent type2command query the derby query that is executed in cache mode. 
        //The value is fetched up to the GUI for showing a hover over the command button
        //Since this is done as part of a bug fix, a complete dynamic implementation of the value for the variable is not done
        // Currently its just hardcoded in the services level
        String cmdExecuted = null;
        
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
				
		try {
			imsSystemName = this.routeMemberFormater(imsSystemName);
			
			//Hardcoded value which needs to be enhanced to be dynamic eventually
            cmdExecuted = new String("CMD(QUERY DB NAME(*) SHOW(DEFN,GLOBAL,IMSID)) ROUTE(" + Arrays.toString(imsSystemName) + ")");
            
            
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);
			
			if(!this.om.isInteractionModeLive()){

				//Create a connection to the database table (cache) datastore
				ImsDatabaseRepoTable imsDatabaseRepoTable = ImsOmDatastore.getInstance().getImsDatabaseRepoStore();

				//Size greater than 0 then databases have been discovered
				resourceCacheSize = imsDatabaseRepoTable.getCountFromMemoryCache(sysplexId, imsplexName,imsSystemName);
				
				if( resourceCacheSize > 0){
					//Set the date the discovery was done
					date = imsDatabaseRepoTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemName);
					
					//Set the imsattributes that are in the memcache
					imsAttributes = ImsOmDatastore.getInstance().getGridHeaderTable().getGridHeadersMemCache(version.toString(), methodKey);
			        
			        /** Case: interaction mode is DEFAULT or CACHE**/
					return imsDatabaseRepoTable.getDatabases(sysplexId,imsplexName,imsSystemName,this.om);
				}
			}

			/***************************************************************************************
			 * Case: No discovery has been run, continue to operate without the cache (live mode)
			 ***************************************************************************************/
			
			//Query dbs for show all and status
			Type2Command type2Command = new Type2Command(); 
			type2Command.setVerb(Type2Command.VerbOptions.QUERY); 
			type2Command.setResource(Type2Command.ResourceOptions.DB);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));
			
			QueryDb queryDb = new QueryDb();
			queryDb.getNAME().add(ImsCommandAttributes.ASTERISK);
			queryDb.getSHOW().add(QueryDb.ShowOptions.DEFN);
			queryDb.getSHOW().add(QueryDb.ShowOptions.GLOBAL);
			queryDb.getSHOW().add(QueryDb.ShowOptions.IMSID);

			
			type2Command.setQueryDb(queryDb);

			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);
			
			return propertiesToCollection(omResultSet);

		} catch (OmDatastoreException e) {
			e.setImsplexName(this.om.getOMConnection().getImsplex());
			throw e;
		} catch (DatastoreException e){
			throw convertDatatstoreException(e, sysplexId, imsplexName);
		} catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getDatabasesWithRepoInfo("+Arrays.toString(imsSystemName)+")");
			
			this.setOmInteractionContext(omResultSet,resourceCacheSize, date, imsAttributes, methodKey, cmdExecuted);
			// This is specifically for REPO implementation
			// In repo implementation we never go live for Status, so the message Context is not set.
			//So we are explicitly setting it
			if(!this.om.isInteractionModeLive()){
				if(omResultSet == null)
					omResultSet = new OmResultSet();
				this.om.addOmMessageContext(methodKey,omResultSet.getOmMessageContext());
			}
		}
	
	}
	
	   // ************************************************************************************************************
    // * Get Database by Name for REPO info
    // ************************************************************************************************************
    @Override
    public Collection<Database> getDatabasesByNameWithRepoInfo(String[] databases) throws OmException, OmConnectionException, OmDatastoreException {
        if (logger.isDebugEnabled())
            logger.debug(">> getDatabasesByNameWithRepoInfo(" + Arrays.toString(databases) + ")");

        try {
            //Getting collection from Ims Service on which has repo
            Collection<Ims> membersWithRepo = om.getImsService().getRepoInfo(new String[] {"*"});

            if (!membersWithRepo.isEmpty()) {

                //Getting an IMS member name from the collection
                String routeMember = membersWithRepo.iterator().next().getProperty(ImsResponseAttribute.MBR);

                return getDatabasesByNameWithRepoInfo(databases, new String[] {routeMember});
            }
            return new ArrayList<Database>();
        } finally {
            if (logger.isDebugEnabled())
                logger.debug("<< getDatabasesByNameWithRepoInfo(" + Arrays.toString(databases) + ")");
        }
    }

    @Override
    public Collection<Database> getDatabasesByNameWithRepoInfo(String[] databases, String[] imsSystemName) throws OmException, OmConnectionException,
            OmDatastoreException {
        if (logger.isDebugEnabled())
            logger.debug(">> getDatabasesByNameWithRepoInfo(" + Arrays.toString(databases) + "," + Arrays.toString(imsSystemName) + ")");

        int resourceCacheSize = 0;
        Date date = null;
        ArrayList<String> imsAttributes = null;

        //Note the method key to be used for associating the service
        String methodKey = "getDatabasesByNameWithRepoInfo";

        //Local omresultSet otherwise we risk data corruption of the service is reused. 
        OmResultSet omResultSet = null;

        try {
            imsSystemName = this.routeMemberFormater(imsSystemName);

            //Set and configure the version using mapped resource version and the route name
            this.version = this.setVersion(this.resourceVersion, imsSystemName);

            /** Case: If it is not live then enter this block otherwise drop down to the live code **/
            if (!this.om.isInteractionModeLive()) {

              //Create a connection to the database table (cache) datastore
                ImsDatabaseRepoTable imsDatabaseRepoTable = ImsOmDatastore.getInstance().getImsDatabaseRepoStore();

                //Size greater than 0 then databases have been discovered
                resourceCacheSize = imsDatabaseRepoTable.getCountFromMemoryCache(sysplexId, imsplexName,imsSystemName);
                
                if( resourceCacheSize > 0){
                    //Set the date the discovery was done
                    date = imsDatabaseRepoTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemName);
                    
                    //Set the imsattributes that are in the memcache
                    imsAttributes = ImsOmDatastore.getInstance().getGridHeaderTable().getGridHeadersMemCache(version.toString(), "getDatabasesWithRepoInfo");
                    
                    /** Case: interaction mode is DEFAULT or CACHE **/
                    return imsDatabaseRepoTable.getDatabasesByName(sysplexId, imsplexName, imsSystemName, databases, this.om);
                }
            }
            
            
         
            /** Case: No discovery has been run, continue to operate without the cache (live mode) **/
            //Query dbs for show all and status
            Type2Command type2Command = new Type2Command();
            type2Command.setVerb(Type2Command.VerbOptions.QUERY);
            type2Command.setResource(Type2Command.ResourceOptions.DB);
            type2Command.getRoute().addAll(Arrays.asList(imsSystemName));

            QueryDb queryDb = new QueryDb();
            queryDb.getNAME().addAll(Arrays.asList(databases));
            queryDb.getSHOW().add(QueryDb.ShowOptions.DEFN);
            queryDb.getSHOW().add(QueryDb.ShowOptions.GLOBAL);
            queryDb.getSHOW().add(QueryDb.ShowOptions.IMSID);

            type2Command.setQueryDb(queryDb);

            Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
            String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

            Service service = new Service(this.om, this.version);
            omResultSet = service.executeCommand(methodKey, cmd);

            return propertiesToCollection(omResultSet);

        } catch (OmDatastoreException e) {
            e.setImsplexName(this.om.getOMConnection().getImsplex());
            throw e;
        } catch (DatastoreException e) {
            throw convertDatatstoreException(e, sysplexId, imsplexName);
        } catch (OmCommandGenerationException e) {
            throw new OmRuntimeException(e);
        } finally {
            if (logger.isDebugEnabled())
                logger.debug("<< getDatabasesByNameWithRepoInfo(" + Arrays.toString(databases) + "," + Arrays.toString(imsSystemName) + ")");
            this.setOmInteractionContext(omResultSet, resourceCacheSize, date, imsAttributes, methodKey);

            // This is specifically for REPO implementation
            // In repo implementation we never go live for Status, so the message Context is not set.
            //So we are explicitly setting it
            if (!this.om.isInteractionModeLive()) {
                if (omResultSet == null)
                    omResultSet = new OmResultSet();
                this.om.addOmMessageContext(methodKey, omResultSet.getOmMessageContext());
            }
        }
    }
	// ************************************************************************************************************
	// * Get getDatabasesByName - Get listing of databases
	// ************************************************************************************************************
	@Override
	public Collection<Database> getDatabasesByName(String[] databases) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getDatabasesByName("+Arrays.toString(databases)+")");

		try{
			return getDatabasesByName(databases,new String[]{ImsCommandAttributes.ASTERISK});
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getDatabasesByName("+Arrays.toString(databases)+")");
		}
	}

	@Override
	public Collection<Database> getDatabasesByName(String[] databases, String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getTransactions("+Arrays.toString(imsSystemName)+")");

		int resourceCacheSize = 0;
		Date date = null;
		ArrayList<String> imsAttributes = null;

		String methodKey = "getDatabasesByName";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try {
			imsSystemName = this.routeMemberFormater(imsSystemName);

			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);

			/** Case: If it is not live then enter this block otherwise drop down to the live code **/
			if(!this.om.isInteractionModeLive()){

				//Create a connection to the transaction table (cache) datastore
				ImsDatabaseTable imsDatabaseTable = ImsOmDatastore.getInstance().getImsDatabaseStore();

				//Size greater than 0 then transactions have been discovered
				resourceCacheSize = imsDatabaseTable.getCountFromMemoryCache(this.sysplexId,this.imsplexName,imsSystemName);

				if( resourceCacheSize > 0){

					//Set the date the discovery was done
					date = imsDatabaseTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemName);

					//Set the imsattributes that are in the memcache
					imsAttributes = ImsOmDatastore.getInstance().getGridHeaderTable().getGridHeadersMemCache(version.toString(), "getDatabases");

					/** Case: interaction mode is DEFAULT or CACHE**/
					return imsDatabaseTable.getDatabasesByName(this.sysplexId, this.imsplexName, imsSystemName, databases, this.om);
				}
			}

			/** Case: No discovery has been run, continue to operate without the cache (live mode)**/
			Type2Command type2Command = new Type2Command(); 
			type2Command.setVerb(Type2Command.VerbOptions.QUERY); 
			type2Command.setResource(Type2Command.ResourceOptions.DB);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));

			QueryDb queryDb = new QueryDb();
			queryDb.getNAME().addAll(Arrays.asList(databases));
			queryDb.getSHOW().add(QueryDb.ShowOptions.ALL);
			queryDb.getSHOW().add(QueryDb.ShowOptions.LOCAL);

			type2Command.setQueryDb(queryDb);

			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			Collection<Rcn> reconData = om.getReconService().getImsReconList(imsSystemName);

			return propertiesToCollectionDb(omResultSet, reconData);

		} catch (OmDatastoreException e) {
			e.setImsplexName(this.om.getOMConnection().getImsplex());
			throw e;
		} catch (DatastoreException e){
			throw convertDatatstoreException(e, sysplexId, imsplexName);
		} catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< getTransactions("+Arrays.toString(imsSystemName)+")");

			this.setOmInteractionContext(omResultSet,resourceCacheSize, date, imsAttributes, "getDatabases");
		}
	}


	// ************************************************************************************************************
	// * stopDatabases - Stop Databases
	// ************************************************************************************************************
	@Override
	public Collection<Database> stopDatabases(String[] databases, _DB_STOP value, _DB_OPTION[] options, _DB_SCOPE scope, String[] systemId) throws OmException, OmConnectionException, OmDatastoreException {
		if (logger.isDebugEnabled()){
			logger.debug(">> stopDatabases(" + Arrays.toString(databases) + ", " + value + ", " + Arrays.toString(options) + ", " + scope + "," + Arrays.toString(systemId) + ")");
		}

		String methodKey = "stopDatabases";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		//Set and configure the version using mapped resource version and the route name
		this.version = this.setVersion(this.resourceVersion , systemId);

		try{
			// Create a instance of the command builder
			DbUpdateCommandBuilder dbCommandBuilder = new DbUpdateCommandBuilder();

			// Instruct the command builder to create a custom command or you
			// can use one of the predefined ones.
			dbCommandBuilder.setName(databases);
			dbCommandBuilder.setStop(value);
			dbCommandBuilder.setScope(scope);
			dbCommandBuilder.setOptions(options);
			dbCommandBuilder.setRoute(systemId);
			String cmd = dbCommandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);
		}finally{
			if (logger.isDebugEnabled()){
				logger.debug("<< stopDatabases(" + Arrays.toString(databases) + ", " + value + ", " + Arrays.toString(options) + ", " + scope + "," + Arrays.toString(systemId) + ")");
			}

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Start Databases 
	// ************************************************************************************************************
	@Override
	public Collection<Database> startDatabases(String[] databases, _DB_START value,_DB_ACCTYPE accType, _DB_AREA area, _DB_OPTION[] options,_DB_SCOPE scope, String[] systemId) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> startDatabases("+Arrays.toString(databases)+ ", " +value +", "+ ", " +accType +", "+ ", " +area +", " +Arrays.toString(options)+ ", " + scope + ","+ Arrays.toString(systemId)+")");

		String methodKey = "startDatabases";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		//Set and configure the version using mapped resource version and the route name
		this.version = this.setVersion(this.resourceVersion , systemId);

		try{
			//Create a instance of the command builder
			DbUpdateCommandBuilder dbCommandBuilder = new DbUpdateCommandBuilder();

			//Instruct the command builder to create a custom command or you can use one of the predefined ones.
			dbCommandBuilder.setName(databases);
			dbCommandBuilder.setStart(value); 
			dbCommandBuilder.setAccType(accType);
			dbCommandBuilder.setArea(area);
			dbCommandBuilder.setScope(scope);
			dbCommandBuilder.setOptions(options);
			dbCommandBuilder.setRoute(systemId);
			String cmd = dbCommandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);

		} finally{
			if(logger.isDebugEnabled()) {
				logger.debug("<< startDatabases("+Arrays.toString(databases)+ ", " +value +", "+ ", " +accType +", "+ ", " +area +", " +Arrays.toString(options)+ ", " + scope + ","+ Arrays.toString(systemId)+")");
			}

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Update Database Lock 
	// ************************************************************************************************************
	@Override
	public Collection<Database> updateDatabasesLock(String[] databases,_DB_LOCK lock, _DB_SCOPE scope, String[] systemId) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> updateDatabasesLock("+Arrays.toString(databases)+ ", " +lock +", "+ ", " +scope+ ","+ Arrays.toString(systemId)+")");

		String methodKey = "updateDatabasesLock";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try{
			//Create a instance of the command builder
			DbUpdateCommandBuilder dbCommandBuilder = new DbUpdateCommandBuilder();

			//Instruct the command builder to create a custom command or you can use one of the predefined ones.
			dbCommandBuilder.setName(databases);
			dbCommandBuilder.setLock(lock);
			dbCommandBuilder.setScope(scope);
			dbCommandBuilder.setRoute(systemId);
			String cmd = dbCommandBuilder.getCommand();

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);

		}finally{
			if(logger.isDebugEnabled()){
				logger.debug("<< updateDatabasesLock("+Arrays.toString(databases)+ ", " +lock +", "+ ", " +scope+ ","+ Arrays.toString(systemId)+")");
			}

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get Programs related to a Database
	// ************************************************************************************************************
	@Override
	public Collection<Database> getDatabasePrograms() throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getDatabasePrograms()");

		try{
			return getDatabasePrograms(new String[]{DbQueryCommandBuilder.STAR},new String[]{DbQueryCommandBuilder.STAR});
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getDatabasePrograms()");
		}
	}

	@Override
	public Collection<Database> getDatabasePrograms(String[] databases) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getDatabasePrograms("+Arrays.toString(databases)+ ")");

		try{
			return getDatabasePrograms(databases,new String[]{DbQueryCommandBuilder.STAR});
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getDatabasePrograms("+Arrays.toString(databases)+ ")");
		}
	}

	@Override
	public Collection<Database> getDatabasePrograms(String[] databases,String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getDatabasePrograms("+Arrays.toString(databases)+ ", " + Arrays.toString(imsSystemName)+")");

		String methodKey = "getDatabasePrograms";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try {
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);

			Type2Command type2Command = new Type2Command();
			type2Command.setVerb(Type2Command.VerbOptions.QUERY);
			type2Command.setResource(Type2Command.ResourceOptions.DB);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));

			QueryDb queryDb = new QueryDb();
			queryDb.getSHOW().add(QueryDb.ShowOptions.PGM);
			queryDb.getNAME().addAll(Arrays.asList(databases));
			type2Command.setQueryDb(queryDb);

			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);

		}catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		}finally{
			if(logger.isDebugEnabled()){ 
				logger.debug("<< getDatabasePrograms("+Arrays.toString(databases)+ ", " + Arrays.toString(imsSystemName)+")");
			}

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	@Override
	public Collection<Database> getDatabasesForProgram(Program program, String[] imsSystemName) throws OmDatastoreException, OmException, OmConnectionException{
		if(logger.isDebugEnabled()) logger.debug(">> getDatabasesForProgram("+program+ ", " + Arrays.toString(imsSystemName)+")");

		String methodKey = "getDatabasesForProgram";
		Collection<Database> databases = new ArrayList<Database>();

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = new OmResultSet();

		try{
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);

			String psbName = program.getProperty(ProgramResponseAttribute.PGM);

			Collection<Program> programs = om.getProgramService().getProgramDatabases(new String[] {psbName}, imsSystemName);

			ArrayList<String> programNames = new ArrayList<String>();

			for (Program pgm : programs) {
				if (pgm.getProperty(ProgramResponseAttribute.DB) != null && !(pgm.getProperty(ProgramResponseAttribute.DB).isEmpty())) {
					programNames.add(pgm.getProperty(ProgramResponseAttribute.DB).trim());
				}
			}

			String [] programNamesArray = programNames.toArray(new String[programNames.size()]);

			if (programNamesArray.length == 0) {
				
				return null;
			}
			else {
				databases = om.getDatabaseService().getDatabasesByName(programNamesArray, imsSystemName);

				//Extract the ominteractionContext for the called service so we can get its omInteractionContext which contains the column headers
				ArrayList<String> imsAttributes = om.getOmInteractionContexts().get("getDatabases").getResourceAttributes();

				//Add the column headers to the omInteractionContext
				omResultSet.getOmInteractionContext().setResourceAttributes(imsAttributes);

				return databases;
			}
		}finally{
			if(logger.isDebugEnabled()) {
				if(logger.isDebugEnabled()) logger.debug("<< getDatabasesForProgram("+program+ ", " + Arrays.toString(imsSystemName)+")");
			}

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}
	// ************************************************************************************************************
	// * Get Databases for a Transaction
	// ************************************************************************************************************
	public Collection<Database> getDatabasesForTransaction(Transaction transaction, String[] imsSystemName) throws OmDatastoreException, OmException, OmConnectionException{
		if(logger.isDebugEnabled()) logger.debug(">> getDatabasesForTransaction("+transaction+ ", " + Arrays.toString(imsSystemName)+")");

		String methodKey = "getDatabasesForTransaction";
		Collection<Database> databases = new ArrayList<Database>();

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = new OmResultSet();

		try{
			String psbName = null;
			Set<String> databaseNames = new HashSet<String>();

			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);

			psbName = transaction.getProperty(TransactionResponseAttribute.PSB).trim();

			Collection<Program> programs = this.om.getProgramService().getProgramDatabases(new String[] {psbName}, imsSystemName);

			for (Program pgm : programs) {
				if (pgm.getProperty(ProgramResponseAttribute.DB) != null && !(pgm.getProperty(ProgramResponseAttribute.DB).isEmpty())) {
					databaseNames.add(pgm.getProperty(ProgramResponseAttribute.DB).trim());
				}
			}
			int dbSize = databaseNames.size();
			if(dbSize == 0) {
				return null;
			} else{
				//Call teh database service to get the databases by name
				databases =  this.getDatabasesByName(databaseNames.toArray(new String[databaseNames.size()]), imsSystemName);

				//Extract the ominteractionContext for the called database servie so we can get its omInteractionContext which contains the column headers
				ArrayList<String> imsAttributes = om.getOmInteractionContexts().get("getDatabases").getResourceAttributes();

				//Add the column headers to the omInteractionContext
				omResultSet.getOmInteractionContext().setResourceAttributes(imsAttributes);

				return databases;
			}
		}finally{
			if(logger.isDebugEnabled()) {
				logger.debug("<< getDatabasesForTransaction("+transaction+ ", " + Arrays.toString(imsSystemName)+")");
			}

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Get Databases by Status
	// ************************************************************************************************************
	@Override
	public Collection<Database> getDatabaseByStatus(QueryDb.StatusOptions[] status) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getDatabaseByStatus("+Arrays.toString(status)+ ")");

		try{
			return getDatabaseByStatus(status,new String[]{ImsCommandAttributes.ASTERISK});
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<<getDatabaseByStatus("+Arrays.toString(status)+ ")");
		}
	}

	@Override
	public Collection<Database> getDatabaseByStatus(QueryDb.StatusOptions[] status, String[] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getDatabaseByStatus("+Arrays.toString(status)+ ", " + Arrays.toString(imsSystemName)+")");

		String methodKey = "getDatabaseByStatus";

		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;

		try {
			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);

			Type2Command type2Command = new Type2Command();
			type2Command.setVerb(Type2Command.VerbOptions.QUERY);
			type2Command.setResource(Type2Command.ResourceOptions.DB);
			type2Command.getRoute().addAll(Arrays.asList(imsSystemName));

			QueryDb queryDb = new QueryDb();
			queryDb.getSTATUS().addAll(Arrays.asList(status));
			queryDb.getSHOW().add(QueryDb.ShowOptions.ALL);
			queryDb.getSHOW().add(QueryDb.ShowOptions.LOCAL);
			
			type2Command.setQueryDb(queryDb);

			Type2CommandSerializable type2CommandSerializable = new Type2CommandSerializable();
			String cmd = type2CommandSerializable.fromType2CommandObject(type2Command);

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);

			return propertiesToCollection(omResultSet);

		}catch (OmCommandGenerationException e){
			throw new OmRuntimeException(e);
		} finally{
			if(logger.isDebugEnabled()) {
				logger.debug("<< getDatabaseByStatus("+Arrays.toString(status)+ ", " + Arrays.toString(imsSystemName)+")");
			}

			this.setOmInteractionContext(omResultSet, methodKey);
		}
	}

	// ************************************************************************************************************
	// * Discovery Members
	// ************************************************************************************************************

	@Override
	public int discoverDatabases() throws OmDatastoreException, OmException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> discoverDatabases()");

		try{
			Collection<Imsplex> plexResources = this.om.getImsplexService().getImsResources();
			int insertionSize = 0;

			for (Imsplex plexMemberResource : plexResources) {
				String imsMbrName = plexMemberResource.getProperty(ImsplexResponseAttribute.IMSMBR);
				insertionSize += this.discoverDatabases(imsMbrName);
			}

			return insertionSize;
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< discoverDatabases()");
		}
	}

	@Override
	public int discoverDatabases(String imsSystemName) throws OmDatastoreException, OmException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> discoverDatabases("+imsSystemName+")");

		int insertionSize 	= 0;

		try {
			this.isDiscovering = true;
			this.om.setInteractionMode(Om.InteractionMode.LIVE);
			Collection<Database> databases = this.getDatabases(new String[]{imsSystemName});
			this.om.setInteractionMode(Om.InteractionMode.DEFAULT);

			ImsDatabaseTable imsDatabaseTable = ImsOmDatastore.getInstance().getImsDatabaseStore();
			imsDatabaseTable.deleteTable(this.sysplexId,this.imsplexName,imsSystemName);
			insertionSize = imsDatabaseTable.addImsDatabase(databases, this.sysplexId, this.imsplexName);
			imsDatabaseTable.autoConfigureResourceMetaData(this.sysplexId, this.imsplexName, imsSystemName);

			//Since the discovery was run in live mode we need to add to the omInteractionContext the size and date
			String [] imsSystemNameArray = new String[]{imsSystemName};
			int resourceCacheSize = imsDatabaseTable.getCountFromMemoryCache(sysplexId, imsplexName,imsSystemNameArray);
			Date date = imsDatabaseTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemNameArray);

			OmInteractionContext omInteractionContext = this.om.getOmInteractionContexts().get("getDatabases");
			omInteractionContext.setResourceLastUpdated(date);
			omInteractionContext.setResourceCacheSize(resourceCacheSize);

			return insertionSize;
		} catch (OmDatastoreException e) {
			e.setImsplexName(this.om.getOMConnection().getImsplex());
			throw e;
		} catch (DatastoreException e) {
			throw convertDatatstoreException(e, this.sysplexId, this.imsplexName);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< discoverDatabases("+imsSystemName+")");
		}
	}

	@Override
	public int discoverDatabasesWithRepoInfo() throws OmDatastoreException, OmException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> discoverDatabasesWithRepoInfo()");
		
		try{
			int insertionSize = 0;
			//Getting collection from Ims Service on which has repo
			Collection<Ims> membersWithRepo = om.getImsService().getRepoInfo(new String[]{"*"});
			
			if(!membersWithRepo.isEmpty()){
				
				//Getting an IMS member name from the collection
				String routeMember = membersWithRepo.iterator().next().getProperty(ImsResponseAttribute.MBR);
				
				//Inserting Condition if the IMS resource has Repo= true.Only then try to discover it
				insertionSize += this.discoverDatabasesWithRepoInfo(routeMember);

			}
			return insertionSize;
			
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< discoverDatabasesWithRepoInfo()");
		}
	}

	@Override
	public int discoverDatabasesWithRepoInfo(String imsSystemName) throws OmDatastoreException, OmException, OmConnectionException {
		if(logger.isDebugEnabled()) logger.debug(">> discoverDatabasesWithRepoInfo("+imsSystemName+")");
		int insertionSize 	= 0;

		try {
			this.isDiscovering = true;
			this.om.setInteractionMode(Om.InteractionMode.LIVE);
			Collection<Database> databases = this.getDatabasesWithRepoInfo(new String[]{imsSystemName});
			this.om.setInteractionMode(Om.InteractionMode.DEFAULT);

			ImsDatabaseRepoTable imsDatabaseRepoTable = ImsOmDatastore.getInstance().getImsDatabaseRepoStore();
			imsDatabaseRepoTable.deleteTable(this.sysplexId,this.imsplexName,imsSystemName);
			insertionSize = imsDatabaseRepoTable.addImsDatabase(databases, this.sysplexId, this.imsplexName);
			imsDatabaseRepoTable.autoConfigureResourceMetaData(this.sysplexId, this.imsplexName, imsSystemName);
			
			//Since the discovery was run in live mode we need to add to the omInteractionContext the size and date
			String [] imsSystemNameArray = new String[]{imsSystemName};
			int resourceCacheSize = imsDatabaseRepoTable.getCountFromMemoryCache(sysplexId, imsplexName,imsSystemNameArray);
			Date date = imsDatabaseRepoTable.getLastestDateFromMemoryCache(sysplexId, imsplexName,imsSystemNameArray);
				
			OmInteractionContext omInteractionContext = this.om.getOmInteractionContexts().get("getDatabasesWithRepoInfo");
			omInteractionContext.setResourceLastUpdated(date);
			omInteractionContext.setResourceCacheSize(resourceCacheSize);
			
		} catch (OmDatastoreException e) {
			e.setImsplexName(this.om.getOMConnection().getImsplex());
			throw e;
		} catch (DatastoreException e) {
			throw convertDatatstoreException(e, sysplexId,  imsplexName);
		} finally{
			if(logger.isDebugEnabled()) logger.debug("<< discoverDatabasesWithRepoInfo("+imsSystemName+")");
		}

		return insertionSize;
	}
	// ************************************************************************************************************
	// * PRIVATE MEMBER HELPERS
	// ************************************************************************************************************	
	/**
	 * Method will map a omResulset to a collection of imsplex beans. It will also
	 * append to each bean the sysplex and imsplex name. 
	 * @param omResultSet
	 * @return
	 */
	private Collection<Database> propertiesToCollection(OmResultSet omResultSet) {
		Collection<Database> tempList = new ArrayList<Database>();

		Properties[] properties = omResultSet.getResponseProperties();

		for (Properties p : properties) {
			Database database = new Database();
			database.setMap((Map)p);
			database.getMap().put(ImsBaseDastoreConstants.SYSPLEX_ID, omResultSet.getEnvironment());
			database.getMap().put(ImsBaseDastoreConstants.IMSPLX, omResultSet.getImsplex());
			tempList.add(database);
		}

		return tempList;
	}

	/**
	 * Converts properties array response and recon data into a collection of Db.
	 * @param properties
	 * @param reconData
	 * @return
	 */
	private Collection<Database> propertiesToCollectionDb(OmResultSet omResultSet, Collection<Rcn> reconData) {

		Properties[] properties = omResultSet.getResponseProperties();

		Collection<Database> dbSet = new ArrayList<Database>();
		HashMap<String, Rcn> reconList = new HashMap<String, Rcn>();

		//ArrayList<Recon> reconList = new ArrayList<Recon>();
		//Put the recons in a search-able list for speed.

		for (Rcn recon : reconData) {
			reconList.put(recon.getProperty(RcnResponseAttribute.RECON_IMS_NAME).trim(), recon);
		}

		if (properties != null) { //If an error occurs for all members this could be null

			Database db = null;
			int propertiesLength = properties.length;

			for (int i = 0; i < propertiesLength; i++) {
				db = new Database((Map) properties[i]);
				//db.setOmMessageContext(omResultSet.getOmMessageContext());

				String dbName = db.getProperty(DatabaseResponseAttribute.MBR);
				Rcn dbRecon = reconList.get(db.getProperty(DatabaseResponseAttribute.MBR));
				//Recon dbRecon = reconList.get(0);
				if (dbRecon != null) {
					db.setRecon(dbRecon);
				}

				dbSet.add(db);
			}
		}

		return dbSet;
	}

}
