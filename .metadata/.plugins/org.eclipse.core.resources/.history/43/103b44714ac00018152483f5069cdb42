/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2015 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.datastore;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;

import com.ibm.im.ac.datastore.Datastore;
import com.ibm.im.ac.datastore.DatastoreException;
import com.ibm.im.ac.datastore.impl.SysplexTable;
import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.common.services.Om;
import com.ibm.ims.ea.om.pgm.Program;
import com.ibm.ims.ea.om.pgm.Program.ProgramResponseAttribute;

public class ImsProgramRepoTable extends AbstractImsBaseDatastore{
    private static final String COMMA               = " , ";
    private static final String VERSION             = "1.1";
    public static final String  TABLE_NAME          = "PROGRAM_REPO";
    public static final String  SYSPLEX_ID          = "SYSPLEX_ID";
    public static final String  RPGM_ID              = "RPGM_ID";
    public static final String  TIMESTAMP           = "TIMESTAMP";
    public static final String  UPDATED             = "UPDATED";
	
	private static final String SYSPLEX_TABLE_NAME  = SysplexTable.TABLE_NAME;
	private static final String INDEX_NAME          = "INDEX_PGM_REPO_MBR_SYSPLEX_IMSPLEX";
	
	protected ImsProgramRepoTable(Datastore parentDatastore) throws DatastoreException {
		super(parentDatastore, TABLE_NAME, VERSION, ProgramResponseAttribute.MBR.toString());
	}

	@Override
	public void createTables() throws DatastoreException { 
		
		StringBuffer createSQL = new StringBuffer("CREATE TABLE ").append(this.tableName).append(" (")
				.append(RPGM_ID).append(" INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY, ")
				.append(ProgramResponseAttribute.CC).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.CCTXT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.IMSID).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.MBR).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.PGM).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RBMPT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RDOPT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.REPO).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RFP).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RGPSB).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RLANG).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RRSDNT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RRGNT).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RSCHD).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RTLS).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RTMCR).append(" VARCHAR(255), ")
				.append(ProgramResponseAttribute.RTMUP).append(" VARCHAR(255), ")
				.append(SYSPLEX_ID).append(" INTEGER, ")
				.append(IMSPLX).append(" VARCHAR(255) NOT NULL, ")
				.append(UPDATED).append(" TIMESTAMP DEFAULT CURRENT_TIMESTAMP, ")
		 		.append(" FOREIGN KEY (").append(SYSPLEX_ID).append(") REFERENCES ").append(SYSPLEX_TABLE_NAME).append("(").append(SYSPLEX_ID).append(") ON DELETE SET NULL) ");
	
		    // Don't delete this is a problem with this trigger causing duplicates on update.
			/*StringBuffer trigger = new StringBuffer("CREATE TRIGGER ").append(UPDATE_EDIT_DATE_TRIGGER)
				.append(" AFTER UPDATE  OF LSTT ON ").append(this.tableName)
				.append(" REFERENCING OLD AS MODIFIEDROW FOR EACH  ROW ")
				.append(" UPDATE " ).append(this.tableName).append(" SET ")
				.append(this.tableName).append(".").append(UPDATED).append(" = ").append(" CURRENT_TIMESTAMP ")
				.append(" WHERE ").append(PGM_ID).append(" = ").append(" MODIFIEDROW").append(".").append(PGM_ID);*/
			
	         StringBuffer index = new StringBuffer("CREATE INDEX ").append(INDEX_NAME).append(" ON ").append(this.tableName)
	                    .append(" (").append(ProgramResponseAttribute.PGM).append(",")
	                    .append(ProgramResponseAttribute.MBR).append(",")
	                    .append(SYSPLEX_ID).append(",")
	                    .append(IMSPLX).append(")");
		
		try {
			execute(createSQL.toString());
		} catch (DatastoreException e) {
				OmDatastoreException omDatastoreException = new OmDatastoreException(e);
				omDatastoreException.setQuery(createSQL.toString());
				throw omDatastoreException;
		}
		
		
	    try {
              execute(index.toString());
        } catch (DatastoreException e) {
              OmDatastoreException omDatastoreException = new OmDatastoreException(e);
              omDatastoreException.setQuery(index.toString());
              throw omDatastoreException;
        }
	}
	
	public int addImsProgram(Collection<Program> programs,int sysplexId, String imsplexName)  throws OmDatastoreException{
		Connection connection 	= null;
        PreparedStatement ps 	= null;
        int insertionSize 	= 0;
        
        StringBuffer sb = new StringBuffer("INSERT INTO ")
        .append(this.tableName)
        .append(" (")
        .append(ProgramResponseAttribute.CC).append(COMMA)
		.append(ProgramResponseAttribute.CCTXT).append(COMMA)
		.append(ProgramResponseAttribute.IMSID).append(COMMA)
		.append(ProgramResponseAttribute.MBR).append(COMMA)
		.append(ProgramResponseAttribute.PGM).append(COMMA)
		.append(ProgramResponseAttribute.RBMPT).append(COMMA)
		.append(ProgramResponseAttribute.RDOPT).append(COMMA)
		.append(ProgramResponseAttribute.REPO).append(COMMA)
		.append(ProgramResponseAttribute.RFP).append(COMMA)
		.append(ProgramResponseAttribute.RGPSB).append(COMMA)
		.append(ProgramResponseAttribute.RLANG).append(COMMA)
		.append(ProgramResponseAttribute.RRSDNT).append(COMMA)
		.append(ProgramResponseAttribute.RRGNT).append(COMMA)
		.append(ProgramResponseAttribute.RSCHD).append(COMMA)
		.append(ProgramResponseAttribute.RTLS).append(COMMA)
		.append(ProgramResponseAttribute.RTMCR).append(COMMA)
		.append(ProgramResponseAttribute.RTMUP).append(COMMA)
		.append(SYSPLEX_ID).append(COMMA)
    	.append(IMSPLX)
        .append(") ")
    	.append(" VALUES (?,?,?,?,?,?,?,?,?,?,"
    			       + "?,?,?,?,?,?,?,?,?)");
        
		try {
		    int i = 0;
            connection = parentDatastore.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sb.toString(),Statement.RETURN_GENERATED_KEYS);
            
			for (Program pgm : programs) {
				ps.setString(1, pgm.getProperty(ProgramResponseAttribute.CC));
				ps.setString(2, pgm.getProperty(ProgramResponseAttribute.CCTXT));
				ps.setString(3, pgm.getProperty(ProgramResponseAttribute.IMSID));
				ps.setString(4, pgm.getProperty(ProgramResponseAttribute.MBR));
				ps.setString(5, pgm.getProperty(ProgramResponseAttribute.PGM));
				ps.setString(6, pgm.getProperty(ProgramResponseAttribute.RBMPT));
				ps.setString(7, pgm.getProperty(ProgramResponseAttribute.RDOPT));
				ps.setString(8, pgm.getProperty(ProgramResponseAttribute.REPO));
				ps.setString(9, pgm.getProperty(ProgramResponseAttribute.RFP));
				ps.setString(10, pgm.getProperty(ProgramResponseAttribute.RGPSB));
				ps.setString(11, pgm.getProperty(ProgramResponseAttribute.RLANG));
				ps.setString(12, pgm.getProperty(ProgramResponseAttribute.RRSDNT));
				ps.setString(13, pgm.getProperty(ProgramResponseAttribute.RRGNT));
				ps.setString(14, pgm.getProperty(ProgramResponseAttribute.RSCHD));
				ps.setString(15, pgm.getProperty(ProgramResponseAttribute.RTLS));
				ps.setString(16, pgm.getProperty(ProgramResponseAttribute.RTMCR));
				ps.setString(17, pgm.getProperty(ProgramResponseAttribute.RTMUP));
				ps.setInt(18, sysplexId);
				ps.setString(19, imsplexName);
				ps.addBatch();
				
				if ((++i) % 1000 == 0) {
					insertionSize += ps.executeBatch().length;
					connection.commit();
					ps.clearBatch();
				}
			}
		
			insertionSize += ps.executeBatch().length;
			connection.commit();
			ps.clearBatch();
			
		} catch (SQLException e) {
        	try {
				logAndRollback(connection, e);
			} catch (DatastoreException e1) {
				OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
				omDatastoreException.setQuery(sb.toString());
				throw omDatastoreException;
			}
		} finally {
			close(ps); 
			close(connection); 
		}

		return insertionSize;
	}
	
	    
	//*******************************************************************************************
	// get programs methods
	//*******************************************************************************************
	public Collection<Program> getPrograms(int sysplexId) throws OmDatastoreException {
		Collection<Program> programs = new ArrayList<Program>();
		
		try{
			programs =  getPrograms(sysplexId, null, null,null);
		} catch (OmConnectionException e) { 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		} catch (OmException e){ 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		}
		return programs;
	}
	
	public Collection<Program> getPrograms(int sysplexId, String imsplexName) throws OmDatastoreException {
		Collection<Program> programs = new ArrayList<Program>();
		
		try{
			programs =  getPrograms(sysplexId, imsplexName, null,null);
		} catch (OmConnectionException e) { 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		} catch (OmException e){ 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		}
		return programs;
	}
	
	public Collection<Program> getPrograms(int sysplexId,String imsplexName , String[] imsSystemName) throws OmDatastoreException {
		Collection<Program> programs = new ArrayList<Program>();
		
		try{
			programs =  getPrograms(sysplexId, imsplexName, imsSystemName,null);
		} catch (OmConnectionException e) { 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		} catch (OmException e){ 
			/** Will not be thrown because we pass null for the Om, so eat the error **/
		}
		return programs;
	}
		
	public Collection<Program> getPrograms(int sysplexId, String imsplexName,String[] imsSystemName,Om om) throws OmDatastoreException, OmException, OmConnectionException {
		Connection connection 	= null;
	    PreparedStatement ps 	= null;
	    ResultSet results 		= null;
	    StringBuffer sb			= null; 
	    Collection<Program> programs = new ArrayList<Program>();
	  
	    
	    try {
         connection = parentDatastore.getConnection();
	            
	        //Case: no route has been passed or the length is 0 but so we need to check if an impslexname has been passed.
	        if(imsSystemName == null || imsSystemName.length == 0){
	        	if(imsplexName != null){
	        		sb = new StringBuffer("SELECT * FROM ")
	                .append(this.tableName)
	                .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
	                .append(" AND ").append(IMSPLX).append(" = ? ")
	                .append(" ORDER BY ").append(ProgramResponseAttribute.PGM);
	                    
	                ps = connection.prepareStatement(sb.toString());
	                ps.setInt(1, sysplexId);
	                ps.setString(2, imsplexName);
	            }else{
	            	 sb = new StringBuffer("SELECT * FROM ")
	                 .append(this.tableName)
	                 .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
	                 .append(" ORDER BY ").append(ProgramResponseAttribute.PGM);
	                    
	                 ps = connection.prepareStatement(sb.toString());
	                 ps.setInt(1, sysplexId);
	            }
	        		
	        	results = ps.executeQuery();
	                
	            while (results.next()) {
	              	 Program pgm = new Program(results);
	 	             programs.add(pgm);
	            }
	                
	        }else{ //Route has been passed and for each we route the command and concat the results
	        	String sqlIn = this.sqlInGenerator(ProgramResponseAttribute.MBR.toString(), imsSystemName);
	            sb = new StringBuffer("SELECT * FROM ")
	                .append(this.tableName)
	                .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
	                .append(" AND ").append(IMSPLX).append(" = ? ")
	                .append(sqlIn)
	                .append(" ORDER BY ").append(ProgramResponseAttribute.PGM);
	                        
	                 ps = connection.prepareStatement(sb.toString());
	                 ps.setInt(1, sysplexId);
	                 ps.setString(2, imsplexName);
	               	
	                 results = ps.executeQuery();
	                    
	                 while (results.next()) {
	                   	 Program pgm = new Program(results);
	     	             programs.add(pgm);
	                 }
	        }
	        	 
	        } catch(SQLException e) {
	    	try {
	    		logAndRollback(connection, e);
	        } catch (DatastoreException e1) {
	            OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
	            omDatastoreException.setQuery(sb.toString());
	            omDatastoreException.setEnvironmentId(sysplexId);
	            throw omDatastoreException;
	        }
	    } finally {
	         close(results);    
	         close(ps);         
	         close(connection); 
	    }
	        
	    return programs;    
	}
	   
public int updateProgram(Collection<Program> programs , int sysplexId, String imsplexName) throws OmDatastoreException{
		
		Connection connection 	= null;
		PreparedStatement ps 	= null;
		int insertionSize=0;
						
		StringBuffer  sb = new StringBuffer("UPDATE ")
		.append(this.tableName).append("SET ")
		
		.append(ProgramResponseAttribute.CC).append(" = ? , ")
		.append(ProgramResponseAttribute.CCTXT).append(" = ? , ")
		.append(ProgramResponseAttribute.IMSID).append(" = ? , ")
		.append(ProgramResponseAttribute.MBR).append(" = ? , ")
		.append(ProgramResponseAttribute.PGM).append(" = ? , ")
		.append(ProgramResponseAttribute.RBMPT).append(" = ? , ")
		.append(ProgramResponseAttribute.RDOPT).append(" = ? , ")
		.append(ProgramResponseAttribute.REPO).append(" = ? , ")
		.append(ProgramResponseAttribute.RFP).append(" = ? , ")
		.append(ProgramResponseAttribute.RGPSB).append(" = ? , ")
		.append(ProgramResponseAttribute.RLANG).append(" = ? , ")
		.append(ProgramResponseAttribute.RRSDNT).append(" = ? , ")
		.append(ProgramResponseAttribute.RRGNT).append(" = ? , ")
		.append(ProgramResponseAttribute.RSCHD).append(" = ? , ")
		.append(ProgramResponseAttribute.RTLS).append(" = ? , ")
		.append(ProgramResponseAttribute.RTMCR).append(" = ? , ")
		.append(ProgramResponseAttribute.RTMUP).append(" = ? , ")
	
		.append(" WHERE ").append(ProgramResponseAttribute.PGM).append(" = ? ")
        .append(" AND ").append(ProgramResponseAttribute.MBR).append(" = ? ")
		.append(" AND ").append(SYSPLEX_ID).append(" = ? ")
		.append(" AND ").append(IMSPLX).append(" = ? ");
		
		try{
			int i = 0;
	        connection = parentDatastore.getConnection();
	        connection.setAutoCommit(false);
	        ps = connection.prepareStatement(sb.toString(),Statement.RETURN_GENERATED_KEYS);
	           
			for(Program pgm: programs){
				
				ps.setString(1, pgm.getProperty(ProgramResponseAttribute.CC));
				ps.setString(2, pgm.getProperty(ProgramResponseAttribute.CCTXT));
				ps.setString(3, pgm.getProperty(ProgramResponseAttribute.IMSID));
				ps.setString(4, pgm.getProperty(ProgramResponseAttribute.MBR));
				ps.setString(5, pgm.getProperty(ProgramResponseAttribute.PGM));
				ps.setString(6, pgm.getProperty(ProgramResponseAttribute.RBMPT));
				ps.setString(7, pgm.getProperty(ProgramResponseAttribute.RDOPT));
				ps.setString(8, pgm.getProperty(ProgramResponseAttribute.REPO));
				ps.setString(9, pgm.getProperty(ProgramResponseAttribute.RFP));
				ps.setString(10, pgm.getProperty(ProgramResponseAttribute.RGPSB));
				ps.setString(11, pgm.getProperty(ProgramResponseAttribute.RLANG));
				ps.setString(12, pgm.getProperty(ProgramResponseAttribute.RRSDNT));
				ps.setString(13, pgm.getProperty(ProgramResponseAttribute.RRGNT));
				ps.setString(14, pgm.getProperty(ProgramResponseAttribute.RSCHD));
				ps.setString(15, pgm.getProperty(ProgramResponseAttribute.RTLS));
				ps.setString(16, pgm.getProperty(ProgramResponseAttribute.RTMCR));
				ps.setString(17, pgm.getProperty(ProgramResponseAttribute.RTMUP));
				
			
				if ((++i) % 1000 == 0) {
					insertionSize += ps.executeBatch().length;
					connection.commit();
					ps.clearBatch();
				}
			}
			
			insertionSize += ps.executeBatch().length;
			connection.commit();
			ps.clearBatch();
			
			//Populate the meta-data with the latest update
			this.autoConfigureResourceMetaData(sysplexId, imsplexName);
			
		} catch (SQLException e) {
	       	try {
					logAndRollback(connection, e);
				} catch (DatastoreException e1) {
					OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
					omDatastoreException.setQuery(sb.toString());
					throw omDatastoreException;
				}
			} finally {
				close(ps); 
				close(connection);
			}

		return insertionSize;
		
	}
	


	/**
	 * Update an entire column with a value. This can be pretty expensive and time costly.
	 * @param Column
	 * @param value
	 * @param sysplexId
	 * @param imsplexId
	 * @return
	 * @throws DatastoreException
	 */
	public int updateColumn(ProgramResponseAttribute column, String value, int sysplexId, String imsplexName) throws OmDatastoreException{
		StringBuffer sb = new StringBuffer("UPDATE ")
        .append(this.tableName)
        .append(" SET ").append(column).append(" = ? ")
        .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
        .append(" AND ").append(IMSPLX).append(" = ? ");
		
		 Connection connection = null;
	        PreparedStatement ps = null;
	        int result = 0;

	        try {
	        	connection = parentDatastore.getConnection();
	            ps = connection.prepareStatement(sb.toString(), Statement.RETURN_GENERATED_KEYS);
	            ps.setString(1, value);
	            ps.setInt(2, sysplexId);
	            ps.setString(3, imsplexName);
	           
	            ps.executeUpdate();
	            connection.commit();
	            
	        } catch(SQLException e) {
	        	try {
					logAndRollback(connection, e);
				} catch (DatastoreException e1) {
					OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
					omDatastoreException.setQuery(sb.toString());
					throw omDatastoreException;
				}
	        } finally {
	        	close(ps);         
	        	close(connection);
	        }
	        return result;
	}
	
	/**
	 * Update an entire column with a value. This can be pretty expensive and time costly.
	 * @param Column
	 * @param value
	 * @param systemId
	 * @param sysplexId
	 * @param imsplexId
	 * @return
	 * @throws DatastoreException
	 */
	public int updateColumn(ProgramResponseAttribute column, String value,String systemId, int sysplexId, String imsplexName) throws OmDatastoreException{
		StringBuffer sb = new StringBuffer("UPDATE ")
        .append(this.tableName)
        .append(" SET ").append(column).append(" = ? ")
        .append(" WHERE ").append(ProgramResponseAttribute.MBR).append(" = ? ")
        .append(" AND ").append(SYSPLEX_ID).append(" = ? ")
        .append(" AND ").append(IMSPLX).append(" = ? ");
		
		 Connection connection = null;
	        PreparedStatement ps = null;
	        int result = 0;

	        try {
	        	connection = parentDatastore.getConnection();
	            ps = connection.prepareStatement(sb.toString(), Statement.RETURN_GENERATED_KEYS);
	            ps.setString(1, value);
	            ps.setString(2, systemId);
	            ps.setInt(3, sysplexId);
	            ps.setString(4, imsplexName);
	           
	            ps.executeUpdate();
	            connection.commit();
	            
	        } catch(SQLException e) {
	        	try {
					logAndRollback(connection, e);
				} catch (DatastoreException e1) {
					OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
					omDatastoreException.setQuery(sb.toString());
					throw omDatastoreException;
				}
	        } finally {
	        	close(ps);         
	        	close(connection);
	        }
	        return result;
	}
	
  
	//Get programs by Name for REPO
    
    public Collection<Program> getProgramsByName(int sysplexId, String imsplexName, String[] imsSystemName, String[] programNames, Om om) throws OmDatastoreException, OmException, OmConnectionException {
        Connection connection = null;
        PreparedStatement ps = null;
        ResultSet results = null;
        ArrayList<Program> programs = new ArrayList<Program>();
        StringBuffer sb = null; 
       
        try{
             
            connection = parentDatastore.getConnection();
            String sqlNameSearch = this.sqlResourceGenerator(ProgramResponseAttribute.PGM.toString(), programNames);
            
            //Case: no route has been passed or the length is 0 but so we need to check if an impslexname has been passed.
            if(imsSystemName == null || imsSystemName.length == 0){
             if(imsplexName != null){
                     
                    sb = new StringBuffer("SELECT * FROM ")
                     .append(this.tableName)
                     .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                     .append(" AND ").append(IMSPLX).append(" = ? ")
                     .append(sqlNameSearch);
                       
                    ps = connection.prepareStatement(sb.toString());
                    ps.setInt(1, sysplexId);
                    ps.setString(2, imsplexName);
                 }else{
                     
                    sb = new StringBuffer("SELECT * FROM ")
                     .append(this.tableName)
                     .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                     .append(sqlNameSearch);
                        
                     ps = connection.prepareStatement(sb.toString());
                     ps.setInt(1, sysplexId);
                 }
                 
             results = ps.executeQuery();
                    
                while (results.next()) {
                    Program pgm = new Program(results);
                    programs.add(pgm);
                }
                    
            }else{ //Route has been passed and for each we route the command and concat the results
             
             //String sqlIn = this.sqlInGenerator(ProgramResponseAttribute.MBR.toString(), imsSystemName);
                sb = new StringBuffer("SELECT * FROM ")
                     .append(this.tableName)
                    .append(" WHERE ").append(SYSPLEX_ID).append(" = ? ")
                    .append(" AND ").append(IMSPLX).append(" = ? ")
                  //  .append(sqlIn)
                    .append(sqlNameSearch);
                        
                    ps = connection.prepareStatement(sb.toString());
                    ps.setInt(1, sysplexId);
                    ps.setString(2, imsplexName);
                        
                    results = ps.executeQuery();
                        
                    while (results.next()) {
                        Program pgm = new Program(results);
                        programs.add(pgm);
                    }
            }
            
            //Execute process to cleanup the status column in the derby cache
            //this.executeUpdateProgramColumnAsynchronously(programStatuses,sysplexId,imsplexName);
            
        } catch(SQLException e) {
            try {
                logAndRollback(connection, e);
            } catch (DatastoreException e1) {
                OmDatastoreException omDatastoreException = new OmDatastoreException(e1);
                omDatastoreException.setQuery(sb.toString());
                throw omDatastoreException;
            }
        } finally {
            close(results);    // ResultSet
            close(ps);         // PreparedStatement
            close(connection); // Connection
        }
        
        return programs;
    }  	
        
}
