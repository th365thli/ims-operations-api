/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2015 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.active;

import java.util.Map;

import com.ibm.ims.ea.om.common.ImsResource;

public class Active extends ImsResource {
	
	/**
	 * Constructor helpful in creating an empty bean particularly in areas reflection is used. 
	 * Should be used with ({@link Iconnect#setMap(Map)}
	 */
	public Active() {
		this.resourceType = ResourceType.ACTIVE;
	}

	/**
	 * Method creates an instance of the bean given a Map representing the resource from an OM interaction
	 * @param omResourceResponse Map representation for IMS resource such as 
	 * a transaction or database query.
	 * @param properties
	 */
	public Active(Map<String, String> properties) {
		super(properties);
		this.resourceType = ResourceType.ACTIVE;
	}

	@Override
	public void setMap(Map<String, String> resourceMap) {
		this.properties = resourceMap;
		this.resourceType = ResourceType.ACTIVE;
	}

	public String getProperty(ActiveResponseAttribute key){
		return this.properties.get(key.toString());
	}

	/**
	 * IMS Program Output fields that are returned for this resource type. 
	 * Depending on the command some fields when queried will return null.
	 */
	public enum ActiveResponseAttribute {

		REGID, JOBNAME, TYPE, TRANSTEP, PROGRAM, STATUS, CLASS, MBR;


		public String value() {
			return name();
		}

		public static ActiveResponseAttribute fromValue(String v) {
			return valueOf(v);
		}

		@Override
		public String toString(){
			return name();
		}
	}
	
	@Override
	public void setAttribute(String key, String value) {
		this.properties.put(key, value);
	}
	
    public static enum STATUS {
        ACTIVE_RRS("ACTIVE-RRS"),
        ACTIVE_XCF("ACTIVE-XCF"),
        ACTIVE_RRS_XCF("ACTIVE-RRS/XCF"),
        ACTIVE_DBCMD("ACTIVE-DBCMD"),
        AVAILABLE("AVAILABLE"),
        FORCE_RRS("FORCE-RRS"),
        FORCE_RRS_XCF("FORCE-RRS/XCF"),
        OLR_RUNNING("OLR-RUNNING"),
        OLR_ALTER_INPROG("OLR-ALTER-INPROG"),
        SCHEDULING("SCHEDULING"),
        TERMINATING("TERMINATING"),
        TERM_ABDUMP_IN_P("TERM-ABDUMP IN-P"),
        TERM_ABDUMP_PEND("TERM-ABDUMP PEND"),
        TERM_ABDUMP_SCHD("TERM-ABDUMP SCHD"),
        TERM_BCKOUT_IN_P("TERM-BCKOUT IN-P"),
        TERM_THREAD_TERM("TERM-THREAD TERM"),
        TERM_WAIT_SYNCPT("TERM-WAIT SYNCPT"),
        TERM_WAIT_RRS("TERM-WAIT RRS"),
        UNAVAILABLE("UNAVAILABLE"),
        WAIT_AOI("WAIT-AOI"),
        WAIT_BLOCKMOVER("WAIT-BLOCKMOVER"),
        WAIT_CALLOUT("WAIT-CALLOUT"),
        WAIT_CMD_PENDING("WAIT-CMD/PENDING"),
        WAIT_EPCB_POOL("WAIT-EPCB POOL"),
        WAITING("WAITING"),
        WAIT_INPUT("WAIT-INPUT"),
        WAIT_INTENT("WAIT-INTENT"),
        WAIT_INTENT_POOL("WAIT-INTENT/POOL"),
        WAIT_INTENT_SCHD("WAIT-INTENT SCHD"),
        WAIT_IO_PREVEN("WAIT-I/O PREVEN"),
        WAIT_MESSAGE("WAIT-MESSAGE"),
        WAIT_POOLSPACE("WAIT-POOLSPACE"),
        WAIT_QSC("WAIT-QSC"),
        WAIT_RRS_PC("WAIT-RRS PC"),
        WAIT_SWITCHOVER("WAIT-SWITCHOVER"),
        WAIT_SYNCPOINT("WAIT-SYNCPOINT"),
        WAIT_XCF("WAIT-XCF"),
        TERM_WAIT_XCF("TERM-WAIT XCF"),
        TMEM("TMEM"),
        TPIPE("TPIPE"),
        LUNAME("LUNAME");
        
        private String value = "";

        private STATUS(String val){
            this.value = val;
        }

        private STATUS(){}

        @Override
        public String toString(){
            return this.value;
        }
     }
	

}
