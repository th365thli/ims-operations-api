/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.common.services;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Collection;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.common.service.ExtendedIconService;
import com.ibm.ims.ea.om.common.service.IconService;
import com.ibm.ims.ea.om.icon.Iconnect;
import com.ibm.ims.ea.om.icon.Iconnect.IconResponseAttribute;

/**
 * Provides extended function of IconSerivces through data manipulation 
 * and aggregation of various services.
 * @author ddgandhi
 *
 */
public final class IconExtendedServices implements ExtendedIconService{
    private static final Logger logger = LoggerFactory.getLogger(IconExtendedServices.class);
    private Om om = null;
    
    //This must remain protected else the Om instance will not be able to aggregate all the Om Messages
	protected IconExtendedServices(Om om) {
		this.om = om;
	}

	@Override
	public Collection<String> getImsplexesForHostandPort(String host, int port) throws OmException, OmConnectionException, OmDatastoreException {
	    if(logger.isDebugEnabled()) logger.debug(">> getImsplexesForHostandPort("+ host+ ","+ port +")");
	    
		host = resolveIp(host);
		host = zeroPadIp(host);
		
		ArrayList<String> memberNames = new ArrayList<String>();
		ArrayList<String> imsplexNames = new ArrayList<String>();
		IconService iconService = om.getIconService();
		
		//Using user entered host find all icons that have matching ip and add to collection
		Collection<Iconnect> iconsConfig = iconService.getConfig();
		
		//Search results for one that matches the host to the resulting ip, then add the mbr to to a list to be later used.
		for(Iconnect icon : iconsConfig){
			if(icon.getProperty(IconResponseAttribute.IP).equals(host)){
				memberNames.add(icon.getProperty(IconResponseAttribute.MBR));
			}
		}
		
		//If we have more than one we need to see if the ICON is configured to respond to that PORT
		if(memberNames.size() > 1){
			String strPort = String.valueOf(port);
			
			Collection<Iconnect> iconsPort = iconService.getPort(strPort);
			
			//Search each of the Port status for a matching memberName, if the CC is non zero then remove it from the list
			for(Iconnect icon : iconsPort){
				for(int i = 0; i < memberNames.size(); i++){
					String member = memberNames.get(i);
					if(member.equalsIgnoreCase(icon.getProperty(IconResponseAttribute.MBR))){
						if(!icon.getProperty(IconResponseAttribute.CC).trim().equals("0")){
							memberNames.remove(i);
						}
					}
				}
			}
		}
		
		//Search each of these results to see if they their MBR matches the above result. So look for any HWS1's.
		Collection<Iconnect> iconsImsplex = iconService.getImsplex();
		for(Iconnect icon : iconsImsplex){
			for(String member: memberNames){
				if(member.equalsIgnoreCase(icon.getProperty(IconResponseAttribute.MBR))){
					imsplexNames.add(icon.getProperty(IconResponseAttribute.IMSPLX));
				}
			}
		}
		
		//TODO: Use this information to populate the IMSPLEX table eventually. , change return to Collection<Imsplex> 
		//ImsplexService imsplexService = om.getImsplexService();
		
		//		Collection<Imsplex> imsplexes = imsplexService.getImsPlexMember(imsplexNames.get(0));
		//		for(Imsplex imsplex : imsplexes){
		//			System.out.println("IMS FOUND ");
		//			System.out.println(imsplex);
		//		}
		
	    if(logger.isDebugEnabled()) logger.debug("<< getImsplexesForHostandPort("+ host+ ","+ port +")");
		return imsplexNames;
	}

	
	/**
	 * Returns the numeric IP address in a textual representation.
	 * @param ip
	 * @return
	 * @throws OmException
	 */
    private String resolveIp(String ip) throws OmException {
   	 	InetAddress address = null;
   	    try {
			address = InetAddress.getByName(ip);
		} catch (UnknownHostException e) {
			throw new OmException(e);
		}
   	    return address.getHostAddress();
    }
   
    /**
     * Returns and IP address padded with zeros, i.e. 9.55.123.55 will return as 009.055.123.055
     * @param ip
     * @return
     */
	private String zeroPadIp(String ip) {
		String[] splitArray = ip.split("\\.");
		StringBuffer strbuff = new StringBuffer();
		int splitArrayLength = splitArray.length;

		for (int j = 0; j < splitArrayLength; j++) {

			String oct = splitArray[j];
			int octLength = oct.length();

			if (octLength < 3) {
				String pad = "";
				for (int i = octLength; i < 3; i++) {
					pad += 0;
				}
				splitArray[j] = pad + splitArray[j];
			}
		}

		for (int i = 0; i < splitArrayLength; i++) {
			strbuff.append(splitArray[i]);
			if (i != 3) {
				strbuff.append(".");
			}
		}
		return strbuff.toString();
	}
}
