/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.common.service;

import java.util.Collection;
import java.util.Map;

import com.ibm.ims.ea.base.version.Version;
import com.ibm.ims.ea.om.cmd.v14.query.imsplex.QueryImsPlex;
import com.ibm.ims.ea.om.cmd.v14.query.imsplex.QueryImsPlex.StatusOptions;
import com.ibm.ims.ea.om.cmd.v14.query.imsplex.QueryImsPlex.TypeOptions;
import com.ibm.ims.ea.om.common.connection.factory.OMConnection;
import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.imsplex.Imsplex;

/**
 * Class provides a simple to use API to interact with Operations Manager. The objects returned are beans that 
 * aid represent the result OM has returned. This API is backed by a cache that is populated by calling the 
 * class discovery. Once discovered certain members will interact with the cache minimizing the size of the 
 * query sent to OM thus yielding performance. It should be noted not all methods interact with a cache, each
 * method explains its interaction.
 */
public interface ImsplexService {

	/**
	 * <pre>
	 * Returns all Imsplex members for an IMS System.
	 * 
	 * The query is sent to all OM registered with the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered OM1OM and OM3OM then 
     * the result include responses for both OM1OM and OM3OM.
     * 
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
	 * @return
	 * @throws OmException
	 * @throws OmConnectionException 
	 * @throws OmDatastoreException 
	 * </pre>
	 */
	public Collection<Imsplex> getImsPlexMembers() throws OmException, OmConnectionException, OmDatastoreException;
	
	/**
	 * <pre>
	 * Returns all Imsplex members in the IMSPlex.
	 * 
	 * The query is sent to the OM (omName) within the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered OM1OM and OM3OM then 
     * the result include responses for both OM1OM and OM3OM.
     * 
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
	 * @param omName
	 * @return
	 * @throws OmException
	 * @throws OmConnectionException
	 * @throws OmDatastoreException
	 * </pre>
	 */
	//public Collection <Imsplex> getImsPlexMembers(String[] omName) throws OmException, OmConnectionException, OmDatastoreException ;

	/**
	 * <pre>
	 * Returns imsplex members that match the provided IMSPlex type in the IMSPlex. 
	 * 
	 * The query is sent to all OMs registered with the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered OM1OM and OM3OM then 
     * the result include responses for both OM1OM and OM3OM.
     * 
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
	 * @param types
	 * @return
	 * @throws OmException
	 * @throws OmConnectionException 
	 * @throws OmDatastoreException 
	 * </pre>
	 
	 */
	public Collection<Imsplex> getImsPlexMember(QueryImsPlex.TypeOptions[] types) throws OmException, OmConnectionException, OmDatastoreException;

	/**
	 * Returns imsplex members that match the provided IMSPlex type in the IMSPlex. 
	 * 
	 * The query is sent to the OM (omName) registered with the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered OM1OM and OM3OM then 
     * the result include responses for both OM1OM and OM3OM.
     * 
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
	 * Get Imsplex members for a particular system(omName) filtered by imsplex type .
	 * System Id is identified by setting the MBR attribute.
	 * Query is derived using the OM type-2 command and routed only to the resource identified by the omName.
	 * eg: QUERY IMSPLEX TYPE(IMS) SHOW(ALL) ROUTE(OM1OM)
	 * 
	 * @param types
	 * @param omName
	 * @return
	 * @throws OmException
	 * @throws OmConnectionException
	 * @throws OmDatastoreException
	 */
	public Collection<Imsplex> getImsPlexMember(QueryImsPlex.TypeOptions[] types,String[] memberName) throws OmException, OmConnectionException, OmDatastoreException;
	
	/**
	 * Returns all Imsplex members (IMS's) along with the subtype for the IMSplex that helps to figure 
	 * out all the resources tied with the IMS.
	 * 
	 * This query is sent to all OMs registered with the IMSplex that is configured in the {@link OMConnection}.
	 * For example:  if the omConnection is configured with IMSPLEX1 which has registered OM1OM and OM3OM then 
     * the result include responses for both OM1OM and OM3OM. 
     * 
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     *  
	 * Query derived using type-2 command QUERY IMSPLEX NAME(*) TYPE(IMS) SHOW(SUBTYPE) 
	 * If SUBTYPE is:
	 * DBDC - All resources defined (TRAN, PGM, DB, RTC)
	 * DCCTL - TRAN, PGM, and RTC
	 * DBCTL - PGM and DB
	 * 
	 * @return Collection of {@link Imsplex}
	 * @throws OmException
	 * @throws OmConnectionException
	 * @throws OmDatastoreException
	 */
	public Collection<Imsplex> getImsResources() throws OmException, OmConnectionException, OmDatastoreException;
	
	/**
	 * Returns all Imsplex members (IMS's) along with the subtype for the IMSPlex that helps to 
	 * figure out all the resources tied with the IMS.
	 * 
	 * This query is sent to OM (omName) registered with the IMSplex that is configured in the {@link OMConnection}.
	 * For example:  if the omConnection is configured with IMSPLEX1 which has registered OM1OM and OM3OM then 
     * the result include responses for both OM1OM and OM3OM. 
     *  
     * This service will interact with a local cache, when there is an interaction with a local cache the behavior 
     * can be overridden to behave differently. To do so, you can set the interaction mode with 
     * {@link Om#setInteractionMode(InteractionMode.)}. There modes are: {@link InteractionMode#LIVE}, 
     * {@link InteractionMode#CACHE}, {@link InteractionMode#DEFAULT}.
     * 
	 * Query derived using type-2 command e.g. QUERY IMSPLEX NAME(PLEX1) TYPE(IMS) SHOW(SUBTYPE).
	 * Query is routed only to the resource identified by the omName.  
	 * @param omName 
	 * @return Collection of {@link Imsplex} 
	 * @throws OmException
	 * @throws OmConnectionException
	 */
	public Collection<Imsplex> getImsResources(String[] omName) throws OmException, OmConnectionException, OmDatastoreException;
	
	
	public int discoverImsplexMembers() throws OmDatastoreException, OmException, OmConnectionException;
	
	/**
	 * This method will discover all IMSPlex members for an IMS System and cache them in our local database. After discovery
     * has been invoked, the services that support {@link InteractionMode) will interact with the local cache when answering
     * queries. This improves performance and reduces the overall cost to run queries. 
     * 
     * Once discovery has been invoked you can re-discover changes in the IMS System by running the method again as many
     * times as needed.
     * 
	 * @param omName
	 * @return
	 * @throws OmDatastoreException
	 * @throws OmException
	 * @throws OmConnectionException
	 */
	//public int discoverImsplexMembers(String omName) throws OmDatastoreException, OmException, OmConnectionException;
	
	/**
     * <pre>
     * Returns all IMSPlex members with a particular status {@link QueryImsPlex.StatusOptions} in the IMSplex.
     * 
     * The query is sent to all OMs registered with the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered OM1OM and OM3OM then 
     * the result include responses for both OM1OM and OM3OM.
     * 
     * This service is a live only call to Operations Manager, there is no cache involved. {@link InteractionMode} is not supported for this
     * service.
     * 
     * @param queryImsPlexStatuses
     * @return
     * @throws OmException
     * @throws OmConnectionException 
     * </pre>
	 * @throws OmDatastoreException 
     */
	public Collection<Imsplex> getImsPlexMembersByStatus(StatusOptions[] queryImsPlexStatuses) throws OmException,	OmConnectionException, OmDatastoreException;

	/**
     * <pre>
     * Returns IMSPlex members matching a given status {@link QueryImsPlex.StatusOptions} for in an IMS System.
     * 
     * The query is sent to the OM (omName) within the IMSplex that is configured in the {@link OMConnection}.
     * For example: if the omConnection is configured with IMSPLEX1 which has registered OM1OM and OM3OM and the 
     * omName is set to OM1OM, then the result include responses for OM1OM only.
     * 
     * This service is a live only call to Operations Manager, there is no cache involved. {@link InteractionMode} is not supported for this
     * service.
     *  
     * @param queryImsPlexStatuses
     * @param imsName
     * @return
     * @throws OmException
     * @throws OmConnectionException 
     * </pre>
	 * @throws OmDatastoreException 
     */
	public Collection<Imsplex> getImsPlexMembersByStatus(StatusOptions[] queryImsPlexStatuses, String[] omName)	throws OmException, OmConnectionException, OmDatastoreException;

    /**
     * Method will Query the IMSPlex for all members that match the argument type {@link QueryImsPlex.TypeOptions} 
     * and will look for a member whose name matches the argument memberName. If the member name passed is an 
     * Asterisk then the latest (greatest) version for that type will be returned.
     * @param type
     * @param memberName
     * @return
     * @throws OmException
     * @throws OmConnectionException
     * @throws OmDatastoreException 
     */
	public Version getImsPlexMemberVersion(TypeOptions type, String memberName) throws OmException, OmConnectionException, OmDatastoreException;

    /**
     * Method will Query IMSPlex for all members that match the argument type {@link QueryImsPlex.TypeOptions} 
     * and will look for any members who name match the argument memberName. A Map of the matching memberNames
     * to the version will be returned. 
     * @param types
     * @param memberName
     * @return
     * @throws OmException
     * @throws OmConnectionException
     * @throws OmDatastoreException
     */
	public Map<String, Version> getImsPlexMemberVersion(TypeOptions[] types,String[] memberName) throws OmException, OmConnectionException,OmDatastoreException;

	Version getImsLatestVersion() throws OmException, OmConnectionException,
			OmDatastoreException;

	Map<String, Version> getResourceVersions(TypeOptions[] types)
			throws OmException, OmConnectionException, OmDatastoreException;
	
	public Version getVersion();

}