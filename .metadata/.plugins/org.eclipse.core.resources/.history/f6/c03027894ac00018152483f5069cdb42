/*********************************************************************************
 * Licensed Materials - Property of IBM
 * 5655-TAC
 * (C) Copyright IBM Corp. 2013 All Rights Reserved. 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with 
 * IBM Corp.               
 *********************************************************************************/

package com.ibm.ims.ea.om.common.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Map;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ibm.ims.ea.base.version.Version;
import com.ibm.ims.ea.om.cmd.v14.query.imsplex.QueryImsPlex;
import com.ibm.ims.ea.om.common.exception.OmConnectionException;
import com.ibm.ims.ea.om.common.exception.OmDatastoreException;
import com.ibm.ims.ea.om.common.exception.OmException;
import com.ibm.ims.ea.om.common.result.OmResultSet;
import com.ibm.ims.ea.om.common.service.OtmaService;
import com.ibm.ims.ea.om.datastore.ImsBaseDastoreConstants;
import com.ibm.ims.ea.om.otma.Otma;
/**
 * <pre>
 * Class provides methods to interact with OM for IMS Connect Resource type. 
 * Return types are generalized for all interactions as a Collection of {@link Icon} objects. 
 * 
 * It should be noted that the Collection only manages the response for the particular 
 * resource and that OM Messages including Reason Codes, Reason Text, etc are accessible 
 * from the {@link Om} instance managing the interaction. 
 * 
 * See  <code>{@link Om#getOmMessageContexts()} </code> on how to access OM Messages.
 * </pre>
 * 
 */
public final class OtmaServices extends ServicesHelper implements OtmaService{

	private static final Logger logger = LoggerFactory.getLogger(OtmaServices.class);
	private static final ArrayList<String> OTMA_HEADERS_V14 = new ArrayList<String>(Arrays.asList("MEMBER","XCF_STATUS","USER_STATUS","SECURITY","TIB","INPT","SMEM","DRUEXIT","TO","TPCNT","ACEEAGE","MAXTP"));
	
	//This must remain protected else the Om instance will not be able to aggregate all the Om Messages
	protected OtmaServices(Om om) {
		super(om);
		
		try {
			this.resourceVersion = om.getImsplexService().getResourceVersions(new QueryImsPlex.TypeOptions[]{QueryImsPlex.TypeOptions.IMS});
		} catch (Exception e) {
			this.version = Version.IMS_ZERO_RELEASE;
		}
	}

	@Override
	public Collection<Otma> getImsOtma() throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getImsOtma()");
		
		//Note the method key to be used for associating the service
		String methodKey = "getImsOtma";
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
		
		try{

			//Set and configure the version using mapped resource version and the route name
			this.version = this.resourceVersion.get("latestResourceVersion");
			
			String cmd ="CMD((DISPLAY OTMA) OPTION=AOPOUTPUT)";
			
			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);
			
			return propertiesToCollection(omResultSet);
			
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getImsOtma()");
			
			this.setOmInteractionContext(omResultSet, methodKey, OTMA_HEADERS_V14);
		}
	}

	@Override
	public Collection<Otma> getImsOtma(String [] imsSystemName) throws OmException, OmConnectionException, OmDatastoreException {
		if(logger.isDebugEnabled()) logger.debug(">> getImsOtma("+ Arrays.toString(imsSystemName)+")");
		
		//Note the method key to be used for associating the service
		String methodKey = "getImsOtma";
		
		//Local omresultSet otherwise we risk data corruption of the service is reused. 
		OmResultSet omResultSet = null;
		
		try{
			
			imsSystemName = this.routeMemberFormater(imsSystemName);

			//Set and configure the version using mapped resource version and the route name
			this.version = this.setVersion(this.resourceVersion , imsSystemName);
			
			String cmd ="CMD((DISPLAY OTMA) OPTION=AOPOUTPUT) ROUTE(";

			int nRoute = imsSystemName.length;
			int counter =0;

			while(counter < nRoute){       
				cmd = cmd+imsSystemName[counter];
				counter = counter +1;
				
				if(counter == nRoute){
					cmd = cmd + ")";
				}else{
					cmd = cmd +",";
				}
			}

			Service service = new Service(this.om, this.version);
			omResultSet = service.executeCommand(methodKey,cmd);
			
			 return propertiesToCollection(omResultSet);
		
		}finally{
			if(logger.isDebugEnabled()) logger.debug("<< getImsOtma()");
			
			this.setOmInteractionContext(omResultSet, methodKey, OTMA_HEADERS_V14);
		}
	}

    /**
  	 * Method will map a omResulset to a collection of ims beans. It will also
  	 * append to each bean the sysplex and imsplex name. 
  	 * @param omResultSet
  	 * @return
  	 */
      private Collection<Otma> propertiesToCollection(OmResultSet omResultSet) {
          Collection<Otma> tempList = new ArrayList<Otma>();

              Properties[] properties = omResultSet.getResponseProperties();

              for (Properties p : properties) {
            	  Otma otma = new Otma();
            	  otma.setMap((Map)p);
            	  otma.getMap().put(ImsBaseDastoreConstants.SYSPLEX_ID, omResultSet.getEnvironment());
            	  otma.getMap().put(ImsBaseDastoreConstants.IMSPLX, omResultSet.getImsplex());
                  tempList.add(otma);
              }

          return tempList;
      }
}
